
AVRASM ver. 2.1.30  D:\Projects\avr projects\temp_interupt\List\temp_interupt.asm Thu May 12 20:00:36 2016

D:\Projects\avr projects\temp_interupt\List\temp_interupt.asm(1095): warning: Register r5 already defined by the .DEF directive
D:\Projects\avr projects\temp_interupt\List\temp_interupt.asm(1096): warning: Register r4 already defined by the .DEF directive
D:\Projects\avr projects\temp_interupt\List\temp_interupt.asm(1097): warning: Register r7 already defined by the .DEF directive
D:\Projects\avr projects\temp_interupt\List\temp_interupt.asm(1098): warning: Register r6 already defined by the .DEF directive
D:\Projects\avr projects\temp_interupt\List\temp_interupt.asm(1099): warning: Register r9 already defined by the .DEF directive
D:\Projects\avr projects\temp_interupt\List\temp_interupt.asm(1100): warning: Register r8 already defined by the .DEF directive
D:\Projects\avr projects\temp_interupt\List\temp_interupt.asm(1101): warning: Register r11 already defined by the .DEF directive
D:\Projects\avr projects\temp_interupt\List\temp_interupt.asm(1102): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.24 Evaluation
                 ;(C) Copyright 1998-2015 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _kytu=R6
                 	.DEF _b=R9
                 	.DEF _ttemp0=R8
                 	.DEF _ttemp1=R11
                 	.DEF _my_variable=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0089 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 013b 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0200      	.DB  0x0,0x0,0x0,0x2
                 
                 _0x3C:
000036 f9c0
000037 b0a4
000038 9299
000039 f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
00003a 9080      	.DB  0x80,0x90
                 _0x3F:
00003b 021e
00003c 040b
00003d 050b
00003e 0110      	.DB  0x1E,0x2,0xB,0x4,0xB,0x5,0x10,0x1
D:\Projects\avr projects\temp_interupt\List\temp_interupt.asm(1152): warning: .cseg .db misalignment - padding zero byte
00003f 0001      	.DB  0x1
                 _0x0:
000040 4e20
000041 6968
000042 7465
000043 6420      	.DB  0x20,0x4E,0x68,0x69,0x65,0x74,0x20,0x64
000044 206f
000045 6968
000046 6e65
000047 7420      	.DB  0x6F,0x20,0x68,0x69,0x65,0x6E,0x20,0x74
000048 6961
000049 6c20
00004a 2061
00004b 6425      	.DB  0x61,0x69,0x20,0x6C,0x61,0x20,0x25,0x64
00004c 6f20
00004d 0a43
00004e 000d
00004f 4720      	.DB  0x20,0x6F,0x43,0xA,0xD,0x0,0x20,0x47
000050 6f69
000051 6820
000052 6569
000053 206e      	.DB  0x69,0x6F,0x20,0x68,0x69,0x65,0x6E,0x20
000054 6174
000055 2069
000056 616c
000057 2520      	.DB  0x74,0x61,0x69,0x20,0x6C,0x61,0x20,0x25
000058 3a64
000059 6425
00005a 253a
00005b 0a64      	.DB  0x64,0x3A,0x25,0x64,0x3A,0x25,0x64,0xA
00005c 000d
00005d 684e
00005e 6569
00005f 2074      	.DB  0xD,0x0,0x4E,0x68,0x69,0x65,0x74,0x20
000060 6f64
000061 6820
000062 6569
000063 206e      	.DB  0x64,0x6F,0x20,0x68,0x69,0x65,0x6E,0x20
000064 6174
000065 2069
000066 616c
000067 2520      	.DB  0x74,0x61,0x69,0x20,0x6C,0x61,0x20,0x25
000068 0066
000069 6978
00006a 206e
00006b 6863      	.DB  0x66,0x0,0x78,0x69,0x6E,0x20,0x63,0x68
00006c 6f61
D:\Projects\avr projects\temp_interupt\List\temp_interupt.asm(1165): warning: .cseg .db misalignment - padding zero byte
00006d 0000      	.DB  0x61,0x6F,0x0
                 _0x20003:
00006e e128
00006f a321
000070 0002
000071 5b00      	.DB  0x28,0xE1,0x21,0xA3,0x2,0x0,0x0,0x5B
                 _0x20004:
000072 1b28
000073 3021
000074 0005
000075 f500      	.DB  0x28,0x1B,0x21,0x30,0x5,0x0,0x0,0xF5
                 _0x2040060:
D:\Projects\avr projects\temp_interupt\List\temp_interupt.asm(1171): warning: .cseg .db misalignment - padding zero byte
000076 0001      	.DB  0x1
                 _0x2040000:
000077 4e2d
000078 4e41
000079 4900
00007a 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Projects\avr projects\temp_interupt\List\temp_interupt.asm(1174): warning: .cseg .db misalignment - padding zero byte
00007b 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00007c 0001      	.DW  0x01
00007d 0002      	.DW  0x02
00007e 0066      	.DW  __REG_BIT_VARS*2
                 
00007f 0004      	.DW  0x04
000080 0006      	.DW  0x06
000081 0068      	.DW  __REG_VARS*2
                 
000082 000a      	.DW  0x0A
000083 0168      	.DW  _ma
000084 006c      	.DW  _0x3C*2
                 
000085 0001      	.DW  0x01
000086 017d      	.DW  __seed_G102
000087 00ec      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000088 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000089 94f8      	CLI
00008a 27ee      	CLR  R30
00008b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00008c e0f1      	LDI  R31,1
00008d bffb      	OUT  GICR,R31
00008e bfeb      	OUT  GICR,R30
00008f bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000090 e1f8      	LDI  R31,0x18
000091 bdf1      	OUT  WDTCR,R31
000092 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000093 e08d      	LDI  R24,(14-2)+1
000094 e0a2      	LDI  R26,2
000095 27bb      	CLR  R27
                 __CLEAR_REG:
000096 93ed      	ST   X+,R30
000097 958a      	DEC  R24
000098 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000099 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00009a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00009b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00009c 93ed      	ST   X+,R30
00009d 9701      	SBIW R24,1
00009e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00009f efe8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000a0 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000a1 9185      	LPM  R24,Z+
0000a2 9195      	LPM  R25,Z+
0000a3 9700      	SBIW R24,0
0000a4 f061      	BREQ __GLOBAL_INI_END
0000a5 91a5      	LPM  R26,Z+
0000a6 91b5      	LPM  R27,Z+
0000a7 9005      	LPM  R0,Z+
0000a8 9015      	LPM  R1,Z+
0000a9 01bf      	MOVW R22,R30
0000aa 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000ab 9005      	LPM  R0,Z+
0000ac 920d      	ST   X+,R0
0000ad 9701      	SBIW R24,1
0000ae f7e1      	BRNE __GLOBAL_INI_LOOP
0000af 01fb      	MOVW R30,R22
0000b0 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000b1 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000b2 bfed      	OUT  SPL,R30
0000b3 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000b4 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000b5 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000b6 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000b7 940c 0171 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.6 Evaluation
                 ;Automatic Program Generator
                 ;� Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version : v5.0
                 ;Date    : 31/3/2016
                 ;Author  : Viet Anh IT, for evaluation and
                 ;non-commercial use only
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 4.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ; *****************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// I2C Bus functions
                 ;//#include <i2c.h>
                 ;//#include <ds1307.h>
                 ;#include <myDS1307RTC.h>
                 
                 	.CSEG
                 _TWI_Init:
                 ; .FSTART _TWI_Init
0000b9 e0e0      	LDI  R30,LOW(0)
0000ba b9e1      	OUT  0x1,R30
0000bb e2e0      	LDI  R30,LOW(32)
0000bc b9e0      	OUT  0x0,R30
0000bd e8e4      	LDI  R30,LOW(132)
0000be bfe6      	OUT  0x36,R30
0000bf 9508      	RET
                 ; .FEND
                 _TWI_DS1307_wadr:
                 ; .FSTART _TWI_DS1307_wadr
0000c0 93aa      	ST   -Y,R26
                 ;	Addr -> Y+0
0000c1 eae4      	LDI  R30,LOW(164)
0000c2 bfe6      	OUT  0x36,R30
                 _0x3:
0000c3 b7e6      	IN   R30,0x36
0000c4 ffe7      	SBRS R30,7
0000c5 cffd      	RJMP _0x3
0000c6 b1e1      	IN   R30,0x1
0000c7 7fe8      	ANDI R30,LOW(0xF8)
0000c8 30e8      	CPI  R30,LOW(0x8)
0000c9 f019      	BREQ _0x6
0000ca b1e1      	IN   R30,0x1
0000cb 940c 0315 	JMP  _0x20A0002
                 _0x6:
0000cd ede0      	LDI  R30,LOW(208)
0000ce b9e3      	OUT  0x3,R30
0000cf e8e4      	LDI  R30,LOW(132)
0000d0 bfe6      	OUT  0x36,R30
                 _0x7:
0000d1 b7e6      	IN   R30,0x36
0000d2 ffe7      	SBRS R30,7
0000d3 cffd      	RJMP _0x7
0000d4 b1e1      	IN   R30,0x1
0000d5 7fe8      	ANDI R30,LOW(0xF8)
0000d6 31e8      	CPI  R30,LOW(0x18)
0000d7 f019      	BREQ _0xA
0000d8 b1e1      	IN   R30,0x1
0000d9 940c 0315 	JMP  _0x20A0002
                 _0xA:
0000db 81e8      	LD   R30,Y
0000dc b9e3      	OUT  0x3,R30
0000dd e8e4      	LDI  R30,LOW(132)
0000de bfe6      	OUT  0x36,R30
                 _0xB:
0000df b7e6      	IN   R30,0x36
0000e0 ffe7      	SBRS R30,7
0000e1 cffd      	RJMP _0xB
0000e2 b1e1      	IN   R30,0x1
0000e3 7fe8      	ANDI R30,LOW(0xF8)
0000e4 32e8      	CPI  R30,LOW(0x28)
0000e5 f019      	BREQ _0xE
0000e6 b1e1      	IN   R30,0x1
0000e7 940c 0315 	JMP  _0x20A0002
                 _0xE:
0000e9 e9e4      	LDI  R30,LOW(148)
0000ea bfe6      	OUT  0x36,R30
0000eb e0e0      	LDI  R30,LOW(0)
0000ec 940c 0315 	JMP  _0x20A0002
                 ; .FEND
                 ;	Addr -> Y+4
                 ;	Data -> Y+2
                 ;	len -> Y+1
                 ;	i -> R17
                 _TWI_DS1307_rblock:
                 ; .FSTART _TWI_DS1307_rblock
0000ee 93aa      	ST   -Y,R26
0000ef 931a      	ST   -Y,R17
                 ;	Data -> Y+2
                 ;	len -> Y+1
                 ;	i -> R17
0000f0 eae4      	LDI  R30,LOW(164)
0000f1 bfe6      	OUT  0x36,R30
                 _0x22:
0000f2 b7e6      	IN   R30,0x36
0000f3 78e0      	ANDI R30,LOW(0x80)
0000f4 f021      	BREQ _0x25
0000f5 b1e1      	IN   R30,0x1
0000f6 7fe8      	ANDI R30,LOW(0xF8)
0000f7 30e8      	CPI  R30,LOW(0x8)
0000f8 f009      	BREQ _0x24
                 _0x25:
0000f9 cff8      	RJMP _0x22
                 _0x24:
0000fa ede1      	LDI  R30,LOW(209)
0000fb b9e3      	OUT  0x3,R30
0000fc e8e4      	LDI  R30,LOW(132)
0000fd bfe6      	OUT  0x36,R30
                 _0x27:
0000fe b7e6      	IN   R30,0x36
0000ff 78e0      	ANDI R30,LOW(0x80)
000100 f021      	BREQ _0x2A
000101 b1e1      	IN   R30,0x1
000102 7fe8      	ANDI R30,LOW(0xF8)
000103 34e0      	CPI  R30,LOW(0x40)
000104 f009      	BREQ _0x29
                 _0x2A:
000105 cff8      	RJMP _0x27
                 _0x29:
000106 e010      	LDI  R17,LOW(0)
                 _0x2D:
000107 81e9      	LDD  R30,Y+1
000108 e0f0      	LDI  R31,0
000109 9731      	SBIW R30,1
00010a 2fa1      	MOV  R26,R17
00010b e0b0      	LDI  R27,0
00010c 17ae      	CP   R26,R30
00010d 07bf      	CPC  R27,R31
00010e f49c      	BRGE _0x2E
00010f ece4      	LDI  R30,LOW(196)
000110 bfe6      	OUT  0x36,R30
                 _0x2F:
000111 b7e6      	IN   R30,0x36
000112 78e0      	ANDI R30,LOW(0x80)
000113 f021      	BREQ _0x32
000114 b1e1      	IN   R30,0x1
000115 7fe8      	ANDI R30,LOW(0xF8)
000116 35e0      	CPI  R30,LOW(0x50)
000117 f009      	BREQ _0x31
                 _0x32:
000118 cff8      	RJMP _0x2F
                 _0x31:
000119 81aa      	LDD  R26,Y+2
00011a 81bb      	LDD  R27,Y+2+1
00011b 27ee      	CLR  R30
00011c 0fa1      	ADD  R26,R17
00011d 1fbe      	ADC  R27,R30
00011e b1e3      	IN   R30,0x3
00011f 93ec      	ST   X,R30
000120 5f1f      	SUBI R17,-1
000121 cfe5      	RJMP _0x2D
                 _0x2E:
000122 e8e4      	LDI  R30,LOW(132)
000123 bfe6      	OUT  0x36,R30
                 _0x34:
000124 b7e6      	IN   R30,0x36
000125 78e0      	ANDI R30,LOW(0x80)
000126 f021      	BREQ _0x37
000127 b1e1      	IN   R30,0x1
000128 7fe8      	ANDI R30,LOW(0xF8)
000129 35e8      	CPI  R30,LOW(0x58)
00012a f009      	BREQ _0x36
                 _0x37:
00012b cff8      	RJMP _0x34
                 _0x36:
00012c 81e9      	LDD  R30,Y+1
00012d e0f0      	LDI  R31,0
00012e 9731      	SBIW R30,1
00012f 81aa      	LDD  R26,Y+2
000130 81bb      	LDD  R27,Y+2+1
000131 0fae      	ADD  R26,R30
000132 1fbf      	ADC  R27,R31
000133 b1e3      	IN   R30,0x3
000134 93ec      	ST   X,R30
000135 e9e4      	LDI  R30,LOW(148)
000136 bfe6      	OUT  0x36,R30
000137 e0e0      	LDI  R30,LOW(0)
000138 8118      	LDD  R17,Y+0
000139 9624      	ADIW R28,4
00013a 9508      	RET
                 ; .FEND
                 ;
                 ;// 1 Wire Bus interface functions
                 ;//#include <1wire.h>
                 ;
                 ;//#include <my1wire.h>
                 ;#include <myds18b20.h>
                 ;
                 ;// DS1820 Temperature Sensor functions
                 ;//#include <ds18b20.h>
                 ;
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;#if RX_BUFFER_SIZE<256
                 ;unsigned char rx_wr_index, rx_rd_index, rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index, rx_rd_index, rx_counter;
                 ;#endif
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;// USART Receiver interrupt service routine
                 ;
                 ;interrupt [USART_RXC] void usart_rx_isr(void) {
                 ; 0000 0040 interrupt [12] void usart_rx_isr(void) {
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00013b 93ea      	ST   -Y,R30
00013c 93fa      	ST   -Y,R31
00013d b7ef      	IN   R30,SREG
00013e 93ea      	ST   -Y,R30
                 ; 0000 0041     char status, data;
                 ; 0000 0042     status = UCSRA;
00013f 931a      	ST   -Y,R17
000140 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000141 b11b      	IN   R17,11
                 ; 0000 0043     data = UDR;
000142 b10c      	IN   R16,12
                 ; 0000 0044     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
000143 2fe1      	MOV  R30,R17
000144 71ec      	ANDI R30,LOW(0x1C)
000145 f489      	BRNE _0x39
                 ; 0000 0045         rx_buffer[rx_wr_index] = data;
000146 2de5      	MOV  R30,R5
000147 e0f0      	LDI  R31,0
000148 5ae0      	SUBI R30,LOW(-_rx_buffer)
000149 4ffe      	SBCI R31,HIGH(-_rx_buffer)
00014a 8300      	ST   Z,R16
                 ; 0000 0046         if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index = 0;
00014b 9453      	INC  R5
00014c e0e8      	LDI  R30,LOW(8)
00014d 15e5      	CP   R30,R5
00014e f409      	BRNE _0x3A
00014f 2455      	CLR  R5
                 ; 0000 0047         if (++rx_counter == RX_BUFFER_SIZE) {
                 _0x3A:
000150 9473      	INC  R7
000151 e0e8      	LDI  R30,LOW(8)
000152 15e7      	CP   R30,R7
000153 f419      	BRNE _0x3B
                 ; 0000 0048             rx_counter = 0;
000154 2477      	CLR  R7
                 ; 0000 0049             rx_buffer_overflow = 1;
000155 9468      	SET
000156 f820      	BLD  R2,0
                 ; 0000 004A         };
                 _0x3B:
                 ; 0000 004B     };
                 _0x39:
                 ; 0000 004C }
000157 9109      	LD   R16,Y+
000158 9119      	LD   R17,Y+
000159 91e9      	LD   R30,Y+
00015a bfef      	OUT  SREG,R30
00015b 91f9      	LD   R31,Y+
00015c 91e9      	LD   R30,Y+
00015d 9518      	RETI
                 ; .FEND
                 ;
                 ;// Declare your global variables here
                 ;unsigned char ma[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
                 
                 	.DSEG
                 ;void quet(unsigned char x);
                 ;void day();
                 ;void hienthi(int x);
                 ;
                 ;void hienthinhietdo(unsigned char temp);
                 ;void hienthithoigian(unsigned char hour, unsigned char minute);
                 ;
                 ;void uart_char_tx(unsigned char chr);
                 ;unsigned char uart_getchar();
                 ;void getState(unsigned char);
                 ;
                 ;
                 ;float temp;
                 ;unsigned char kytu = '';
                 ;unsigned char b = 2;
                 ;unsigned char registry_ds1307[7]; // mang de luu tam cac gia tri doc duoc tu thanh ghi cua ds1307
                 ;
                 ;byte ttemp0; // first byte
                 ;byte ttemp1;
                 ;
                 ;struct Time {
                 ;    //Mode: chon che do 12h hoac 24h, Mode nam o bit 6 cua thanh ghi HOURS,
                 ;    //Mode=1: 12H, Mode=0: 24H
                 ;    //AP: bien chi AM hoac PM trong Mode 12h, AP nam o bit 5 cua thang ghi HOURS,
                 ;    //AP=1:PM, AP=0: AM
                 ;    unsigned char Second, Minute, Hour, Day, Date, Month, Year, Mode, AP; // mode(che do hien thi) =0 -> 24h; 1->12h
                 ;};
                 ;typedef struct Time Time;
                 ;Time myGetTimeFromDS1307();
                 ;void mySetTimeForDS1307(Time * _t);
                 ;
                 ;char mygetchar(void) {
                 ; 0000 006F char mygetchar(void) {
                 
                 	.CSEG
                 _mygetchar:
                 ; .FSTART _mygetchar
                 ; 0000 0070     char data;
                 ; 0000 0071     if (rx_counter == 0) return 0;
00015e 931a      	ST   -Y,R17
                 ;	data -> R17
00015f 2077      	TST  R7
000160 f419      	BRNE _0x3D
000161 e0e0      	LDI  R30,LOW(0)
000162 940c 02a5 	JMP  _0x20A0004
                 ; 0000 0072     data = rx_buffer[rx_rd_index];
                 _0x3D:
000164 2de4      	MOV  R30,R4
000165 e0f0      	LDI  R31,0
000166 5ae0      	SUBI R30,LOW(-_rx_buffer)
000167 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000168 8110      	LD   R17,Z
                 ; 0000 0073     if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
000169 9443      	INC  R4
00016a e0e8      	LDI  R30,LOW(8)
00016b 15e4      	CP   R30,R4
00016c f409      	BRNE _0x3E
00016d 2444      	CLR  R4
                 ; 0000 0074     //#asm("cli")
                 ; 0000 0075     --rx_counter;
                 _0x3E:
00016e 947a      	DEC  R7
                 ; 0000 0076     //#asm("sei")
                 ; 0000 0077     return data;
00016f 940c 02a4 	JMP  _0x20A0003
                 ; 0000 0078 }
                 ; .FEND
                 ;
                 ;// Declare your global variables here
                 ;unsigned char my_variable;
                 ;
                 ;void main(void) {
                 ; 0000 007D void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 007E     // Declare your local variables here
                 ; 0000 007F     unsigned char *t = 0;
                 ; 0000 0080     unsigned char h, m, s, i;
                 ; 0000 0081     int x;
                 ; 0000 0082     Time time = {30, 02, 11, 4, 11, 5, 16, 1, 1}; // thoi gian hien tai
                 ; 0000 0083     // Input/Output Ports initialization
                 ; 0000 0084     // Port A initialization
                 ; 0000 0085     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0086     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0087     PORTA = 0x00;
000171 972b      	SBIW R28,11
000172 e089      	LDI  R24,9
000173 e0a0      	LDI  R26,LOW(0)
000174 e0b0      	LDI  R27,HIGH(0)
000175 e7e6      	LDI  R30,LOW(_0x3F*2)
000176 e0f0      	LDI  R31,HIGH(_0x3F*2)
000177 d377      	RCALL __INITLOCB
                 ;	*t -> R16,R17
                 ;	h -> R19
                 ;	m -> R18
                 ;	s -> R21
                 ;	i -> R20
                 ;	x -> Y+9
                 ;	time -> Y+0
                +
000178 e000     +LDI R16 , LOW ( 0 )
000179 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
00017a e0e0      	LDI  R30,LOW(0)
00017b bbeb      	OUT  0x1B,R30
                 ; 0000 0088     //    DDRA = 0x00;
                 ; 0000 0089     DDRA = 0xFF;
00017c efef      	LDI  R30,LOW(255)
00017d bbea      	OUT  0x1A,R30
                 ; 0000 008A 
                 ; 0000 008B     // Port B initialization
                 ; 0000 008C     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 008D     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 008E     PORTB = 0x00;
00017e e0e0      	LDI  R30,LOW(0)
00017f bbe8      	OUT  0x18,R30
                 ; 0000 008F     DDRB = 0x00;
000180 bbe7      	OUT  0x17,R30
                 ; 0000 0090 
                 ; 0000 0091     // Port C initialization
                 ; 0000 0092     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0093     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0094     PORTC = 0x00;
000181 bbe5      	OUT  0x15,R30
                 ; 0000 0095     //    DDRC = 0xFF;
                 ; 0000 0096     DDRC = 0x00;
000182 bbe4      	OUT  0x14,R30
                 ; 0000 0097 
                 ; 0000 0098     // Port D initialization
                 ; 0000 0099     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 009A     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 009B     PORTD = 0x00;
000183 bbe2      	OUT  0x12,R30
                 ; 0000 009C     DDRD = 0x00;
000184 bbe1      	OUT  0x11,R30
                 ; 0000 009D 
                 ; 0000 009E     // Timer/Counter 0 initialization
                 ; 0000 009F     // Clock source: System Clock
                 ; 0000 00A0     // Clock value: Timer 0 Stopped
                 ; 0000 00A1     // Mode: Normal top=0xFF
                 ; 0000 00A2     // OC0 output: Disconnected
                 ; 0000 00A3     TCCR0 = 0x00;
000185 bfe3      	OUT  0x33,R30
                 ; 0000 00A4     TCNT0 = 0x00;
000186 bfe2      	OUT  0x32,R30
                 ; 0000 00A5     OCR0 = 0x00;
000187 bfec      	OUT  0x3C,R30
                 ; 0000 00A6 
                 ; 0000 00A7     // Timer/Counter 1 initialization
                 ; 0000 00A8     // Clock source: System Clock
                 ; 0000 00A9     // Clock value: Timer1 Stopped
                 ; 0000 00AA     // Mode: Normal top=0xFFFF
                 ; 0000 00AB     // OC1A output: Discon.
                 ; 0000 00AC     // OC1B output: Discon.
                 ; 0000 00AD     // Noise Canceler: Off
                 ; 0000 00AE     // Input Capture on Falling Edge
                 ; 0000 00AF     // Timer1 Overflow Interrupt: Off
                 ; 0000 00B0     // Input Capture Interrupt: Off
                 ; 0000 00B1     // Compare A Match Interrupt: Off
                 ; 0000 00B2     // Compare B Match Interrupt: Off
                 ; 0000 00B3     TCCR1A = 0x00;
000188 bdef      	OUT  0x2F,R30
                 ; 0000 00B4     TCCR1B = 0x00;
000189 bdee      	OUT  0x2E,R30
                 ; 0000 00B5     TCNT1H = 0x00;
00018a bded      	OUT  0x2D,R30
                 ; 0000 00B6     TCNT1L = 0x00;
00018b bdec      	OUT  0x2C,R30
                 ; 0000 00B7     ICR1H = 0x00;
00018c bde7      	OUT  0x27,R30
                 ; 0000 00B8     ICR1L = 0x00;
00018d bde6      	OUT  0x26,R30
                 ; 0000 00B9     OCR1AH = 0x00;
00018e bdeb      	OUT  0x2B,R30
                 ; 0000 00BA     OCR1AL = 0x00;
00018f bdea      	OUT  0x2A,R30
                 ; 0000 00BB     OCR1BH = 0x00;
000190 bde9      	OUT  0x29,R30
                 ; 0000 00BC     OCR1BL = 0x00;
000191 bde8      	OUT  0x28,R30
                 ; 0000 00BD 
                 ; 0000 00BE     // Timer/Counter 2 initialization
                 ; 0000 00BF     // Clock source: System Clock
                 ; 0000 00C0     // Clock value: Timer2 Stopped
                 ; 0000 00C1     // Mode: Normal top=0xFF
                 ; 0000 00C2     // OC2 output: Disconnected
                 ; 0000 00C3     ASSR = 0x00;
000192 bde2      	OUT  0x22,R30
                 ; 0000 00C4     TCCR2 = 0x00;
000193 bde5      	OUT  0x25,R30
                 ; 0000 00C5     TCNT2 = 0x00;
000194 bde4      	OUT  0x24,R30
                 ; 0000 00C6     OCR2 = 0x00;
000195 bde3      	OUT  0x23,R30
                 ; 0000 00C7 
                 ; 0000 00C8     // External Interrupt(s) initialization
                 ; 0000 00C9     // INT0: Off
                 ; 0000 00CA     // INT1: Off
                 ; 0000 00CB     // INT2: Off
                 ; 0000 00CC     MCUCR = 0x00;
000196 bfe5      	OUT  0x35,R30
                 ; 0000 00CD     MCUCSR = 0x00;
000197 bfe4      	OUT  0x34,R30
                 ; 0000 00CE 
                 ; 0000 00CF     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00D0     TIMSK = 0x00;
000198 bfe9      	OUT  0x39,R30
                 ; 0000 00D1 
                 ; 0000 00D2     // USART initialization
                 ; 0000 00D3     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00D4     // USART Receiver: On
                 ; 0000 00D5     // USART Transmitter: On
                 ; 0000 00D6     // USART Mode: Asynchronous
                 ; 0000 00D7     // USART Baud Rate: 9600
                 ; 0000 00D8     UCSRA = 0x00;
000199 b9eb      	OUT  0xB,R30
                 ; 0000 00D9     UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
00019a e8e6      	LDI  R30,LOW(134)
00019b bde0      	OUT  0x20,R30
                 ; 0000 00DA     UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
00019c e9e8      	LDI  R30,LOW(152)
00019d b9ea      	OUT  0xA,R30
                 ; 0000 00DB     UBRRH = 0x00;
00019e e0e0      	LDI  R30,LOW(0)
00019f bde0      	OUT  0x20,R30
                 ; 0000 00DC     UBRRL = 0x19;
0001a0 e1e9      	LDI  R30,LOW(25)
0001a1 b9e9      	OUT  0x9,R30
                 ; 0000 00DD 
                 ; 0000 00DE     // Analog Comparator initialization
                 ; 0000 00DF     // Analog Comparator: Off
                 ; 0000 00E0     // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00E1     ACSR = 0x80;
0001a2 e8e0      	LDI  R30,LOW(128)
0001a3 b9e8      	OUT  0x8,R30
                 ; 0000 00E2     SFIOR = 0x00;
0001a4 e0e0      	LDI  R30,LOW(0)
0001a5 bfe0      	OUT  0x30,R30
                 ; 0000 00E3 
                 ; 0000 00E4     // ADC initialization
                 ; 0000 00E5     // ADC disabled
                 ; 0000 00E6     ADCSRA = 0x00;
0001a6 b9e6      	OUT  0x6,R30
                 ; 0000 00E7 
                 ; 0000 00E8     // SPI initialization
                 ; 0000 00E9     // SPI disabled
                 ; 0000 00EA     SPCR = 0x00;
0001a7 b9ed      	OUT  0xD,R30
                 ; 0000 00EB 
                 ; 0000 00EC     // TWI initialization
                 ; 0000 00ED     // TWI disabled
                 ; 0000 00EE     TWCR = 0x00;
0001a8 bfe6      	OUT  0x36,R30
                 ; 0000 00EF 
                 ; 0000 00F0     // I2C Bus initialization
                 ; 0000 00F1     // I2C Port: PORTA
                 ; 0000 00F2     // I2C SDA bit: 1
                 ; 0000 00F3     // I2C SCL bit: 0
                 ; 0000 00F4     // Bit Rate: 100 kHz
                 ; 0000 00F5     // Note: I2C settings are specified in the
                 ; 0000 00F6     // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0000 00F7     //    i2c_init();
                 ; 0000 00F8 
                 ; 0000 00F9     // 1 Wire Bus initialization
                 ; 0000 00FA     // 1 Wire Data port: PORTB
                 ; 0000 00FB     // 1 Wire Data bit: 0
                 ; 0000 00FC     // Note: 1 Wire port settings are specified in the
                 ; 0000 00FD     // Project|Configure|C Compiler|Libraries|1 Wire menu.
                 ; 0000 00FE     //    w1_init();
                 ; 0000 00FF     //    ds18b20_init(t, 0, 0, DS18B20_9BIT_RES);
                 ; 0000 0100     //    rtc_init(0, 0, 0);
                 ; 0000 0101 
                 ; 0000 0102     TWI_Init(); //khoi dong TWI
0001a9 df0f      	RCALL _TWI_Init
                 ; 0000 0103 
                 ; 0000 0104     // Global enable interrupts
                 ; 0000 0105 #asm("sei")
0001aa 9478      	sei
                 ; 0000 0106 
                 ; 0000 0107     while (1) {
                 _0x40:
                 ; 0000 0108         // Place your code here
                 ; 0000 0109         // nhiet do
                 ; 0000 010A         int whole = 0, decimal = 0;
                 ; 0000 010B 
                 ; 0000 010C         //therm_ReadTempC(&whole,&decimal);
                 ; 0000 010D         //LCD_Integer(whole); LCD_Char('.');
                 ; 0000 010E         //LCD_PadInteger(decimal,4,'0');
                 ; 0000 010F         byte norom[];
                 ; 0000 0110         byte d;
                 ; 0000 0111         while (1) {
0001ab 9725      	SBIW R28,5
0001ac d2ce      	RCALL SUBOPT_0x0
0001ad e0e0      	LDI  R30,LOW(0)
0001ae 83ec      	STD  Y+4,R30
                 ;	x -> Y+14
                 ;	time -> Y+5
                 ;	whole -> Y+3
                 ;	decimal -> Y+1
                 ;	norom -> Y+1
                 ;	d -> Y+0
                 _0x43:
                 ; 0000 0112 //                        therm_ReadTempC(NULL, &whole, &decimal);
                 ; 0000 0113 //            therm_Reset(); // read first two bytes from scratchpad
                 ; 0000 0114 //            therm_WriteByte(THERM_SKIPROM);
                 ; 0000 0115 //            therm_WriteByte(THERM_READSCRATCH);
                 ; 0000 0116 //            ttemp0 = therm_ReadByte(); // first byte
                 ; 0000 0117 //            ttemp0 = therm_ReadByte();
                 ; 0000 0118             temp = ds18b20_gettemp();
0001af d11c      	RCALL _ds18b20_gettemp
0001b0 93e0 0172 	STS  _temp,R30
0001b2 93f0 0173 	STS  _temp+1,R31
0001b4 9360 0174 	STS  _temp+2,R22
0001b6 9370 0175 	STS  _temp+3,R23
                 ; 0000 0119             hienthi((int)temp);
0001b8 d2c7      	RCALL SUBOPT_0x1
0001b9 d3ef      	RCALL __CFD1
0001ba 01df      	MOVW R26,R30
0001bb d2cd      	RCALL SUBOPT_0x2
                 ; 0000 011A             //hienthi(m);
                 ; 0000 011B             delay_ms(1000);
                 ; 0000 011C         }
0001bc cff2      	RJMP _0x43
                 ; 0000 011D //        d = RomReaderProgram();
                 ; 0000 011E         //        LCD_Integer(whole);
                 ; 0000 011F         //        LCD_Char('.');
                 ; 0000 0120         //        LCD_Integer(decimal);
                 ; 0000 0121 
                 ; 0000 0122 
                 ; 0000 0123         //        temp = ds18b20_temperature(t);
                 ; 0000 0124 
                 ; 0000 0125         // lay thoi gian
                 ; 0000 0126         //        rtc_get_time(&h, &m, &s);
                 ; 0000 0127         //        mySetTimeForDS1307(&time);
                 ; 0000 0128         time = myGetTimeFromDS1307();
                 ; 0000 0129         // hien thi thoi gian
                 ; 0000 012A         //        hienthi(10);
                 ; 0000 012B         hienthithoigian(time.Hour + time.Mode * time.AP * 12, time.Minute); // hien thi theo 24h
                 ; 0000 012C         delay_ms(2000);
                 ; 0000 012D         //        hienthinhietdo(temp);
                 ; 0000 012E         //        hienthinhietdo(whole);
                 ; 0000 012F         hienthi(d);
                 ; 0000 0130         //hienthi(m);
                 ; 0000 0131         delay_ms(1000);
                 ; 0000 0132         //hienthi(1234);
                 ; 0000 0133         kytu = mygetchar();
                 ; 0000 0134         // if(kytu !=0) putchar(kytu);
                 ; 0000 0135         // printf("%c", my_variable);
                 ; 0000 0136         //printf("Nhiet do hien tai la");
                 ; 0000 0137         //kytu = uart_getchar();
                 ; 0000 0138 
                 ; 0000 0139         if (kytu == 't') {
                 ; 0000 013A             //printf ("%c",a);
                 ; 0000 013B             printf(" Nhiet do hien tai la %d oC\n\r", (unsigned char) temp);
                 ; 0000 013C 
                 ; 0000 013D         }
                 ; 0000 013E         if (kytu == 'h') {
                 ; 0000 013F             printf(" Gio hien tai la %d:%d:%d\n\r", (unsigned char) h, (unsigned char) m, (unsigned char) s);
                 ; 0000 0140 
                 ; 0000 0141         }
                 ; 0000 0142 
                 ; 0000 0143 
                 ; 0000 0144     }
                 ; 0000 0145 }
                 _0x48:
0001bd cfff      	RJMP _0x48
                 ; .FEND
                 ;
                 ;void hienthinhietdo(unsigned char temp) {
                 ; 0000 0147 void hienthinhietdo(unsigned char temp) {
                 ; 0000 0148     unsigned char a, b;
                 ; 0000 0149     a = temp / 10;
                 ;	temp -> Y+2
                 ;	a -> R17
                 ;	b -> R16
                 ; 0000 014A     b = temp % 10;
                 ; 0000 014B 
                 ; 0000 014C 
                 ; 0000 014D     quet(0xC6);
                 ; 0000 014E     quet(0x9C);
                 ; 0000 014F     quet(ma[b]);
                 ; 0000 0150     quet(ma[a]);
                 ; 0000 0151     day(); // push
                 ; 0000 0152 }
                 ;
                 ;void hienthithoigian(unsigned char hour, unsigned char minute) {
                 ; 0000 0154 void hienthithoigian(unsigned char hour, unsigned char minute) {
                 _hienthithoigian:
                 ; .FSTART _hienthithoigian
                 ; 0000 0155     unsigned char a, b, c, d;
                 ; 0000 0156     a = hour / 10;
0001be 93aa      	ST   -Y,R26
0001bf d323      	RCALL __SAVELOCR4
                 ;	hour -> Y+5
                 ;	minute -> Y+4
                 ;	a -> R17
                 ;	b -> R16
                 ;	c -> R19
                 ;	d -> R18
0001c0 81ad      	LDD  R26,Y+5
0001c1 d2d0      	RCALL SUBOPT_0x4
0001c2 2f1e      	MOV  R17,R30
                 ; 0000 0157     b = hour % 10;
0001c3 81ad      	LDD  R26,Y+5
0001c4 d2d2      	RCALL SUBOPT_0x5
0001c5 2f0e      	MOV  R16,R30
                 ; 0000 0158     c = minute / 10;
0001c6 81ac      	LDD  R26,Y+4
0001c7 d2ca      	RCALL SUBOPT_0x4
0001c8 2f3e      	MOV  R19,R30
                 ; 0000 0159     d = minute % 10;
0001c9 81ac      	LDD  R26,Y+4
0001ca d2cc      	RCALL SUBOPT_0x5
0001cb 2f2e      	MOV  R18,R30
                 ; 0000 015A     quet(ma[d]);
0001cc d2cf      	RCALL SUBOPT_0x6
                 ; 0000 015B     quet(ma[c]);
0001cd d2d4      	RCALL SUBOPT_0x7
                 ; 0000 015C     quet(~(~ma[b] | 0x80));
0001ce d2d9      	RCALL SUBOPT_0x8
0001cf 81e0      	LD   R30,Z
0001d0 95e0      	COM  R30
0001d1 68e0      	ORI  R30,0x80
0001d2 95e0      	COM  R30
0001d3 2fae      	MOV  R26,R30
0001d4 d02e      	RCALL _quet
                 ; 0000 015D     quet(ma[a]);
0001d5 d2d7      	RCALL SUBOPT_0x9
                 ; 0000 015E     day();
0001d6 d044      	RCALL _day
                 ; 0000 015F }
0001d7 d312      	RCALL __LOADLOCR4
0001d8 9626      	ADIW R28,6
0001d9 9508      	RET
                 ; .FEND
                 ;
                 ;void hienthi(int x) {
                 ; 0000 0161 void hienthi(int x) {
                 _hienthi:
                 ; .FSTART _hienthi
                 ; 0000 0162     unsigned char a, b, c, d;
                 ; 0000 0163     int i = 0;
                 ; 0000 0164     a = x / 1000;
0001da 93ba      	ST   -Y,R27
0001db 93aa      	ST   -Y,R26
0001dc d304      	RCALL __SAVELOCR6
                 ;	x -> Y+6
                 ;	a -> R17
                 ;	b -> R16
                 ;	c -> R19
                 ;	d -> R18
                 ;	i -> R20,R21
                +
0001dd e040     +LDI R20 , LOW ( 0 )
0001de e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0001df d2d3      	RCALL SUBOPT_0xA
0001e0 d34f      	RCALL __DIVW21
0001e1 2f1e      	MOV  R17,R30
                 ; 0000 0165     b = (x % 1000) / 100;
0001e2 d2d0      	RCALL SUBOPT_0xA
0001e3 d351      	RCALL __MODW21
0001e4 01df      	MOVW R26,R30
0001e5 e6e4      	LDI  R30,LOW(100)
0001e6 e0f0      	LDI  R31,HIGH(100)
0001e7 d348      	RCALL __DIVW21
0001e8 2f0e      	MOV  R16,R30
                 ; 0000 0166     c = (x % 100) / 10;
0001e9 81ae      	LDD  R26,Y+6
0001ea 81bf      	LDD  R27,Y+6+1
0001eb e6e4      	LDI  R30,LOW(100)
0001ec e0f0      	LDI  R31,HIGH(100)
0001ed d347      	RCALL __MODW21
0001ee 01df      	MOVW R26,R30
0001ef e0ea      	LDI  R30,LOW(10)
0001f0 e0f0      	LDI  R31,HIGH(10)
0001f1 d33e      	RCALL __DIVW21
0001f2 2f3e      	MOV  R19,R30
                 ; 0000 0167     d = (x % 10);
0001f3 81ae      	LDD  R26,Y+6
0001f4 81bf      	LDD  R27,Y+6+1
0001f5 e0ea      	LDI  R30,LOW(10)
0001f6 e0f0      	LDI  R31,HIGH(10)
0001f7 d33d      	RCALL __MODW21
0001f8 2f2e      	MOV  R18,R30
                 ; 0000 0168 
                 ; 0000 0169     quet(ma[a]);
0001f9 d2b3      	RCALL SUBOPT_0x9
                 ; 0000 016A     quet(ma[b]);
0001fa d2ad      	RCALL SUBOPT_0x8
0001fb 81a0      	LD   R26,Z
0001fc d006      	RCALL _quet
                 ; 0000 016B     quet(ma[c]);
0001fd d2a4      	RCALL SUBOPT_0x7
                 ; 0000 016C     quet(ma[d]);
0001fe d29d      	RCALL SUBOPT_0x6
                 ; 0000 016D 
                 ; 0000 016E     day();
0001ff d01b      	RCALL _day
                 ; 0000 016F }
000200 d2e7      	RCALL __LOADLOCR6
000201 9628      	ADIW R28,8
000202 9508      	RET
                 ; .FEND
                 ;
                 ;void quet(unsigned char x) {
                 ; 0000 0171 void quet(unsigned char x) {
                 _quet:
                 ; .FSTART _quet
                 ; 0000 0172     unsigned char i, temp;
                 ; 0000 0173     for (i = 0; i < 8; i++) {
000203 93aa      	ST   -Y,R26
000204 931a      	ST   -Y,R17
000205 930a      	ST   -Y,R16
                 ;	x -> Y+2
                 ;	i -> R17
                 ;	temp -> R16
000206 e010      	LDI  R17,LOW(0)
                 _0x4A:
000207 3018      	CPI  R17,8
000208 f470      	BRSH _0x4B
                 ; 0000 0174         temp = x;
000209 810a      	LDD  R16,Y+2
                 ; 0000 0175         temp = temp & 0x80;
00020a 7800      	ANDI R16,LOW(128)
                 ; 0000 0176         if (temp == 0x80) {
00020b 3800      	CPI  R16,128
00020c f411      	BRNE _0x4C
                 ; 0000 0177             PORTA.1 = 1;
00020d 9ad9      	SBI  0x1B,1
                 ; 0000 0178         } else {
00020e c001      	RJMP _0x4F
                 _0x4C:
                 ; 0000 0179             PORTA.1 = 0;
00020f 98d9      	CBI  0x1B,1
                 ; 0000 017A         }
                 _0x4F:
                 ; 0000 017B         x = x * 2;
000210 81ea      	LDD  R30,Y+2
000211 0fee      	LSL  R30
000212 83ea      	STD  Y+2,R30
                 ; 0000 017C         PORTA.0 = 0;
000213 98d8      	CBI  0x1B,0
                 ; 0000 017D         PORTA.0 = 1;
000214 9ad8      	SBI  0x1B,0
                 ; 0000 017E     }
000215 5f1f      	SUBI R17,-1
000216 cff0      	RJMP _0x4A
                 _0x4B:
                 ; 0000 017F }
000217 8119      	LDD  R17,Y+1
000218 8108      	LDD  R16,Y+0
000219 940c 0322 	JMP  _0x20A0001
                 ; .FEND
                 ;
                 ;void day() {
                 ; 0000 0181 void day() {
                 _day:
                 ; .FSTART _day
                 ; 0000 0182     PORTA.2 = 0;
00021b 98da      	CBI  0x1B,2
                 ; 0000 0183     PORTA.2 = 1;
00021c 9ada      	SBI  0x1B,2
                 ; 0000 0184 }
00021d 9508      	RET
                 ; .FEND
                 ;
                 ;void uart_char_tx(unsigned char chr) {
                 ; 0000 0186 void uart_char_tx(unsigned char chr) {
                 ; 0000 0187     while (UDRE == 1) {
                 ;	chr -> Y+0
                 ; 0000 0188     }; //cho den khi bit UDRE=1
                 ; 0000 0189     UDR = chr;
                 ; 0000 018A }
                 ;
                 ;unsigned char uart_getchar() {
                 ; 0000 018C unsigned char uart_getchar() {
                 ; 0000 018D     unsigned char a = '';
                 ; 0000 018E     a = UDR;
                 ;	a -> R17
                 ; 0000 018F     return a;
                 ; 0000 0190 }
                 ;
                 ;void getState(unsigned char a) {
                 ; 0000 0192 void getState(unsigned char a) {
                 ; 0000 0193     switch (a) {
                 ;	a -> Y+0
                 ; 0000 0194         case 't':
                 ; 0000 0195             printf("Nhiet do hien tai la %f", temp);
                 ; 0000 0196             break;
                 ; 0000 0197         case 'h':
                 ; 0000 0198             printf("xin chao");
                 ; 0000 0199             break;
                 ; 0000 019A     }
                 ; 0000 019B }
                 ;
                 ;//interrupt [USART_RXC] void rx_isr(){ //ngat nhan khi bit RXC =1
                 ;//  kytu = UDR;
                 ;//}
                 ;
                 ;
                 ;//----------------------------------------------------------------------------
                 ;// xay dung lai cac ham ma khong dung thu vien
                 ;
                 ;// doi BCD sang thap phan va nguoc lai------------
                 ;
                 ;unsigned char BCD2Dec(unsigned char BCD) {
                 ; 0000 01A7 unsigned char BCD2Dec(unsigned char BCD) {
                 _BCD2Dec:
                 ; .FSTART _BCD2Dec
                 ; 0000 01A8     unsigned char L, H;
                 ; 0000 01A9     L = BCD & 0x0F;
00021e 93aa      	ST   -Y,R26
00021f 931a      	ST   -Y,R17
000220 930a      	ST   -Y,R16
                 ;	BCD -> Y+2
                 ;	L -> R17
                 ;	H -> R16
000221 81ea      	LDD  R30,Y+2
000222 70ef      	ANDI R30,LOW(0xF)
000223 2f1e      	MOV  R17,R30
                 ; 0000 01AA     H = (BCD >> 4)*10;
000224 81ea      	LDD  R30,Y+2
000225 95e2      	SWAP R30
000226 70ef      	ANDI R30,0xF
000227 e0aa      	LDI  R26,LOW(10)
000228 02ea      	MULS R30,R26
000229 2d00      	MOV  R16,R0
                 ; 0000 01AB     return (H + L);
00022a 2fe1      	MOV  R30,R17
00022b 0fe0      	ADD  R30,R16
00022c 8119      	LDD  R17,Y+1
00022d 8108      	LDD  R16,Y+0
00022e 940c 0322 	JMP  _0x20A0001
                 ; 0000 01AC }
                 ; .FEND
                 ;
                 ;unsigned char Dec2BCD(unsigned char Dec) {
                 ; 0000 01AE unsigned char Dec2BCD(unsigned char Dec) {
                 ; 0000 01AF     unsigned char L, H;
                 ; 0000 01B0     L = Dec % 10;
                 ;	Dec -> Y+2
                 ;	L -> R17
                 ;	H -> R16
                 ; 0000 01B1     H = (Dec / 10) << 4;
                 ; 0000 01B2     return (H + L);
                 ; 0000 01B3 }
                 ;
                 ;Time myGetTimeFromDS1307() {
                 ; 0000 01B5 Time myGetTimeFromDS1307() {
                 _myGetTimeFromDS1307:
                 ; .FSTART _myGetTimeFromDS1307
                 ; 0000 01B6     Time time;
                 ; 0000 01B7     time.Hour = 10;
000230 9762      	SBIW R28,18
                 ;	time -> Y+0
000231 e0ea      	LDI  R30,LOW(10)
000232 83ea      	STD  Y+2,R30
                 ; 0000 01B8     time.Minute = 15;
000233 e0ef      	LDI  R30,LOW(15)
000234 83e9      	STD  Y+1,R30
                 ; 0000 01B9     //    return time;
                 ; 0000 01BA     TWI_DS1307_wadr(0x00); //set dia chi ve 0
000235 e0a0      	LDI  R26,LOW(0)
000236 de89      	RCALL _TWI_DS1307_wadr
                 ; 0000 01BB     delay_ms(1); //cho DS1307 xu li
000237 e0a1      	LDI  R26,LOW(1)
000238 e0b0      	LDI  R27,0
000239 d476      	RCALL _delay_ms
                 ; 0000 01BC     TWI_DS1307_rblock(registry_ds1307, 7); //doc ca khoi thoi gian (7 bytes)
00023a e7e6      	LDI  R30,LOW(_registry_ds1307)
00023b e0f1      	LDI  R31,HIGH(_registry_ds1307)
00023c 93fa      	ST   -Y,R31
00023d 93ea      	ST   -Y,R30
00023e e0a7      	LDI  R26,LOW(7)
00023f deae      	RCALL _TWI_DS1307_rblock
                 ; 0000 01BD 
                 ; 0000 01BE     time.Second = BCD2Dec(registry_ds1307[0] & 0x7F);
000240 91e0 0176 	LDS  R30,_registry_ds1307
000242 77ef      	ANDI R30,0x7F
000243 2fae      	MOV  R26,R30
000244 dfd9      	RCALL _BCD2Dec
000245 83e8      	ST   Y,R30
                 ; 0000 01BF     time.Minute = BCD2Dec(registry_ds1307[1]);
                +
000246 91a0 0177+LDS R26 , _registry_ds1307 + ( 1 )
                 	__GETB2MN _registry_ds1307,1
000248 dfd5      	RCALL _BCD2Dec
000249 83e9      	STD  Y+1,R30
                 ; 0000 01C0     // mode lay tu bit 6 ( =0 la 24h; =1 la 12h)
                 ; 0000 01C1     // mode = 0 la 24h, =1 la 12h
                 ; 0000 01C2     time.Mode = ((registry_ds1307[2] & 0x40) != 0);
                +
00024a 91e0 0178+LDS R30 , _registry_ds1307 + ( 2 )
                 	__GETB1MN _registry_ds1307,2
00024c 74e0      	ANDI R30,LOW(0x40)
00024d e0a0      	LDI  R26,LOW(0)
00024e d2c1      	RCALL __NEB12
00024f 83ef      	STD  Y+7,R30
                 ; 0000 01C3     // AM hay PM lay tu bit 5
                 ; 0000 01C4     time.AP = ((registry_ds1307[2] & 0x20) != 0);
                +
000250 91e0 0178+LDS R30 , _registry_ds1307 + ( 2 )
                 	__GETB1MN _registry_ds1307,2
000252 72e0      	ANDI R30,LOW(0x20)
000253 d2bc      	RCALL __NEB12
000254 87e8      	STD  Y+8,R30
                 ; 0000 01C5     if (time.Mode != 0) time.Hour = BCD2Dec(registry_ds1307[2] & 0x1F); //mode 12h
000255 81ef      	LDD  R30,Y+7
000256 30e0      	CPI  R30,0
000257 f021      	BREQ _0x62
                +
000258 91e0 0178+LDS R30 , _registry_ds1307 + ( 2 )
                 	__GETB1MN _registry_ds1307,2
00025a 71ef      	ANDI R30,LOW(0x1F)
00025b c003      	RJMP _0x66
                 ; 0000 01C6     else time.Hour = BCD2Dec(registry_ds1307[2] & 0x3F); //mode 24h
                 _0x62:
                +
00025c 91e0 0178+LDS R30 , _registry_ds1307 + ( 2 )
                 	__GETB1MN _registry_ds1307,2
00025e 73ef      	ANDI R30,LOW(0x3F)
                 _0x66:
00025f 2fae      	MOV  R26,R30
000260 dfbd      	RCALL _BCD2Dec
000261 83ea      	STD  Y+2,R30
                 ; 0000 01C7     time.Date = BCD2Dec(registry_ds1307[4]);
                +
000262 91a0 017a+LDS R26 , _registry_ds1307 + ( 4 )
                 	__GETB2MN _registry_ds1307,4
000264 dfb9      	RCALL _BCD2Dec
000265 83ec      	STD  Y+4,R30
                 ; 0000 01C8     time.Month = BCD2Dec(registry_ds1307[5]);
                +
000266 91a0 017b+LDS R26 , _registry_ds1307 + ( 5 )
                 	__GETB2MN _registry_ds1307,5
000268 dfb5      	RCALL _BCD2Dec
000269 83ed      	STD  Y+5,R30
                 ; 0000 01C9     time.Year = BCD2Dec(registry_ds1307[6]);
                +
00026a 91a0 017c+LDS R26 , _registry_ds1307 + ( 6 )
                 	__GETB2MN _registry_ds1307,6
00026c dfb1      	RCALL _BCD2Dec
00026d 83ee      	STD  Y+6,R30
                 ; 0000 01CA     return time;
00026e 01fe      	MOVW R30,R28
00026f 01de      	MOVW R26,R28
000270 9619      	ADIW R26,9
000271 e089      	LDI  R24,9
000272 d2fd      	RCALL __COPYMML
000273 01fe      	MOVW R30,R28
000274 9639      	ADIW R30,9
000275 e089      	LDI  R24,9
000276 b61f      	IN   R1,SREG
000277 94f8      	CLI
000278 9662      	ADIW R28,18
000279 9508      	RET
                 ; 0000 01CB }
                 ; .FEND
                 ;
                 ;void mySetTimeForDS1307(Time * t) {
                 ; 0000 01CD void mySetTimeForDS1307(Time * t) {
                 ; 0000 01CE     registry_ds1307[0] = Dec2BCD(t->Second);
                 ;	*t -> Y+0
                 ; 0000 01CF 
                 ; 0000 01D0     registry_ds1307[1] = Dec2BCD(t->Minute);
                 ; 0000 01D1     if (t->Mode != 0) // che do hien thi 12h
                 ; 0000 01D2         // bit 7 = 0; bit 6 =1;(che do 12h), 0: che do 24h
                 ; 0000 01D3         //; bit 5 =0 -> AM, 1->PM
                 ; 0000 01D4         //5bit con lai la ma BCD cua gio
                 ; 0000 01D5         registry_ds1307[2] = Dec2BCD(t->Hour) | (t->Mode << 6) | (t->AP << 5); //mode 12h
                 ; 0000 01D6 
                 ; 0000 01D7     else
                 ; 0000 01D8         // bit 7 = 0; bit 6 =0;(che do 24h) ;
                 ; 0000 01D9         registry_ds1307[2] = Dec2BCD(t->Hour); //mode 24h
                 ; 0000 01DA 
                 ; 0000 01DB     registry_ds1307[4] = Dec2BCD(t->Date);
                 ; 0000 01DC     registry_ds1307[5] = Dec2BCD(t->Month);
                 ; 0000 01DD     registry_ds1307[6] = Dec2BCD(t->Year);
                 ; 0000 01DE 
                 ; 0000 01DF 
                 ; 0000 01E0     TWI_DS1307_wblock(0x00, registry_ds1307, 7); //doc ca khoi thoi gian (7 bytes)
                 ; 0000 01E1     delay_ms(1); //cho DS1307 xu li
                 ; 0000 01E2 }
                 ;#include<my1wire.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;// the following arrays specify the addresses of *my* ds18b20 devices
                 ;// substitute the address of your devices before using.
                 ;
                 ;byte rom0[] = {0x28, 0xE1, 0x21, 0xA3, 0x02, 0x00, 0x00, 0x5B};
                 
                 	.DSEG
                 ;byte rom1[] = {0x28, 0x1B, 0x21, 0x30, 0x05, 0x00, 0x00, 0xF5};
                 ;
                 ;byte therm_Reset() {
                 ; 0001 000A byte therm_Reset() {
                 
                 	.CSEG
                 ; 0001 000B     byte i;
                 ; 0001 000C     THERM_OUTPUT(); // set pin as output
                 ;	i -> R17
                 ; 0001 000D     THERM_LOW(); // pull pin low for 480uS
                 ; 0001 000E     delay_us(480);
                 ; 0001 000F     THERM_INPUT(); // set pin as input
                 ; 0001 0010     delay_us(60); // wait for 60uS
                 ; 0001 0011     i = THERM_READ(); // get pin value
                 ; 0001 0012     delay_us(420); // wait for rest of 480uS period
                 ; 0001 0013     return i;
                 ; 0001 0014 }
                 ;
                 ;void therm_WriteBit(byte _bit) {
                 ; 0001 0016 void therm_WriteBit(byte _bit) {
                 ; 0001 0017     THERM_OUTPUT(); // set pin as output
                 ;	_bit -> Y+0
                 ; 0001 0018     THERM_LOW(); // pull pin low for 1uS
                 ; 0001 0019     delay_us(1);
                 ; 0001 001A     if (_bit) THERM_INPUT(); // to write 1, float pin
                 ; 0001 001B     delay_us(60);
                 ; 0001 001C     THERM_INPUT(); // wait 60uS & release pin
                 ; 0001 001D }
                 ;
                 ;byte therm_ReadBit() {
                 ; 0001 001F byte therm_ReadBit() {
                 ; 0001 0020     byte _bit = 0;
                 ; 0001 0021     THERM_OUTPUT(); // set pin as output
                 ;	_bit -> R17
                 ; 0001 0022     THERM_LOW(); // pull pin low for 1uS
                 ; 0001 0023     delay_us(1);
                 ; 0001 0024     THERM_INPUT(); // release pin & wait 14 uS
                 ; 0001 0025     delay_us(14);
                 ; 0001 0026     if (THERM_READ()) _bit = 1; // read pin value
                 ; 0001 0027     delay_us(45); // wait rest of 60uS period
                 ; 0001 0028     return _bit;
                 ; 0001 0029 }
                 ;
                 ;void therm_WriteByte(byte data) {
                 ; 0001 002B void therm_WriteByte(byte data) {
                 ; 0001 002C     byte i = 8;
                 ; 0001 002D     while (i--) // for 8 bits:
                 ;	data -> Y+1
                 ;	i -> R17
                 ; 0001 002E     {
                 ; 0001 002F         therm_WriteBit(data & 1); // send least significant bit
                 ; 0001 0030         data >>= 1; // shift all bits right
                 ; 0001 0031     }
                 ; 0001 0032 }
                 ;
                 ;byte therm_ReadByte() {
                 ; 0001 0034 byte therm_ReadByte() {
                 ; 0001 0035     byte i = 8, data = 0;
                 ; 0001 0036     while (i--) // for 8 bits:
                 ;	i -> R17
                 ;	data -> R16
                 ; 0001 0037     {
                 ; 0001 0038         data >>= 1; // shift all bits right
                 ; 0001 0039         data |= (therm_ReadBit() << 7); // get next bit (LSB first)
                 ; 0001 003A     }
                 ; 0001 003B     return data;
                 ; 0001 003C }
                 ;
                 ;//void therm_MatchRom(byte rom[]) {
                 ;//    byte i;
                 ;//    therm_WriteByte(THERM_MATCHROM);
                 ;//    for (i = 0; i < 8; i++)
                 ;//        therm_WriteByte(rom[i]);
                 ;//}
                 ;
                 ;void therm_ReadTempRaw(byte id[], byte *t0, byte *t1)
                 ; 0001 0046 // Returns the two temperature bytes from the scratchpad
                 ; 0001 0047 {
                 ; 0001 0048 //    therm_Reset(); // skip ROM & start temp conversion
                 ; 0001 0049 
                 ; 0001 004A     //    if (id) therm_MatchRom(id);
                 ; 0001 004B     //    else therm_WriteByte(THERM_SKIPROM);
                 ; 0001 004C     //    therm_WriteByte(THERM_CONVERTTEMP);
                 ; 0001 004D     //    while (!therm_ReadBit()); // wait until conversion completed
                 ; 0001 004E     //    therm_Reset(); // read first two bytes from scratchpad
                 ; 0001 004F     //    if (id) therm_MatchRom(id);
                 ; 0001 0050     //    else therm_WriteByte(THERM_SKIPROM);
                 ; 0001 0051 
                 ; 0001 0052 //    therm_Reset(); // skip ROM & start temp conversion
                 ; 0001 0053 //    therm_WriteByte(THERM_SKIPROM);
                 ; 0001 0054 //    therm_WriteByte(THERM_CONVERTTEMP);
                 ; 0001 0055 //    while (!therm_ReadBit()); // wait until conversion completed
                 ; 0001 0056 
                 ; 0001 0057     therm_Reset(); // read first two bytes from scratchpad
                 ;	id -> Y+4
                 ;	*t0 -> Y+2
                 ;	*t1 -> Y+0
                 ; 0001 0058     therm_WriteByte(THERM_SKIPROM);
                 ; 0001 0059 //    therm_WriteByte(THERM_READSCRATCH);
                 ; 0001 005A //    byte t0 = therm_ReadByte(); // first byte
                 ; 0001 005B //    byte t1 = therm_ReadByte(); // second byte
                 ; 0001 005C 
                 ; 0001 005D 
                 ; 0001 005E     therm_WriteByte(THERM_READSCRATCH);
                 ; 0001 005F     *t0 = therm_ReadByte(); // first byte
                 ; 0001 0060     *t1 = therm_ReadByte(); // second byte
                 ; 0001 0061 }
                 ;
                 ;void therm_ReadTempC(byte id[], int *whole, int *decimal)
                 ; 0001 0064 // returns temperature in Celsius as WW.DDDD, where W=whole & D=decimal
                 ; 0001 0065 {
                 ; 0001 0066     byte t0, t1;
                 ; 0001 0067     therm_ReadTempRaw(id, &t0, &t1); // get temperature values
                 ;	id -> Y+6
                 ;	*whole -> Y+4
                 ;	*decimal -> Y+2
                 ;	t0 -> R17
                 ;	t1 -> R16
                 ; 0001 0068     *whole = (t1 & 0x07) << 4; // grab lower 3 bits of t1
                 ; 0001 0069     *whole |= t0 >> 4; // and upper 4 bits of t0
                 ; 0001 006A     *decimal = t0 & 0x0F; // decimals in lower 4 bits of t0
                 ; 0001 006B     *decimal *= 625; // conversion factor for 12-bit resolution
                 ; 0001 006C }
                 ;
                 ;void therm_ReadTempF(byte id[], int *whole, int *decimal)
                 ; 0001 006F // returns temperature in Fahrenheit as WW.D, where W=whole & D=decimal
                 ; 0001 0070 {
                 ; 0001 0071     byte t0, t1;
                 ; 0001 0072     int t16, t2, f10;
                 ; 0001 0073     therm_ReadTempRaw(id, &t0, &t1); // get temperature values
                 ;	id -> Y+12
                 ;	*whole -> Y+10
                 ;	*decimal -> Y+8
                 ;	t0 -> R17
                 ;	t1 -> R16
                 ;	t16 -> R18,R19
                 ;	t2 -> R20,R21
                 ;	f10 -> Y+6
                 ; 0001 0074     t16 = (t1 << 8) + t0; // result is temp*16, in celcius
                 ; 0001 0075     t2 = t16 / 8; // get t*2, with fractional part lost
                 ; 0001 0076     f10 = t16 + t2 + 320; // F=1.8C+32, so 10F = 18C+320 = 16C + 2C + 320
                 ; 0001 0077     *whole = f10 / 10; // get whole part
                 ; 0001 0078     *decimal = f10 % 10; // get fractional part
                 ; 0001 0079 }
                 ;
                 ;//inline __attribute__((gnu_inline)) void quickDelay(int delay)
                 ;//// this routine will pause 0.25uS per delay unit
                 ;//// for testing only; use _us_Delay() routine for >1uS delays
                 ;//{
                 ;//    while (delay--) // uses sbiw to subtract 1 from 16bit word
                 ;//        asm volatile("nop"); // nop, sbiw, brne = 4 cycles = 0.25 uS
                 ;//}
                 ;
                 ;// ---------------------------------------------------------------------------
                 ;// ROM READER PROGRAM
                 ;
                 ;byte RomReaderProgram()
                 ; 0001 0087 // Read the ID of the attached Dallas 18B20 device
                 ; 0001 0088 // Note: only ONE device should be on the bus.
                 ; 0001 0089 {
                 ; 0001 008A     byte i;
                 ; 0001 008B     byte data;
                 ; 0001 008C     //    LCD_String("ID (ROM) Reader:");
                 ; 0001 008D //    while (1) {
                 ; 0001 008E         //        LCD_Line(1);
                 ; 0001 008F         // write 64-bit ROM code on first LCD line
                 ; 0001 0090         therm_Reset();
                 ;	i -> R17
                 ;	data -> R16
                 ; 0001 0091         therm_WriteByte(THERM_READROM);
                 ; 0001 0092 //        for (i = 0; i < 8; i++) {
                 ; 0001 0093             data = therm_ReadByte();
                 ; 0001 0094             //            LCD_HexByte(data);
                 ; 0001 0095 //        }
                 ; 0001 0096         //        msDelay(1000); // do a read every second
                 ; 0001 0097 //    }
                 ; 0001 0098         return data;
                 ; 0001 0099 }
                 ;/*
                 ;ds18b20 lib 0x01
                 ;copyright (c) Davide Gironi, 2012
                 ;Released under GPLv3.
                 ;Please refer to LICENSE file for licensing information.
                 ;*/
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#include "myds18b20.h"
                 ;
                 ;/*
                 ; * ds18b20 init
                 ; */
                 ;uint8_t ds18b20_reset(void) {
                 ; 0002 0010 uint8_t ds18b20_reset(void) {
                 
                 	.CSEG
                 _ds18b20_reset:
                 ; .FSTART _ds18b20_reset
                 ; 0002 0011 	uint8_t i;
                 ; 0002 0012 
                 ; 0002 0013 	//low for 480us
                 ; 0002 0014 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
00027a 931a      	ST   -Y,R17
                 ;	i -> R17
00027b 98c0      	CBI  0x18,0
                 ; 0002 0015 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
00027c 9ab8      	SBI  0x17,0
                 ; 0002 0016 	delay_us(480);
                +
00027d ee80     +LDI R24 , LOW ( 480 )
00027e e091     +LDI R25 , HIGH ( 480 )
                +__DELAY_USW_LOOP :
00027f 9701     +SBIW R24 , 1
000280 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 480
                 ; 0002 0017 
                 ; 0002 0018 	//release line and wait for 60uS
                 ; 0002 0019 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
000281 98b8      	CBI  0x17,0
                 ; 0002 001A 	delay_us(60);
                +
000282 e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
000283 958a     +DEC R24
000284 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0002 001B 
                 ; 0002 001C 	//get value and wait 420us
                 ; 0002 001D 	i = (DS18B20_PIN & (1<<DS18B20_DQ));
000285 b3e6      	IN   R30,0x16
000286 70e1      	ANDI R30,LOW(0x1)
000287 2f1e      	MOV  R17,R30
                 ; 0002 001E 	delay_us(420);
                +
000288 ea84     +LDI R24 , LOW ( 420 )
000289 e091     +LDI R25 , HIGH ( 420 )
                +__DELAY_USW_LOOP :
00028a 9701     +SBIW R24 , 1
00028b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 420
                 ; 0002 001F 
                 ; 0002 0020 	//return the read value, 0=ok, 1=error
                 ; 0002 0021 	return i;
00028c c017      	RJMP _0x20A0003
                 ; 0002 0022 }
                 ; .FEND
                 ;
                 ;/*
                 ; * write one bit
                 ; */
                 ;void ds18b20_writebit(uint8_t _bit){
                 ; 0002 0027 void ds18b20_writebit(uint8_t _bit){
                 _ds18b20_writebit:
                 ; .FSTART _ds18b20_writebit
                 ; 0002 0028 	//low for 1uS
                 ; 0002 0029 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
00028d 93aa      	ST   -Y,R26
                 ;	_bit -> Y+0
00028e d229      	RCALL SUBOPT_0xB
                 ; 0002 002A 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
                 ; 0002 002B 	delay_us(1);
                 ; 0002 002C 
                 ; 0002 002D 	//if we want to write 1, release the line (if not will keep low)
                 ; 0002 002E 	if(_bit)
00028f 81e8      	LD   R30,Y
000290 30e0      	CPI  R30,0
000291 f009      	BREQ _0x40003
                 ; 0002 002F 		DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
000292 98b8      	CBI  0x17,0
                 ; 0002 0030 
                 ; 0002 0031 	//wait 60uS and release the line
                 ; 0002 0032 	delay_us(60);
                 _0x40003:
                +
000293 e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
000294 958a     +DEC R24
000295 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0002 0033 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
000296 98b8      	CBI  0x17,0
                 ; 0002 0034 }
000297 c07d      	RJMP _0x20A0002
                 ; .FEND
                 ;
                 ;/*
                 ; * read one bit
                 ; */
                 ;uint8_t ds18b20_readbit(void){
                 ; 0002 0039 uint8_t ds18b20_readbit(void){
                 _ds18b20_readbit:
                 ; .FSTART _ds18b20_readbit
                 ; 0002 003A 	uint8_t _bit=0;
                 ; 0002 003B 
                 ; 0002 003C 	//low for 1uS
                 ; 0002 003D 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
000298 931a      	ST   -Y,R17
                 ;	_bit -> R17
000299 e010      	LDI  R17,0
00029a d21d      	RCALL SUBOPT_0xB
                 ; 0002 003E 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
                 ; 0002 003F 	delay_us(1);
                 ; 0002 0040 
                 ; 0002 0041 	//release line and wait for 14uS
                 ; 0002 0042 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
00029b 98b8      	CBI  0x17,0
                 ; 0002 0043 	delay_us(14);
                +
00029c e183     +LDI R24 , LOW ( 19 )
                +__DELAY_USB_LOOP :
00029d 958a     +DEC R24
00029e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 19
                 ; 0002 0044 
                 ; 0002 0045 	//read the value
                 ; 0002 0046 	if(DS18B20_PIN & (1<<DS18B20_DQ))
00029f 99b0      	SBIC 0x16,0
                 ; 0002 0047 		_bit=1;
0002a0 e011      	LDI  R17,LOW(1)
                 ; 0002 0048 
                 ; 0002 0049 	//wait 45uS and return read value
                 ; 0002 004A 	delay_us(45);
                +
0002a1 e38c     +LDI R24 , LOW ( 60 )
                +__DELAY_USB_LOOP :
0002a2 958a     +DEC R24
0002a3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 60
                 ; 0002 004B 	return _bit;
                 _0x20A0003:
0002a4 2fe1      	MOV  R30,R17
                 _0x20A0004:
0002a5 9119      	LD   R17,Y+
0002a6 9508      	RET
                 ; 0002 004C }
                 ; .FEND
                 ;
                 ;/*
                 ; * write one byte
                 ; */
                 ;void ds18b20_writebyte(uint8_t _byte){
                 ; 0002 0051 void ds18b20_writebyte(uint8_t _byte){
                 _ds18b20_writebyte:
                 ; .FSTART _ds18b20_writebyte
                 ; 0002 0052 	uint8_t i=8;
                 ; 0002 0053 	while(i--){
0002a7 93aa      	ST   -Y,R26
0002a8 931a      	ST   -Y,R17
                 ;	_byte -> Y+1
                 ;	i -> R17
0002a9 e018      	LDI  R17,8
                 _0x40005:
0002aa 2fe1      	MOV  R30,R17
0002ab 5011      	SUBI R17,1
0002ac 30e0      	CPI  R30,0
0002ad f041      	BREQ _0x40007
                 ; 0002 0054 		ds18b20_writebit(_byte&1);
0002ae 81e9      	LDD  R30,Y+1
0002af 70e1      	ANDI R30,LOW(0x1)
0002b0 2fae      	MOV  R26,R30
0002b1 dfdb      	RCALL _ds18b20_writebit
                 ; 0002 0055 		_byte >>= 1;
0002b2 81e9      	LDD  R30,Y+1
0002b3 95e6      	LSR  R30
0002b4 83e9      	STD  Y+1,R30
                 ; 0002 0056 	}
0002b5 cff4      	RJMP _0x40005
                 _0x40007:
                 ; 0002 0057 }
0002b6 8118      	LDD  R17,Y+0
0002b7 9622      	ADIW R28,2
0002b8 9508      	RET
                 ; .FEND
                 ;
                 ;/*
                 ; * read one byte
                 ; */
                 ;uint8_t ds18b20_readbyte(void){
                 ; 0002 005C uint8_t ds18b20_readbyte(void){
                 _ds18b20_readbyte:
                 ; .FSTART _ds18b20_readbyte
                 ; 0002 005D 	uint8_t i=8, n=0;
                 ; 0002 005E 	while(i--){
0002b9 931a      	ST   -Y,R17
0002ba 930a      	ST   -Y,R16
                 ;	i -> R17
                 ;	n -> R16
0002bb e018      	LDI  R17,8
0002bc e000      	LDI  R16,0
                 _0x40008:
0002bd 2fe1      	MOV  R30,R17
0002be 5011      	SUBI R17,1
0002bf 30e0      	CPI  R30,0
0002c0 f039      	BREQ _0x4000A
                 ; 0002 005F 		n >>= 1;
0002c1 9506      	LSR  R16
                 ; 0002 0060 		n |= (ds18b20_readbit()<<7);
0002c2 dfd5      	RCALL _ds18b20_readbit
0002c3 95e7      	ROR  R30
0002c4 e0e0      	LDI  R30,0
0002c5 95e7      	ROR  R30
0002c6 2b0e      	OR   R16,R30
                 ; 0002 0061 	}
0002c7 cff5      	RJMP _0x40008
                 _0x4000A:
                 ; 0002 0062 	return n;
0002c8 2fe0      	MOV  R30,R16
0002c9 9109      	LD   R16,Y+
0002ca 9119      	LD   R17,Y+
0002cb 9508      	RET
                 ; 0002 0063 }
                 ; .FEND
                 ;
                 ;/*
                 ; * get temperature
                 ; */
                 ;double ds18b20_gettemp(void) {
                 ; 0002 0068 double ds18b20_gettemp(void) {
                 _ds18b20_gettemp:
                 ; .FSTART _ds18b20_gettemp
                 ; 0002 0069 	uint8_t temperature[2];
                 ; 0002 006A 	int8_t digit;
                 ; 0002 006B 	uint16_t decimal;
                 ; 0002 006C 	double retd = 0;
                 ; 0002 006D 
                 ; 0002 006E 	ds18b20_reset(); //reset
0002cc 9726      	SBIW R28,6
0002cd e0e0      	LDI  R30,LOW(0)
0002ce 83e8      	ST   Y,R30
0002cf d1ab      	RCALL SUBOPT_0x0
0002d0 d212      	RCALL __SAVELOCR4
                 ;	temperature -> Y+8
                 ;	digit -> R17
                 ;	decimal -> R18,R19
                 ;	retd -> Y+4
0002d1 dfa8      	RCALL _ds18b20_reset
                 ; 0002 006F 	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
0002d2 ecac      	LDI  R26,LOW(204)
0002d3 dfd3      	RCALL _ds18b20_writebyte
                 ; 0002 0070 	ds18b20_writebyte(DS18B20_CMD_CONVERTTEMP); //start temperature conversion
0002d4 e4a4      	LDI  R26,LOW(68)
0002d5 dfd1      	RCALL _ds18b20_writebyte
                 ; 0002 0071 
                 ; 0002 0072 	while(!ds18b20_readbit()); //wait until conversion is complete
                 _0x4000B:
0002d6 dfc1      	RCALL _ds18b20_readbit
0002d7 30e0      	CPI  R30,0
0002d8 f3e9      	BREQ _0x4000B
                 ; 0002 0073 
                 ; 0002 0074 	ds18b20_reset(); //reset
0002d9 dfa0      	RCALL _ds18b20_reset
                 ; 0002 0075 	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
0002da ecac      	LDI  R26,LOW(204)
0002db dfcb      	RCALL _ds18b20_writebyte
                 ; 0002 0076 	ds18b20_writebyte(DS18B20_CMD_RSCRATCHPAD); //read scratchpad
0002dc ebae      	LDI  R26,LOW(190)
0002dd dfc9      	RCALL _ds18b20_writebyte
                 ; 0002 0077 
                 ; 0002 0078 	//read 2 byte from scratchpad
                 ; 0002 0079 	temperature[0] = ds18b20_readbyte();
0002de dfda      	RCALL _ds18b20_readbyte
0002df 87e8      	STD  Y+8,R30
                 ; 0002 007A 	temperature[1] = ds18b20_readbyte();
0002e0 dfd8      	RCALL _ds18b20_readbyte
0002e1 87e9      	STD  Y+9,R30
                 ; 0002 007B 
                 ; 0002 007C 	ds18b20_reset(); //reset
0002e2 df97      	RCALL _ds18b20_reset
                 ; 0002 007D 
                 ; 0002 007E 	//store temperature integer digits
                 ; 0002 007F 	digit = temperature[0]>>4;
0002e3 85e8      	LDD  R30,Y+8
0002e4 95e2      	SWAP R30
0002e5 70ef      	ANDI R30,0xF
0002e6 2f1e      	MOV  R17,R30
                 ; 0002 0080 	digit |= (temperature[1]&0x7)<<4;
0002e7 85e9      	LDD  R30,Y+9
0002e8 70e7      	ANDI R30,LOW(0x7)
0002e9 95e2      	SWAP R30
0002ea 7fe0      	ANDI R30,0xF0
0002eb 2b1e      	OR   R17,R30
                 ; 0002 0081 
                 ; 0002 0082 	//store temperature decimal digits
                 ; 0002 0083 	decimal = temperature[0]&0xf;
0002ec 85e8      	LDD  R30,Y+8
0002ed e0f0      	LDI  R31,0
0002ee 70ef      	ANDI R30,LOW(0xF)
0002ef 70f0      	ANDI R31,HIGH(0xF)
0002f0 019f      	MOVW R18,R30
                 ; 0002 0084 	decimal *= DS18B20_DECIMALSTEPS;
0002f1 e7a1      	LDI  R26,LOW(625)
0002f2 e0b2      	LDI  R27,HIGH(625)
0002f3 d221      	RCALL __MULW12U
0002f4 019f      	MOVW R18,R30
                 ; 0002 0085 
                 ; 0002 0086 	//compose the double temperature value and return it
                 ; 0002 0087 	retd = digit + decimal * 0.0001;
0002f5 2fe1      	MOV  R30,R17
0002f6 e0f0      	LDI  R31,0
0002f7 fde7      	SBRC R30,7
0002f8 efff      	SER  R31
0002f9 93ff      	PUSH R31
0002fa 93ef      	PUSH R30
0002fb 01f9      	MOVW R30,R18
0002fc 2766      	CLR  R22
0002fd 2777      	CLR  R23
0002fe d2e1      	RCALL __CDF1
                +
0002ff e1a7     +LDI R26 , LOW ( 0x38D1B717 )
000300 ebb7     +LDI R27 , HIGH ( 0x38D1B717 )
000301 ed81     +LDI R24 , BYTE3 ( 0x38D1B717 )
000302 e398     +LDI R25 , BYTE4 ( 0x38D1B717 )
                 	__GETD2N 0x38D1B717
000303 d35e      	RCALL __MULF12
000304 91af      	POP  R26
000305 91bf      	POP  R27
000306 d204      	RCALL __CWD2
000307 d258      	RCALL __CDF2
000308 d30a      	RCALL __ADDF12
                +
000309 83ec     +STD Y + 4 , R30
00030a 83fd     +STD Y + 4 + 1 , R31
00030b 836e     +STD Y + 4 + 2 , R22
00030c 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0002 0088 
                 ; 0002 0089 	return retd;
00030d d1dc      	RCALL __LOADLOCR4
00030e 962a      	ADIW R28,10
00030f 9508      	RET
                 ; 0002 008A }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
000310 93aa      	ST   -Y,R26
                 putchar0:
000311 9b5d           sbis usr,udre
000312 cffe           rjmp putchar0
000313 81e8           ld   r30,y
000314 b9ec           out  udr,r30
                 _0x20A0002:
000315 9621      	ADIW R28,1
000316 9508      	RET
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
000317 93ba      	ST   -Y,R27
000318 93aa      	ST   -Y,R26
000319 81aa      	LDD  R26,Y+2
00031a dff5      	RCALL _putchar
00031b 81a8      	LD   R26,Y
00031c 81b9      	LDD  R27,Y+1
00031d 91ed      	LD   R30,X+
00031e 91fd      	LD   R31,X+
00031f 9631      	ADIW R30,1
000320 93fe      	ST   -X,R31
000321 93ee      	ST   -X,R30
                 _0x20A0001:
000322 9623      	ADIW R28,3
000323 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000324 93ba      	ST   -Y,R27
000325 93aa      	ST   -Y,R26
000326 9726      	SBIW R28,6
000327 d1b9      	RCALL __SAVELOCR6
000328 e010      	LDI  R17,0
000329 85ac      	LDD  R26,Y+12
00032a 85bd      	LDD  R27,Y+12+1
00032b e0e0      	LDI  R30,LOW(0)
00032c e0f0      	LDI  R31,HIGH(0)
00032d 93ed      	ST   X+,R30
00032e 93fc      	ST   X,R31
                 _0x2000016:
00032f 89ea      	LDD  R30,Y+18
000330 89fb      	LDD  R31,Y+18+1
000331 9631      	ADIW R30,1
000332 8bea      	STD  Y+18,R30
000333 8bfb      	STD  Y+18+1,R31
000334 9731      	SBIW R30,1
000335 91e4      	LPM  R30,Z
000336 2f2e      	MOV  R18,R30
000337 30e0      	CPI  R30,0
000338 f409      	BRNE PC+2
000339 c100      	RJMP _0x2000018
00033a 2fe1      	MOV  R30,R17
00033b 30e0      	CPI  R30,0
00033c f431      	BRNE _0x200001C
00033d 3225      	CPI  R18,37
00033e f411      	BRNE _0x200001D
00033f e011      	LDI  R17,LOW(1)
000340 c001      	RJMP _0x200001E
                 _0x200001D:
000341 d17c      	RCALL SUBOPT_0xC
                 _0x200001E:
000342 c0f6      	RJMP _0x200001B
                 _0x200001C:
000343 30e1      	CPI  R30,LOW(0x1)
000344 f4a1      	BRNE _0x200001F
000345 3225      	CPI  R18,37
000346 f411      	BRNE _0x2000020
000347 d176      	RCALL SUBOPT_0xC
000348 c0ef      	RJMP _0x20000CC
                 _0x2000020:
000349 e012      	LDI  R17,LOW(2)
00034a e040      	LDI  R20,LOW(0)
00034b e000      	LDI  R16,LOW(0)
00034c 322d      	CPI  R18,45
00034d f411      	BRNE _0x2000021
00034e e001      	LDI  R16,LOW(1)
00034f c0e9      	RJMP _0x200001B
                 _0x2000021:
000350 322b      	CPI  R18,43
000351 f411      	BRNE _0x2000022
000352 e24b      	LDI  R20,LOW(43)
000353 c0e5      	RJMP _0x200001B
                 _0x2000022:
000354 3220      	CPI  R18,32
000355 f411      	BRNE _0x2000023
000356 e240      	LDI  R20,LOW(32)
000357 c0e1      	RJMP _0x200001B
                 _0x2000023:
000358 c002      	RJMP _0x2000024
                 _0x200001F:
000359 30e2      	CPI  R30,LOW(0x2)
00035a f439      	BRNE _0x2000025
                 _0x2000024:
00035b e050      	LDI  R21,LOW(0)
00035c e013      	LDI  R17,LOW(3)
00035d 3320      	CPI  R18,48
00035e f411      	BRNE _0x2000026
00035f 6800      	ORI  R16,LOW(128)
000360 c0d8      	RJMP _0x200001B
                 _0x2000026:
000361 c003      	RJMP _0x2000027
                 _0x2000025:
000362 30e3      	CPI  R30,LOW(0x3)
000363 f009      	BREQ PC+2
000364 c0d4      	RJMP _0x200001B
                 _0x2000027:
000365 3320      	CPI  R18,48
000366 f010      	BRLO _0x200002A
000367 332a      	CPI  R18,58
000368 f008      	BRLO _0x200002B
                 _0x200002A:
000369 c007      	RJMP _0x2000029
                 _0x200002B:
00036a e0aa      	LDI  R26,LOW(10)
00036b 9f5a      	MUL  R21,R26
00036c 2d50      	MOV  R21,R0
00036d 2fe2      	MOV  R30,R18
00036e 53e0      	SUBI R30,LOW(48)
00036f 0f5e      	ADD  R21,R30
000370 c0c8      	RJMP _0x200001B
                 _0x2000029:
000371 2fe2      	MOV  R30,R18
000372 36e3      	CPI  R30,LOW(0x63)
000373 f439      	BRNE _0x200002F
000374 d150      	RCALL SUBOPT_0xD
000375 89e8      	LDD  R30,Y+16
000376 89f9      	LDD  R31,Y+16+1
000377 81a4      	LDD  R26,Z+4
000378 93aa      	ST   -Y,R26
000379 d151      	RCALL SUBOPT_0xE
00037a c0bd      	RJMP _0x2000030
                 _0x200002F:
00037b 37e3      	CPI  R30,LOW(0x73)
00037c f429      	BRNE _0x2000032
00037d d147      	RCALL SUBOPT_0xD
00037e d152      	RCALL SUBOPT_0xF
00037f d0e2      	RCALL _strlen
000380 2f1e      	MOV  R17,R30
000381 c007      	RJMP _0x2000033
                 _0x2000032:
000382 37e0      	CPI  R30,LOW(0x70)
000383 f449      	BRNE _0x2000035
000384 d140      	RCALL SUBOPT_0xD
000385 d14b      	RCALL SUBOPT_0xF
000386 d0e7      	RCALL _strlenf
000387 2f1e      	MOV  R17,R30
000388 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000389 6002      	ORI  R16,LOW(2)
00038a 770f      	ANDI R16,LOW(127)
00038b e030      	LDI  R19,LOW(0)
00038c c02f      	RJMP _0x2000036
                 _0x2000035:
00038d 36e4      	CPI  R30,LOW(0x64)
00038e f011      	BREQ _0x2000039
00038f 36e9      	CPI  R30,LOW(0x69)
000390 f411      	BRNE _0x200003A
                 _0x2000039:
000391 6004      	ORI  R16,LOW(4)
000392 c002      	RJMP _0x200003B
                 _0x200003A:
000393 37e5      	CPI  R30,LOW(0x75)
000394 f431      	BRNE _0x200003C
                 _0x200003B:
000395 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000396 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000397 83ee      	STD  Y+6,R30
000398 83ff      	STD  Y+6+1,R31
000399 e015      	LDI  R17,LOW(5)
00039a c00c      	RJMP _0x200003D
                 _0x200003C:
00039b 35e8      	CPI  R30,LOW(0x58)
00039c f411      	BRNE _0x200003F
00039d 6008      	ORI  R16,LOW(8)
00039e c003      	RJMP _0x2000040
                 _0x200003F:
00039f 37e8      	CPI  R30,LOW(0x78)
0003a0 f009      	BREQ PC+2
0003a1 c096      	RJMP _0x2000071
                 _0x2000040:
0003a2 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0003a3 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0003a4 83ee      	STD  Y+6,R30
0003a5 83ff      	STD  Y+6+1,R31
0003a6 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0003a7 ff02      	SBRS R16,2
0003a8 c011      	RJMP _0x2000042
0003a9 d11b      	RCALL SUBOPT_0xD
0003aa d12f      	RCALL SUBOPT_0x10
0003ab 85ab      	LDD  R26,Y+11
0003ac 23aa      	TST  R26
0003ad f432      	BRPL _0x2000043
0003ae 85ea      	LDD  R30,Y+10
0003af 85fb      	LDD  R31,Y+10+1
0003b0 d149      	RCALL __ANEGW1
0003b1 87ea      	STD  Y+10,R30
0003b2 87fb      	STD  Y+10+1,R31
0003b3 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0003b4 3040      	CPI  R20,0
0003b5 f011      	BREQ _0x2000044
0003b6 5f1f      	SUBI R17,-LOW(1)
0003b7 c001      	RJMP _0x2000045
                 _0x2000044:
0003b8 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0003b9 c002      	RJMP _0x2000046
                 _0x2000042:
0003ba d10a      	RCALL SUBOPT_0xD
0003bb d11e      	RCALL SUBOPT_0x10
                 _0x2000046:
                 _0x2000036:
0003bc fd00      	SBRC R16,0
0003bd c010      	RJMP _0x2000047
                 _0x2000048:
0003be 1715      	CP   R17,R21
0003bf f470      	BRSH _0x200004A
0003c0 ff07      	SBRS R16,7
0003c1 c008      	RJMP _0x200004B
0003c2 ff02      	SBRS R16,2
0003c3 c004      	RJMP _0x200004C
0003c4 7f0b      	ANDI R16,LOW(251)
0003c5 2f24      	MOV  R18,R20
0003c6 5011      	SUBI R17,LOW(1)
0003c7 c001      	RJMP _0x200004D
                 _0x200004C:
0003c8 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0003c9 c001      	RJMP _0x200004E
                 _0x200004B:
0003ca e220      	LDI  R18,LOW(32)
                 _0x200004E:
0003cb d0f2      	RCALL SUBOPT_0xC
0003cc 5051      	SUBI R21,LOW(1)
0003cd cff0      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0003ce 2f31      	MOV  R19,R17
0003cf ff01      	SBRS R16,1
0003d0 c016      	RJMP _0x200004F
                 _0x2000050:
0003d1 3030      	CPI  R19,0
0003d2 f099      	BREQ _0x2000052
0003d3 ff03      	SBRS R16,3
0003d4 c006      	RJMP _0x2000053
0003d5 81ee      	LDD  R30,Y+6
0003d6 81ff      	LDD  R31,Y+6+1
0003d7 9125      	LPM  R18,Z+
0003d8 83ee      	STD  Y+6,R30
0003d9 83ff      	STD  Y+6+1,R31
0003da c005      	RJMP _0x2000054
                 _0x2000053:
0003db 81ae      	LDD  R26,Y+6
0003dc 81bf      	LDD  R27,Y+6+1
0003dd 912d      	LD   R18,X+
0003de 83ae      	STD  Y+6,R26
0003df 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0003e0 d0dd      	RCALL SUBOPT_0xC
0003e1 3050      	CPI  R21,0
0003e2 f009      	BREQ _0x2000055
0003e3 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0003e4 5031      	SUBI R19,LOW(1)
0003e5 cfeb      	RJMP _0x2000050
                 _0x2000052:
0003e6 c048      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0003e7 e320      	LDI  R18,LOW(48)
0003e8 81ee      	LDD  R30,Y+6
0003e9 81ff      	LDD  R31,Y+6+1
0003ea d16a      	RCALL __GETW1PF
0003eb 87e8      	STD  Y+8,R30
0003ec 87f9      	STD  Y+8+1,R31
0003ed 81ee      	LDD  R30,Y+6
0003ee 81ff      	LDD  R31,Y+6+1
0003ef 9632      	ADIW R30,2
0003f0 83ee      	STD  Y+6,R30
0003f1 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0003f2 85e8      	LDD  R30,Y+8
0003f3 85f9      	LDD  R31,Y+8+1
0003f4 85aa      	LDD  R26,Y+10
0003f5 85bb      	LDD  R27,Y+10+1
0003f6 17ae      	CP   R26,R30
0003f7 07bf      	CPC  R27,R31
0003f8 f050      	BRLO _0x200005C
0003f9 5f2f      	SUBI R18,-LOW(1)
0003fa 85a8      	LDD  R26,Y+8
0003fb 85b9      	LDD  R27,Y+8+1
0003fc 85ea      	LDD  R30,Y+10
0003fd 85fb      	LDD  R31,Y+10+1
0003fe 1bea      	SUB  R30,R26
0003ff 0bfb      	SBC  R31,R27
000400 87ea      	STD  Y+10,R30
000401 87fb      	STD  Y+10+1,R31
000402 cfef      	RJMP _0x200005A
                 _0x200005C:
000403 332a      	CPI  R18,58
000404 f028      	BRLO _0x200005D
000405 ff03      	SBRS R16,3
000406 c002      	RJMP _0x200005E
000407 5f29      	SUBI R18,-LOW(7)
000408 c001      	RJMP _0x200005F
                 _0x200005E:
000409 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00040a fd04      	SBRC R16,4
00040b c019      	RJMP _0x2000061
00040c 3321      	CPI  R18,49
00040d f420      	BRSH _0x2000063
00040e 85a8      	LDD  R26,Y+8
00040f 85b9      	LDD  R27,Y+8+1
000410 9711      	SBIW R26,1
000411 f409      	BRNE _0x2000062
                 _0x2000063:
000412 c009      	RJMP _0x20000CD
                 _0x2000062:
000413 1753      	CP   R21,R19
000414 f010      	BRLO _0x2000067
000415 ff00      	SBRS R16,0
000416 c001      	RJMP _0x2000068
                 _0x2000067:
000417 c011      	RJMP _0x2000066
                 _0x2000068:
000418 e220      	LDI  R18,LOW(32)
000419 ff07      	SBRS R16,7
00041a c00a      	RJMP _0x2000069
00041b e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00041c 6100      	ORI  R16,LOW(16)
00041d ff02      	SBRS R16,2
00041e c006      	RJMP _0x200006A
00041f 7f0b      	ANDI R16,LOW(251)
000420 934a      	ST   -Y,R20
000421 d0a9      	RCALL SUBOPT_0xE
000422 3050      	CPI  R21,0
000423 f009      	BREQ _0x200006B
000424 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000425 d098      	RCALL SUBOPT_0xC
000426 3050      	CPI  R21,0
000427 f009      	BREQ _0x200006C
000428 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000429 5031      	SUBI R19,LOW(1)
00042a 85a8      	LDD  R26,Y+8
00042b 85b9      	LDD  R27,Y+8+1
00042c 9712      	SBIW R26,2
00042d f008      	BRLO _0x2000059
00042e cfb8      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00042f ff00      	SBRS R16,0
000430 c007      	RJMP _0x200006D
                 _0x200006E:
000431 3050      	CPI  R21,0
000432 f029      	BREQ _0x2000070
000433 5051      	SUBI R21,LOW(1)
000434 e2e0      	LDI  R30,LOW(32)
000435 93ea      	ST   -Y,R30
000436 d094      	RCALL SUBOPT_0xE
000437 cff9      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000438 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000439 cef5      	RJMP _0x2000016
                 _0x2000018:
00043a 85ac      	LDD  R26,Y+12
00043b 85bd      	LDD  R27,Y+12+1
00043c d114      	RCALL __GETW1P
00043d d0aa      	RCALL __LOADLOCR6
00043e 9664      	ADIW R28,20
00043f 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000440 92ff      	PUSH R15
000441 2ef8      	MOV  R15,R24
000442 9726      	SBIW R28,6
000443 931a      	ST   -Y,R17
000444 930a      	ST   -Y,R16
000445 01de      	MOVW R26,R28
000446 9614      	ADIW R26,4
000447 d0ae      	RCALL __ADDW2R15
000448 018d      	MOVW R16,R26
000449 e0e0      	LDI  R30,LOW(0)
00044a 83ec      	STD  Y+4,R30
00044b 83ed      	STD  Y+4+1,R30
00044c 83ee      	STD  Y+6,R30
00044d 83ef      	STD  Y+6+1,R30
00044e 01de      	MOVW R26,R28
00044f 9618      	ADIW R26,8
000450 d0a5      	RCALL __ADDW2R15
000451 d0ff      	RCALL __GETW1P
000452 93fa      	ST   -Y,R31
000453 93ea      	ST   -Y,R30
000454 931a      	ST   -Y,R17
000455 930a      	ST   -Y,R16
000456 e1e7      	LDI  R30,LOW(_put_usart_G100)
000457 e0f3      	LDI  R31,HIGH(_put_usart_G100)
000458 93fa      	ST   -Y,R31
000459 93ea      	ST   -Y,R30
00045a 01de      	MOVW R26,R28
00045b 9618      	ADIW R26,8
00045c dec7      	RCALL __print_G100
00045d 8119      	LDD  R17,Y+1
00045e 8108      	LDD  R16,Y+0
00045f 9628      	ADIW R28,8
000460 90ff      	POP  R15
000461 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000462 93ba      	ST   -Y,R27
000463 93aa      	ST   -Y,R26
000464 91a9          ld   r26,y+
000465 91b9          ld   r27,y+
000466 27ee          clr  r30
000467 27ff          clr  r31
                 strlen0:
000468 916d          ld   r22,x+
000469 2366          tst  r22
00046a f011          breq strlen1
00046b 9631          adiw r30,1
00046c cffb          rjmp strlen0
                 strlen1:
00046d 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00046e 93ba      	ST   -Y,R27
00046f 93aa      	ST   -Y,R26
000470 27aa          clr  r26
000471 27bb          clr  r27
000472 91e9          ld   r30,y+
000473 91f9          ld   r31,y+
                 strlenf0:
000474 9005      	lpm  r0,z+
000475 2000          tst  r0
000476 f011          breq strlenf1
000477 9611          adiw r26,1
000478 cffb          rjmp strlenf0
                 strlenf1:
000479 01fd          movw r30,r26
00047a 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer:
000160           	.BYTE 0x8
                 _ma:
000168           	.BYTE 0xA
                 _temp:
000172           	.BYTE 0x4
                 _registry_ds1307:
000176           	.BYTE 0x7
                 __seed_G102:
00017d           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00047b e0e0      	LDI  R30,LOW(0)
00047c 83e9      	STD  Y+1,R30
00047d 83ea      	STD  Y+2,R30
00047e 83eb      	STD  Y+3,R30
00047f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000480 91e0 0172 	LDS  R30,_temp
000482 91f0 0173 	LDS  R31,_temp+1
000484 9160 0174 	LDS  R22,_temp+2
000486 9170 0175 	LDS  R23,_temp+3
000488 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000489 dd50      	RCALL _hienthi
00048a eea8      	LDI  R26,LOW(1000)
00048b e0b3      	LDI  R27,HIGH(1000)
00048c c223      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
00048d 27ff      	CLR  R31
00048e 2766      	CLR  R22
00048f 2777      	CLR  R23
000490 d0c8      	RCALL __PUTPARD1
000491 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000492 e0b0      	LDI  R27,0
000493 e0ea      	LDI  R30,LOW(10)
000494 e0f0      	LDI  R31,HIGH(10)
000495 d09a      	RCALL __DIVW21
000496 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000497 27bb      	CLR  R27
000498 e0ea      	LDI  R30,LOW(10)
000499 e0f0      	LDI  R31,HIGH(10)
00049a d09a      	RCALL __MODW21
00049b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
00049c 2fe2      	MOV  R30,R18
00049d e0f0      	LDI  R31,0
00049e 59e8      	SUBI R30,LOW(-_ma)
00049f 4ffe      	SBCI R31,HIGH(-_ma)
0004a0 81a0      	LD   R26,Z
0004a1 cd61      	RJMP _quet
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0004a2 2fe3      	MOV  R30,R19
0004a3 e0f0      	LDI  R31,0
0004a4 59e8      	SUBI R30,LOW(-_ma)
0004a5 4ffe      	SBCI R31,HIGH(-_ma)
0004a6 81a0      	LD   R26,Z
0004a7 cd5b      	RJMP _quet
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0004a8 2fe0      	MOV  R30,R16
0004a9 e0f0      	LDI  R31,0
0004aa 59e8      	SUBI R30,LOW(-_ma)
0004ab 4ffe      	SBCI R31,HIGH(-_ma)
0004ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
0004ad 2fe1      	MOV  R30,R17
0004ae e0f0      	LDI  R31,0
0004af 59e8      	SUBI R30,LOW(-_ma)
0004b0 4ffe      	SBCI R31,HIGH(-_ma)
0004b1 81a0      	LD   R26,Z
0004b2 cd50      	RJMP _quet
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0004b3 81ae      	LDD  R26,Y+6
0004b4 81bf      	LDD  R27,Y+6+1
0004b5 eee8      	LDI  R30,LOW(1000)
0004b6 e0f3      	LDI  R31,HIGH(1000)
0004b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
0004b8 98c0      	CBI  0x18,0
0004b9 9ab8      	SBI  0x17,0
                +
0004ba e081     +LDI R24 , LOW ( 1 )
                +__DELAY_USB_LOOP :
0004bb 958a     +DEC R24
0004bc f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 1
0004bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xC:
0004be 932a      	ST   -Y,R18
0004bf 85ad      	LDD  R26,Y+13
0004c0 85be      	LDD  R27,Y+13+1
0004c1 85ef      	LDD  R30,Y+15
0004c2 89f8      	LDD  R31,Y+15+1
0004c3 9509      	ICALL
0004c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0xD:
0004c5 89e8      	LDD  R30,Y+16
0004c6 89f9      	LDD  R31,Y+16+1
0004c7 9734      	SBIW R30,4
0004c8 8be8      	STD  Y+16,R30
0004c9 8bf9      	STD  Y+16+1,R31
0004ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xE:
0004cb 85ad      	LDD  R26,Y+13
0004cc 85be      	LDD  R27,Y+13+1
0004cd 85ef      	LDD  R30,Y+15
0004ce 89f8      	LDD  R31,Y+15+1
0004cf 9509      	ICALL
0004d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xF:
0004d1 89a8      	LDD  R26,Y+16
0004d2 89b9      	LDD  R27,Y+16+1
0004d3 9614      	ADIW R26,4
0004d4 d07c      	RCALL __GETW1P
0004d5 83ee      	STD  Y+6,R30
0004d6 83ff      	STD  Y+6+1,R31
0004d7 81ae      	LDD  R26,Y+6
0004d8 81bf      	LDD  R27,Y+6+1
0004d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
0004da 89a8      	LDD  R26,Y+16
0004db 89b9      	LDD  R27,Y+16+1
0004dc 9614      	ADIW R26,4
0004dd d073      	RCALL __GETW1P
0004de 87ea      	STD  Y+10,R30
0004df 87fb      	STD  Y+10+1,R31
0004e0 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0004e1 935a      	ST   -Y,R21
                 __SAVELOCR5:
0004e2 934a      	ST   -Y,R20
                 __SAVELOCR4:
0004e3 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004e4 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004e5 931a      	ST   -Y,R17
0004e6 930a      	ST   -Y,R16
0004e7 9508      	RET
                 
                 __LOADLOCR6:
0004e8 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0004e9 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0004ea 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004eb 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004ec 8119      	LDD  R17,Y+1
0004ed 8108      	LD   R16,Y
0004ee 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0004ef 0fac      	ADD  R26,R28
0004f0 1fbd      	ADC  R27,R29
                 __INITLOC0:
0004f1 9005      	LPM  R0,Z+
0004f2 920d      	ST   X+,R0
0004f3 958a      	DEC  R24
0004f4 f7e1      	BRNE __INITLOC0
0004f5 9508      	RET
                 
                 __ADDW2R15:
0004f6 2400      	CLR  R0
0004f7 0daf      	ADD  R26,R15
0004f8 1db0      	ADC  R27,R0
0004f9 9508      	RET
                 
                 __ANEGW1:
0004fa 95f1      	NEG  R31
0004fb 95e1      	NEG  R30
0004fc 40f0      	SBCI R31,0
0004fd 9508      	RET
                 
                 __ANEGD1:
0004fe 95f0      	COM  R31
0004ff 9560      	COM  R22
000500 9570      	COM  R23
000501 95e1      	NEG  R30
000502 4fff      	SBCI R31,-1
000503 4f6f      	SBCI R22,-1
000504 4f7f      	SBCI R23,-1
000505 9508      	RET
                 
                 __CWD1:
000506 2f6f      	MOV  R22,R31
000507 0f66      	ADD  R22,R22
000508 0b66      	SBC  R22,R22
000509 2f76      	MOV  R23,R22
00050a 9508      	RET
                 
                 __CWD2:
00050b 2f8b      	MOV  R24,R27
00050c 0f88      	ADD  R24,R24
00050d 0b88      	SBC  R24,R24
00050e 2f98      	MOV  R25,R24
00050f 9508      	RET
                 
                 __NEB12:
000510 17ea      	CP   R30,R26
000511 e0e1      	LDI  R30,1
000512 f409      	BRNE __NEB12T
000513 27ee      	CLR  R30
                 __NEB12T:
000514 9508      	RET
                 
                 __MULW12U:
000515 9ffa      	MUL  R31,R26
000516 2df0      	MOV  R31,R0
000517 9feb      	MUL  R30,R27
000518 0df0      	ADD  R31,R0
000519 9fea      	MUL  R30,R26
00051a 2de0      	MOV  R30,R0
00051b 0df1      	ADD  R31,R1
00051c 9508      	RET
                 
                 __DIVW21U:
00051d 2400      	CLR  R0
00051e 2411      	CLR  R1
00051f e190      	LDI  R25,16
                 __DIVW21U1:
000520 0faa      	LSL  R26
000521 1fbb      	ROL  R27
000522 1c00      	ROL  R0
000523 1c11      	ROL  R1
000524 1a0e      	SUB  R0,R30
000525 0a1f      	SBC  R1,R31
000526 f418      	BRCC __DIVW21U2
000527 0e0e      	ADD  R0,R30
000528 1e1f      	ADC  R1,R31
000529 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00052a 60a1      	SBR  R26,1
                 __DIVW21U3:
00052b 959a      	DEC  R25
00052c f799      	BRNE __DIVW21U1
00052d 01fd      	MOVW R30,R26
00052e 01d0      	MOVW R26,R0
00052f 9508      	RET
                 
                 __DIVW21:
000530 d012      	RCALL __CHKSIGNW
000531 dfeb      	RCALL __DIVW21U
000532 f40e      	BRTC __DIVW211
000533 dfc6      	RCALL __ANEGW1
                 __DIVW211:
000534 9508      	RET
                 
                 __MODW21:
000535 94e8      	CLT
000536 ffb7      	SBRS R27,7
000537 c004      	RJMP __MODW211
000538 95b1      	NEG  R27
000539 95a1      	NEG  R26
00053a 40b0      	SBCI R27,0
00053b 9468      	SET
                 __MODW211:
00053c fdf7      	SBRC R31,7
00053d dfbc      	RCALL __ANEGW1
00053e dfde      	RCALL __DIVW21U
00053f 01fd      	MOVW R30,R26
000540 f40e      	BRTC __MODW212
000541 dfb8      	RCALL __ANEGW1
                 __MODW212:
000542 9508      	RET
                 
                 __CHKSIGNW:
000543 94e8      	CLT
000544 fff7      	SBRS R31,7
000545 c002      	RJMP __CHKSW1
000546 dfb3      	RCALL __ANEGW1
000547 9468      	SET
                 __CHKSW1:
000548 ffb7      	SBRS R27,7
000549 c006      	RJMP __CHKSW2
00054a 95b1      	NEG  R27
00054b 95a1      	NEG  R26
00054c 40b0      	SBCI R27,0
00054d f800      	BLD  R0,0
00054e 9403      	INC  R0
00054f fa00      	BST  R0,0
                 __CHKSW2:
000550 9508      	RET
                 
                 __GETW1P:
000551 91ed      	LD   R30,X+
000552 91fc      	LD   R31,X
000553 9711      	SBIW R26,1
000554 9508      	RET
                 
                 __GETW1PF:
000555 9005      	LPM  R0,Z+
000556 91f4      	LPM  R31,Z
000557 2de0      	MOV  R30,R0
000558 9508      	RET
                 
                 __PUTPARD1:
000559 937a      	ST   -Y,R23
00055a 936a      	ST   -Y,R22
00055b 93fa      	ST   -Y,R31
00055c 93ea      	ST   -Y,R30
00055d 9508      	RET
                 
                 __CDF2U:
00055e 9468      	SET
00055f c001      	RJMP __CDF2U0
                 __CDF2:
000560 94e8      	CLT
                 __CDF2U0:
000561 d001      	RCALL __SWAPD12
000562 d07e      	RCALL __CDF1U0
                 
                 __SWAPD12:
000563 2e18      	MOV  R1,R24
000564 2f86      	MOV  R24,R22
000565 2d61      	MOV  R22,R1
000566 2e19      	MOV  R1,R25
000567 2f97      	MOV  R25,R23
000568 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000569 2e1b      	MOV  R1,R27
00056a 2fbf      	MOV  R27,R31
00056b 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00056c 2e1a      	MOV  R1,R26
00056d 2fae      	MOV  R26,R30
00056e 2de1      	MOV  R30,R1
00056f 9508      	RET
                 
                 __COPYMML:
000570 2799      	CLR  R25
                 __COPYMM:
000571 93ef      	PUSH R30
000572 93ff      	PUSH R31
                 __COPYMM0:
000573 9161      	LD   R22,Z+
000574 936d      	ST   X+,R22
000575 9701      	SBIW R24,1
000576 f7e1      	BRNE __COPYMM0
000577 91ff      	POP  R31
000578 91ef      	POP  R30
000579 9508      	RET
                 
                 __ROUND_REPACK:
00057a 2355      	TST  R21
00057b f442      	BRPL __REPACK
00057c 3850      	CPI  R21,0x80
00057d f411      	BRNE __ROUND_REPACK0
00057e ffe0      	SBRS R30,0
00057f c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000580 9631      	ADIW R30,1
000581 1f69      	ADC  R22,R25
000582 1f79      	ADC  R23,R25
000583 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000584 e850      	LDI  R21,0x80
000585 2757      	EOR  R21,R23
000586 f411      	BRNE __REPACK0
000587 935f      	PUSH R21
000588 c0c8      	RJMP __ZERORES
                 __REPACK0:
000589 3f5f      	CPI  R21,0xFF
00058a f031      	BREQ __REPACK1
00058b 0f66      	LSL  R22
00058c 0c00      	LSL  R0
00058d 9557      	ROR  R21
00058e 9567      	ROR  R22
00058f 2f75      	MOV  R23,R21
000590 9508      	RET
                 __REPACK1:
000591 935f      	PUSH R21
000592 2000      	TST  R0
000593 f00a      	BRMI __REPACK2
000594 c0c7      	RJMP __MAXRES
                 __REPACK2:
000595 c0c0      	RJMP __MINRES
                 
                 __UNPACK:
000596 e850      	LDI  R21,0x80
000597 2e19      	MOV  R1,R25
000598 2215      	AND  R1,R21
000599 0f88      	LSL  R24
00059a 1f99      	ROL  R25
00059b 2795      	EOR  R25,R21
00059c 0f55      	LSL  R21
00059d 9587      	ROR  R24
                 
                 __UNPACK1:
00059e e850      	LDI  R21,0x80
00059f 2e07      	MOV  R0,R23
0005a0 2205      	AND  R0,R21
0005a1 0f66      	LSL  R22
0005a2 1f77      	ROL  R23
0005a3 2775      	EOR  R23,R21
0005a4 0f55      	LSL  R21
0005a5 9567      	ROR  R22
0005a6 9508      	RET
                 
                 __CFD1U:
0005a7 9468      	SET
0005a8 c001      	RJMP __CFD1U0
                 __CFD1:
0005a9 94e8      	CLT
                 __CFD1U0:
0005aa 935f      	PUSH R21
0005ab dff2      	RCALL __UNPACK1
0005ac 3870      	CPI  R23,0x80
0005ad f018      	BRLO __CFD10
0005ae 3f7f      	CPI  R23,0xFF
0005af f408      	BRCC __CFD10
0005b0 c0a0      	RJMP __ZERORES
                 __CFD10:
0005b1 e156      	LDI  R21,22
0005b2 1b57      	SUB  R21,R23
0005b3 f4aa      	BRPL __CFD11
0005b4 9551      	NEG  R21
0005b5 3058      	CPI  R21,8
0005b6 f40e      	BRTC __CFD19
0005b7 3059      	CPI  R21,9
                 __CFD19:
0005b8 f030      	BRLO __CFD17
0005b9 efef      	SER  R30
0005ba efff      	SER  R31
0005bb ef6f      	SER  R22
0005bc e77f      	LDI  R23,0x7F
0005bd f977      	BLD  R23,7
0005be c01a      	RJMP __CFD15
                 __CFD17:
0005bf 2777      	CLR  R23
0005c0 2355      	TST  R21
0005c1 f0b9      	BREQ __CFD15
                 __CFD18:
0005c2 0fee      	LSL  R30
0005c3 1fff      	ROL  R31
0005c4 1f66      	ROL  R22
0005c5 1f77      	ROL  R23
0005c6 955a      	DEC  R21
0005c7 f7d1      	BRNE __CFD18
0005c8 c010      	RJMP __CFD15
                 __CFD11:
0005c9 2777      	CLR  R23
                 __CFD12:
0005ca 3058      	CPI  R21,8
0005cb f028      	BRLO __CFD13
0005cc 2fef      	MOV  R30,R31
0005cd 2ff6      	MOV  R31,R22
0005ce 2f67      	MOV  R22,R23
0005cf 5058      	SUBI R21,8
0005d0 cff9      	RJMP __CFD12
                 __CFD13:
0005d1 2355      	TST  R21
0005d2 f031      	BREQ __CFD15
                 __CFD14:
0005d3 9576      	LSR  R23
0005d4 9567      	ROR  R22
0005d5 95f7      	ROR  R31
0005d6 95e7      	ROR  R30
0005d7 955a      	DEC  R21
0005d8 f7d1      	BRNE __CFD14
                 __CFD15:
0005d9 2000      	TST  R0
0005da f40a      	BRPL __CFD16
0005db df22      	RCALL __ANEGD1
                 __CFD16:
0005dc 915f      	POP  R21
0005dd 9508      	RET
                 
                 __CDF1U:
0005de 9468      	SET
0005df c001      	RJMP __CDF1U0
                 __CDF1:
0005e0 94e8      	CLT
                 __CDF1U0:
0005e1 9730      	SBIW R30,0
0005e2 4060      	SBCI R22,0
0005e3 4070      	SBCI R23,0
0005e4 f0b1      	BREQ __CDF10
0005e5 2400      	CLR  R0
0005e6 f026      	BRTS __CDF11
0005e7 2377      	TST  R23
0005e8 f412      	BRPL __CDF11
0005e9 9400      	COM  R0
0005ea df13      	RCALL __ANEGD1
                 __CDF11:
0005eb 2e17      	MOV  R1,R23
0005ec e17e      	LDI  R23,30
0005ed 2011      	TST  R1
                 __CDF12:
0005ee f032      	BRMI __CDF13
0005ef 957a      	DEC  R23
0005f0 0fee      	LSL  R30
0005f1 1fff      	ROL  R31
0005f2 1f66      	ROL  R22
0005f3 1c11      	ROL  R1
0005f4 cff9      	RJMP __CDF12
                 __CDF13:
0005f5 2fef      	MOV  R30,R31
0005f6 2ff6      	MOV  R31,R22
0005f7 2d61      	MOV  R22,R1
0005f8 935f      	PUSH R21
0005f9 df8a      	RCALL __REPACK
0005fa 915f      	POP  R21
                 __CDF10:
0005fb 9508      	RET
                 
                 __SWAPACC:
0005fc 934f      	PUSH R20
0005fd 01af      	MOVW R20,R30
0005fe 01fd      	MOVW R30,R26
0005ff 01da      	MOVW R26,R20
000600 01ab      	MOVW R20,R22
000601 01bc      	MOVW R22,R24
000602 01ca      	MOVW R24,R20
000603 2d40      	MOV  R20,R0
000604 2c01      	MOV  R0,R1
000605 2e14      	MOV  R1,R20
000606 914f      	POP  R20
000607 9508      	RET
                 
                 __UADD12:
000608 0fea      	ADD  R30,R26
000609 1ffb      	ADC  R31,R27
00060a 1f68      	ADC  R22,R24
00060b 9508      	RET
                 
                 __NEGMAN1:
00060c 95e0      	COM  R30
00060d 95f0      	COM  R31
00060e 9560      	COM  R22
00060f 5fef      	SUBI R30,-1
000610 4fff      	SBCI R31,-1
000611 4f6f      	SBCI R22,-1
000612 9508      	RET
                 
                 __ADDF12:
000613 935f      	PUSH R21
000614 df81      	RCALL __UNPACK
000615 3890      	CPI  R25,0x80
000616 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000617 3870      	CPI  R23,0x80
000618 f121      	BREQ __ADDF128
                 __ADDF121:
000619 2f57      	MOV  R21,R23
00061a 1b59      	SUB  R21,R25
00061b f12b      	BRVS __ADDF1211
00061c f412      	BRPL __ADDF122
00061d dfde      	RCALL __SWAPACC
00061e cffa      	RJMP __ADDF121
                 __ADDF122:
00061f 3158      	CPI  R21,24
000620 f018      	BRLO __ADDF123
000621 27aa      	CLR  R26
000622 27bb      	CLR  R27
000623 2788      	CLR  R24
                 __ADDF123:
000624 3058      	CPI  R21,8
000625 f028      	BRLO __ADDF124
000626 2fab      	MOV  R26,R27
000627 2fb8      	MOV  R27,R24
000628 2788      	CLR  R24
000629 5058      	SUBI R21,8
00062a cff9      	RJMP __ADDF123
                 __ADDF124:
00062b 2355      	TST  R21
00062c f029      	BREQ __ADDF126
                 __ADDF125:
00062d 9586      	LSR  R24
00062e 95b7      	ROR  R27
00062f 95a7      	ROR  R26
000630 955a      	DEC  R21
000631 f7d9      	BRNE __ADDF125
                 __ADDF126:
000632 2d50      	MOV  R21,R0
000633 2551      	EOR  R21,R1
000634 f072      	BRMI __ADDF127
000635 dfd2      	RCALL __UADD12
000636 f438      	BRCC __ADDF129
000637 9567      	ROR  R22
000638 95f7      	ROR  R31
000639 95e7      	ROR  R30
00063a 9573      	INC  R23
00063b f413      	BRVC __ADDF129
00063c c01f      	RJMP __MAXRES
                 __ADDF128:
00063d dfbe      	RCALL __SWAPACC
                 __ADDF129:
00063e df45      	RCALL __REPACK
00063f 915f      	POP  R21
000640 9508      	RET
                 __ADDF1211:
000641 f7d8      	BRCC __ADDF128
000642 cffb      	RJMP __ADDF129
                 __ADDF127:
000643 1bea      	SUB  R30,R26
000644 0bfb      	SBC  R31,R27
000645 0b68      	SBC  R22,R24
000646 f051      	BREQ __ZERORES
000647 f410      	BRCC __ADDF1210
000648 9400      	COM  R0
000649 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
00064a 2366      	TST  R22
00064b f392      	BRMI __ADDF129
00064c 0fee      	LSL  R30
00064d 1fff      	ROL  R31
00064e 1f66      	ROL  R22
00064f 957a      	DEC  R23
000650 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000651 27ee      	CLR  R30
000652 27ff      	CLR  R31
000653 01bf      	MOVW R22,R30
000654 915f      	POP  R21
000655 9508      	RET
                 
                 __MINRES:
000656 efef      	SER  R30
000657 efff      	SER  R31
000658 e76f      	LDI  R22,0x7F
000659 ef7f      	SER  R23
00065a 915f      	POP  R21
00065b 9508      	RET
                 
                 __MAXRES:
00065c efef      	SER  R30
00065d efff      	SER  R31
00065e e76f      	LDI  R22,0x7F
00065f e77f      	LDI  R23,0x7F
000660 915f      	POP  R21
000661 9508      	RET
                 
                 __MULF12:
000662 935f      	PUSH R21
000663 df32      	RCALL __UNPACK
000664 3870      	CPI  R23,0x80
000665 f359      	BREQ __ZERORES
000666 3890      	CPI  R25,0x80
000667 f349      	BREQ __ZERORES
000668 2401      	EOR  R0,R1
000669 9408      	SEC
00066a 1f79      	ADC  R23,R25
00066b f423      	BRVC __MULF124
00066c f324      	BRLT __ZERORES
                 __MULF125:
00066d 2000      	TST  R0
00066e f33a      	BRMI __MINRES
00066f cfec      	RJMP __MAXRES
                 __MULF124:
000670 920f      	PUSH R0
000671 931f      	PUSH R17
000672 932f      	PUSH R18
000673 933f      	PUSH R19
000674 934f      	PUSH R20
000675 2711      	CLR  R17
000676 2722      	CLR  R18
000677 2799      	CLR  R25
000678 9f68      	MUL  R22,R24
000679 01a0      	MOVW R20,R0
00067a 9f8f      	MUL  R24,R31
00067b 2d30      	MOV  R19,R0
00067c 0d41      	ADD  R20,R1
00067d 1f59      	ADC  R21,R25
00067e 9f6b      	MUL  R22,R27
00067f 0d30      	ADD  R19,R0
000680 1d41      	ADC  R20,R1
000681 1f59      	ADC  R21,R25
000682 9f8e      	MUL  R24,R30
000683 d027      	RCALL __MULF126
000684 9fbf      	MUL  R27,R31
000685 d025      	RCALL __MULF126
000686 9f6a      	MUL  R22,R26
000687 d023      	RCALL __MULF126
000688 9fbe      	MUL  R27,R30
000689 d01d      	RCALL __MULF127
00068a 9faf      	MUL  R26,R31
00068b d01b      	RCALL __MULF127
00068c 9fae      	MUL  R26,R30
00068d 0d11      	ADD  R17,R1
00068e 1f29      	ADC  R18,R25
00068f 1f39      	ADC  R19,R25
000690 1f49      	ADC  R20,R25
000691 1f59      	ADC  R21,R25
000692 2fe3      	MOV  R30,R19
000693 2ff4      	MOV  R31,R20
000694 2f65      	MOV  R22,R21
000695 2f52      	MOV  R21,R18
000696 914f      	POP  R20
000697 913f      	POP  R19
000698 912f      	POP  R18
000699 911f      	POP  R17
00069a 900f      	POP  R0
00069b 2366      	TST  R22
00069c f02a      	BRMI __MULF122
00069d 0f55      	LSL  R21
00069e 1fee      	ROL  R30
00069f 1fff      	ROL  R31
0006a0 1f66      	ROL  R22
0006a1 c002      	RJMP __MULF123
                 __MULF122:
0006a2 9573      	INC  R23
0006a3 f24b      	BRVS __MULF125
                 __MULF123:
0006a4 ded5      	RCALL __ROUND_REPACK
0006a5 915f      	POP  R21
0006a6 9508      	RET
                 
                 __MULF127:
0006a7 0d10      	ADD  R17,R0
0006a8 1d21      	ADC  R18,R1
0006a9 1f39      	ADC  R19,R25
0006aa c002      	RJMP __MULF128
                 __MULF126:
0006ab 0d20      	ADD  R18,R0
0006ac 1d31      	ADC  R19,R1
                 __MULF128:
0006ad 1f49      	ADC  R20,R25
0006ae 1f59      	ADC  R21,R25
0006af 9508      	RET
                 
                 _delay_ms:
0006b0 9610      	adiw r26,0
0006b1 f039      	breq __delay_ms1
                 __delay_ms0:
0006b2 95a8      	wdr
                +
0006b3 ee88     +LDI R24 , LOW ( 0x3E8 )
0006b4 e093     +LDI R25 , HIGH ( 0x3E8 )
                +__DELAY_USW_LOOP :
0006b5 9701     +SBIW R24 , 1
0006b6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3E8
0006b7 9711      	sbiw r26,1
0006b8 f7c9      	brne __delay_ms0
                 __delay_ms1:
0006b9 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  45 r1 :  30 r2 :   1 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   5 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  53 r17:  69 r18:  40 r19:  19 r20:  26 r21:  73 r22:  54 r23:  41 
r24:  51 r25:  31 r26: 126 r27:  64 r28:  24 r29:   2 r30: 408 r31: 119 
x  :  17 y  : 214 z  :  22 
Registers used: 26 out of 35 (74.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  22 add   :  17 
adiw  :  24 and   :   2 andi  :  31 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  39 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   1 brmi  :   6 brne  :  44 brpl  :   6 brsh  :   3 brtc  :   3 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   1 call  :   0 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  33 cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :  10 
cp    :   8 cpc   :   2 cpi   :  56 cpse  :   0 dec   :  14 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  24 inc   :   6 jmp   :  30 ld    :  30 ldd   :  89 ldi   : 165 
lds   :  13 lpm   :  15 lsl   :  12 lsr   :   4 mov   :  81 movw  :  28 
mul   :  13 muls  :   1 mulsu :   0 neg   :   8 nop   :   0 or    :   2 
ori   :   7 out   :  63 pop   :  18 push  :  17 rcall : 131 ret   :  62 
reti  :   1 rjmp  :  95 rol   :  16 ror   :  14 sbc   :   6 sbci  :  16 
sbi   :   5 sbic  :   1 sbis  :   1 sbiw  :  22 sbr   :   1 sbrc  :   4 
sbrs  :  17 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   9 
ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  72 std   :  49 sts   :   4 sub   :   5 subi  :  26 swap  :   3 
tst   :  15 wdr   :   1 
Instructions used: 78 out of 116 (67.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000d74   3254    190   3444   16384  21.0%
[.dseg] 0x000060 0x000181      0     33     33    1024   3.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings
