
AVRASM ver. 2.1.30  D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm Fri Jun 24 00:40:57 2016

D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1095): warning: Register r5 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1096): warning: Register r4 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1097): warning: Register r7 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1098): warning: Register r6 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1099): warning: Register r9 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1100): warning: Register r8 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1101): warning: Register r10 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1102): warning: Register r11 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1103): warning: Register r12 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1104): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.24 Evaluation
                 ;(C) Copyright 1998-2015 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _kytu=R6
                 	.DEF _b=R9
                 	.DEF _received_byte=R8
                 	.DEF _isComplete=R10
                 	.DEF _isComplete_msb=R11
                 	.DEF _package_size=R12
                 	.DEF _package_size_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0066 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0265 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0200      	.DB  0x0,0x0,0x0,0x2
000036 0001
000037 0000      	.DB  0x1,0x0,0x0,0x0
                 
                 _0xA0004:
000038 f9c0
000039 b0a4
00003a 9299
00003b f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
00003c 9080      	.DB  0x80,0x90
                 _0xA0024:
00003d 0f1e
00003e 050a
00003f 050c
000040 0110      	.DB  0x1E,0xF,0xA,0x5,0xC,0x5,0x10,0x1
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1155): warning: .cseg .db misalignment - padding zero byte
000041 0001      	.DB  0x1
                 _0xA0000:
000042 684e
000043 6569
000044 2074
000045 6f64      	.DB  0x4E,0x68,0x69,0x65,0x74,0x20,0x64,0x6F
000046 6820
000047 6569
000048 206e
000049 6174      	.DB  0x20,0x68,0x69,0x65,0x6E,0x20,0x74,0x61
00004a 2069
00004b 616c
00004c 2520
00004d 0066      	.DB  0x69,0x20,0x6C,0x61,0x20,0x25,0x66,0x0
00004e 6978
00004f 206e
000050 6863
000051 6f61      	.DB  0x78,0x69,0x6E,0x20,0x63,0x68,0x61,0x6F
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1161): warning: .cseg .db misalignment - padding zero byte
000052 0000      	.DB  0x0
                 _0x2000060:
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1163): warning: .cseg .db misalignment - padding zero byte
000053 0001      	.DB  0x1
                 _0x2000000:
000054 4e2d
000055 4e41
000056 4900
000057 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1166): warning: .cseg .db misalignment - padding zero byte
000058 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000059 0001      	.DW  0x01
00005a 0002      	.DW  0x02
00005b 0066      	.DW  __REG_BIT_VARS*2
                 
00005c 0008      	.DW  0x08
00005d 0006      	.DW  0x06
00005e 0068      	.DW  __REG_VARS*2
                 
00005f 000a      	.DW  0x0A
000060 016f      	.DW  _ma
000061 0070      	.DW  _0xA0004*2
                 
000062 0001      	.DW  0x01
000063 0189      	.DW  __seed_G100
000064 00a6      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
000065 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000066 94f8      	CLI
000067 27ee      	CLR  R30
000068 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000069 e0f1      	LDI  R31,1
00006a bffb      	OUT  GICR,R31
00006b bfeb      	OUT  GICR,R30
00006c bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00006d e1f8      	LDI  R31,0x18
00006e bdf1      	OUT  WDTCR,R31
00006f bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000070 e08d      	LDI  R24,(14-2)+1
000071 e0a2      	LDI  R26,2
000072 27bb      	CLR  R27
                 __CLEAR_REG:
000073 93ed      	ST   X+,R30
000074 958a      	DEC  R24
000075 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000076 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000077 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000078 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000079 93ed      	ST   X+,R30
00007a 9701      	SBIW R24,1
00007b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00007c ebe2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00007d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007e 9185      	LPM  R24,Z+
00007f 9195      	LPM  R25,Z+
000080 9700      	SBIW R24,0
000081 f061      	BREQ __GLOBAL_INI_END
000082 91a5      	LPM  R26,Z+
000083 91b5      	LPM  R27,Z+
000084 9005      	LPM  R0,Z+
000085 9015      	LPM  R1,Z+
000086 01bf      	MOVW R22,R30
000087 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000088 9005      	LPM  R0,Z+
000089 920d      	ST   X+,R0
00008a 9701      	SBIW R24,1
00008b f7e1      	BRNE __GLOBAL_INI_LOOP
00008c 01fb      	MOVW R30,R22
00008d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008f bfed      	OUT  SPL,R30
000090 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000091 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000092 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000093 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000094 940c 0282 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <myds18b20ver1.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// the following arrays specify the addresses of *my* ds18b20 devices
                 ;// substitute the address of your devices before using.
                 ;
                 ;//byte rom0[] = {0x28, 0xE1, 0x21, 0xA3, 0x02, 0x00, 0x00, 0x5B};
                 ;//byte rom1[] = {0x28, 0x1B, 0x21, 0x30, 0x05, 0x00, 0x00, 0xF5};
                 ;
                 ;byte therm_Reset() {
                 ; 0000 0009 byte therm_Reset() {
                 
                 	.CSEG
                 ; 0000 000A     byte i;
                 ; 0000 000B     THERM_OUTPUT(); // set pin as output
                 ;	i -> R17
                 ; 0000 000C     THERM_LOW(); // pull pin low for 480uS
                 ; 0000 000D     delay_us(480);
                 ; 0000 000E     THERM_INPUT(); // set pin as input
                 ; 0000 000F     delay_us(60); // wait for 60uS
                 ; 0000 0010     i = THERM_READ(); // get pin value
                 ; 0000 0011     delay_us(420); // wait for rest of 480uS period
                 ; 0000 0012     return i;
                 ; 0000 0013 }
                 ;
                 ;void therm_WriteBit(byte _bit) {
                 ; 0000 0015 void therm_WriteBit(byte _bit) {
                 ; 0000 0016     THERM_OUTPUT(); // set pin as output
                 ;	_bit -> Y+0
                 ; 0000 0017     THERM_LOW(); // pull pin low for 1uS
                 ; 0000 0018     delay_us(1);
                 ; 0000 0019     if (_bit) THERM_INPUT(); // to write 1, float pin
                 ; 0000 001A     delay_us(60);
                 ; 0000 001B     THERM_INPUT(); // wait 60uS & release pin
                 ; 0000 001C }
                 ;
                 ;byte therm_ReadBit() {
                 ; 0000 001E byte therm_ReadBit() {
                 ; 0000 001F     byte _bit = 0;
                 ; 0000 0020     THERM_OUTPUT(); // set pin as output
                 ;	_bit -> R17
                 ; 0000 0021     THERM_LOW(); // pull pin low for 1uS
                 ; 0000 0022     delay_us(1);
                 ; 0000 0023     THERM_INPUT(); // release pin & wait 14 uS
                 ; 0000 0024     delay_us(14);
                 ; 0000 0025     if (THERM_READ()) _bit = 1; // read pin value
                 ; 0000 0026     delay_us(45); // wait rest of 60uS period
                 ; 0000 0027     return _bit;
                 ; 0000 0028 }
                 ;
                 ;void therm_WriteByte(byte data) {
                 ; 0000 002A void therm_WriteByte(byte data) {
                 ; 0000 002B     byte i = 8;
                 ; 0000 002C     while (i--) // for 8 bits:
                 ;	data -> Y+1
                 ;	i -> R17
                 ; 0000 002D     {
                 ; 0000 002E         therm_WriteBit(data & 1); // send least significant bit
                 ; 0000 002F         data >>= 1; // shift all bits right
                 ; 0000 0030     }
                 ; 0000 0031 }
                 ;
                 ;byte therm_ReadByte() {
                 ; 0000 0033 byte therm_ReadByte() {
                 ; 0000 0034     byte i = 8, data = 0;
                 ; 0000 0035     while (i--) // for 8 bits:
                 ;	i -> R17
                 ;	data -> R16
                 ; 0000 0036     {
                 ; 0000 0037         data >>= 1; // shift all bits right
                 ; 0000 0038         data |= (therm_ReadBit() << 7); // get next bit (LSB first)
                 ; 0000 0039     }
                 ; 0000 003A     return data;
                 ; 0000 003B }
                 ;
                 ;//void therm_MatchRom(byte rom[]) {
                 ;//    byte i;
                 ;//    therm_WriteByte(THERM_MATCHROM);
                 ;//    for (i = 0; i < 8; i++)
                 ;//        therm_WriteByte(rom[i]);
                 ;//}
                 ;
                 ;void therm_ReadTempRaw(byte id[], byte *t0, byte *t1)
                 ; 0000 0045 // Returns the two temperature bytes from the scratchpad
                 ; 0000 0046 {
                 ; 0000 0047 //    therm_Reset(); // skip ROM & start temp conversion
                 ; 0000 0048 
                 ; 0000 0049     //    if (id) therm_MatchRom(id);
                 ; 0000 004A     //    else therm_WriteByte(THERM_SKIPROM);
                 ; 0000 004B     //    therm_WriteByte(THERM_CONVERTTEMP);
                 ; 0000 004C     //    while (!therm_ReadBit()); // wait until conversion completed
                 ; 0000 004D     //    therm_Reset(); // read first two bytes from scratchpad
                 ; 0000 004E     //    if (id) therm_MatchRom(id);
                 ; 0000 004F     //    else therm_WriteByte(THERM_SKIPROM);
                 ; 0000 0050 
                 ; 0000 0051     therm_Reset(); // skip ROM & start temp conversion
                 ;	id -> Y+4
                 ;	*t0 -> Y+2
                 ;	*t1 -> Y+0
                 ; 0000 0052     therm_WriteByte(THERM_SKIPROM);
                 ; 0000 0053     therm_WriteByte(THERM_CONVERTTEMP);
                 ; 0000 0054     while (!therm_ReadBit()); // wait until conversion completed
                 ; 0000 0055 
                 ; 0000 0056     therm_Reset(); // read first two bytes from scratchpad
                 ; 0000 0057     therm_WriteByte(THERM_SKIPROM);
                 ; 0000 0058 
                 ; 0000 0059     therm_WriteByte(THERM_READSCRATCH);
                 ; 0000 005A     *t0 = therm_ReadByte(); // first byte
                 ; 0000 005B     *t1 = therm_ReadByte(); // second byte
                 ; 0000 005C }
                 ;
                 ;void therm_ReadTempC(byte id[], int *whole, int *decimal)
                 ; 0000 005F // returns temperature in Celsius as WW.DDDD, where W=whole & D=decimal
                 ; 0000 0060 {
                 ; 0000 0061     byte t0, t1;
                 ; 0000 0062     therm_ReadTempRaw(id, &t0, &t1); // get temperature values
                 ;	id -> Y+6
                 ;	*whole -> Y+4
                 ;	*decimal -> Y+2
                 ;	t0 -> R17
                 ;	t1 -> R16
                 ; 0000 0063     *whole = (t1 & 0x07) << 4; // grab lower 3 bits of t1
                 ; 0000 0064     *whole |= t0 >> 4; // and upper 4 bits of t0
                 ; 0000 0065     *decimal = t0 & 0x0F; // decimals in lower 4 bits of t0
                 ; 0000 0066     *decimal *= 625; // conversion factor for 12-bit resolution
                 ; 0000 0067 }
                 ;
                 ;void therm_ReadTempF(byte id[], int *whole, int *decimal)
                 ; 0000 006A // returns temperature in Fahrenheit as WW.D, where W=whole & D=decimal
                 ; 0000 006B {
                 ; 0000 006C     byte t0, t1;
                 ; 0000 006D     int t16, t2, f10;
                 ; 0000 006E     therm_ReadTempRaw(id, &t0, &t1); // get temperature values
                 ;	id -> Y+12
                 ;	*whole -> Y+10
                 ;	*decimal -> Y+8
                 ;	t0 -> R17
                 ;	t1 -> R16
                 ;	t16 -> R18,R19
                 ;	t2 -> R20,R21
                 ;	f10 -> Y+6
                 ; 0000 006F     t16 = (t1 << 8) + t0; // result is temp*16, in celcius
                 ; 0000 0070     t2 = t16 / 8; // get t*2, with fractional part lost
                 ; 0000 0071     f10 = t16 + t2 + 320; // F=1.8C+32, so 10F = 18C+320 = 16C + 2C + 320
                 ; 0000 0072     *whole = f10 / 10; // get whole part
                 ; 0000 0073     *decimal = f10 % 10; // get fractional part
                 ; 0000 0074 }
                 ;
                 ;//inline __attribute__((gnu_inline)) void quickDelay(int delay)
                 ;//// this routine will pause 0.25uS per delay unit
                 ;//// for testing only; use _us_Delay() routine for >1uS delays
                 ;//{
                 ;//    while (delay--) // uses sbiw to subtract 1 from 16bit word
                 ;//        asm volatile("nop"); // nop, sbiw, brne = 4 cycles = 0.25 uS
                 ;//}
                 ;
                 ;// ---------------------------------------------------------------------------
                 ;// ROM READER PROGRAM
                 ;
                 ;byte RomReaderProgram()
                 ; 0000 0082 // Read the ID of the attached Dallas 18B20 device
                 ; 0000 0083 // Note: only ONE device should be on the bus.
                 ; 0000 0084 {
                 ; 0000 0085     byte i;
                 ; 0000 0086     byte data;
                 ; 0000 0087     //    LCD_String("ID (ROM) Reader:");
                 ; 0000 0088 //    while (1) {
                 ; 0000 0089         //        LCD_Line(1);
                 ; 0000 008A         // write 64-bit ROM code on first LCD line
                 ; 0000 008B         therm_Reset();
                 ;	i -> R17
                 ;	data -> R16
                 ; 0000 008C         therm_WriteByte(THERM_READROM);
                 ; 0000 008D //        for (i = 0; i < 8; i++) {
                 ; 0000 008E             data = therm_ReadByte();
                 ; 0000 008F             //            LCD_HexByte(data);
                 ; 0000 0090 //        }
                 ; 0000 0091         //        msDelay(1000); // do a read every second
                 ; 0000 0092 //    }
                 ; 0000 0093         return data;
                 ; 0000 0094 }
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#include <myds18b20ver2.h>
                 ;
                 ;/*
                 ; * ds18b20 init
                 ; */
                 ;uint8_t ds18b20_reset(void) {
                 ; 0001 000A uint8_t ds18b20_reset(void) {
                 
                 	.CSEG
                 _ds18b20_reset:
                 ; .FSTART _ds18b20_reset
                 ; 0001 000B 	uint8_t i;
                 ; 0001 000C 
                 ; 0001 000D 	//low for 480us
                 ; 0001 000E 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
000096 931a      	ST   -Y,R17
                 ;	i -> R17
000097 98c0      	CBI  0x18,0
                 ; 0001 000F 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
000098 9ab8      	SBI  0x17,0
                 ; 0001 0010 	delay_us(480);
                +
000099 ee80     +LDI R24 , LOW ( 480 )
00009a e091     +LDI R25 , HIGH ( 480 )
                +__DELAY_USW_LOOP :
00009b 9701     +SBIW R24 , 1
00009c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 480
                 ; 0001 0011 
                 ; 0001 0012 	//release line and wait for 60uS
                 ; 0001 0013 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
00009d 98b8      	CBI  0x17,0
                 ; 0001 0014 	delay_us(60);
                +
00009e e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
00009f 958a     +DEC R24
0000a0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0001 0015 
                 ; 0001 0016 	//get value and wait 420us
                 ; 0001 0017 	i = (DS18B20_PIN & (1<<DS18B20_DQ));
0000a1 b3e6      	IN   R30,0x16
0000a2 70e1      	ANDI R30,LOW(0x1)
0000a3 2f1e      	MOV  R17,R30
                 ; 0001 0018 	delay_us(420);
                +
0000a4 ea84     +LDI R24 , LOW ( 420 )
0000a5 e091     +LDI R25 , HIGH ( 420 )
                +__DELAY_USW_LOOP :
0000a6 9701     +SBIW R24 , 1
0000a7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 420
                 ; 0001 0019 
                 ; 0001 001A 	//return the read value, 0=ok, 1=error
                 ; 0001 001B 	return i;
0000a8 c018      	RJMP _0x20A0006
                 ; 0001 001C }
                 ; .FEND
                 ;
                 ;/*
                 ; * write one bit
                 ; */
                 ;void ds18b20_writebit(uint8_t _bit){
                 ; 0001 0021 void ds18b20_writebit(uint8_t _bit){
                 _ds18b20_writebit:
                 ; .FSTART _ds18b20_writebit
                 ; 0001 0022 	//low for 1uS
                 ; 0001 0023 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
0000a9 93aa      	ST   -Y,R26
                 ;	_bit -> Y+0
0000aa d287      	RCALL SUBOPT_0x0
                 ; 0001 0024 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
                 ; 0001 0025 	delay_us(1);
                 ; 0001 0026 
                 ; 0001 0027 	//if we want to write 1, release the line (if not will keep low)
                 ; 0001 0028 	if(_bit)
0000ab 81e8      	LD   R30,Y
0000ac 30e0      	CPI  R30,0
0000ad f009      	BREQ _0x20003
                 ; 0001 0029 		DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
0000ae 98b8      	CBI  0x17,0
                 ; 0001 002A 
                 ; 0001 002B 	//wait 60uS and release the line
                 ; 0001 002C 	delay_us(60);
                 _0x20003:
                +
0000af e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
0000b0 958a     +DEC R24
0000b1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0001 002D 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
0000b2 98b8      	CBI  0x17,0
                 ; 0001 002E }
0000b3 940c 0330 	JMP  _0x20A0002
                 ; .FEND
                 ;
                 ;/*
                 ; * read one bit
                 ; */
                 ;uint8_t ds18b20_readbit(void){
                 ; 0001 0033 uint8_t ds18b20_readbit(void){
                 _ds18b20_readbit:
                 ; .FSTART _ds18b20_readbit
                 ; 0001 0034 	uint8_t _bit=0;
                 ; 0001 0035 
                 ; 0001 0036 	//low for 1uS
                 ; 0001 0037 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
0000b5 931a      	ST   -Y,R17
                 ;	_bit -> R17
0000b6 e010      	LDI  R17,0
0000b7 d27a      	RCALL SUBOPT_0x0
                 ; 0001 0038 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
                 ; 0001 0039 	delay_us(1);
                 ; 0001 003A 
                 ; 0001 003B 	//release line and wait for 14uS
                 ; 0001 003C 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
0000b8 98b8      	CBI  0x17,0
                 ; 0001 003D 	delay_us(14);
                +
0000b9 e183     +LDI R24 , LOW ( 19 )
                +__DELAY_USB_LOOP :
0000ba 958a     +DEC R24
0000bb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 19
                 ; 0001 003E 
                 ; 0001 003F 	//read the value
                 ; 0001 0040 	if(DS18B20_PIN & (1<<DS18B20_DQ))
0000bc 99b0      	SBIC 0x16,0
                 ; 0001 0041 		_bit=1;
0000bd e011      	LDI  R17,LOW(1)
                 ; 0001 0042 
                 ; 0001 0043 	//wait 45uS and return read value
                 ; 0001 0044 	delay_us(45);
                +
0000be e38c     +LDI R24 , LOW ( 60 )
                +__DELAY_USB_LOOP :
0000bf 958a     +DEC R24
0000c0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 60
                 ; 0001 0045 	return _bit;
                 _0x20A0006:
0000c1 2fe1      	MOV  R30,R17
0000c2 9119      	LD   R17,Y+
0000c3 9508      	RET
                 ; 0001 0046 }
                 ; .FEND
                 ;
                 ;/*
                 ; * write one byte
                 ; */
                 ;void ds18b20_writebyte(uint8_t _byte){
                 ; 0001 004B void ds18b20_writebyte(uint8_t _byte){
                 _ds18b20_writebyte:
                 ; .FSTART _ds18b20_writebyte
                 ; 0001 004C 	uint8_t i=8;
                 ; 0001 004D 	while(i--){
0000c4 93aa      	ST   -Y,R26
0000c5 931a      	ST   -Y,R17
                 ;	_byte -> Y+1
                 ;	i -> R17
0000c6 e018      	LDI  R17,8
                 _0x20005:
0000c7 2fe1      	MOV  R30,R17
0000c8 5011      	SUBI R17,1
0000c9 30e0      	CPI  R30,0
0000ca f041      	BREQ _0x20007
                 ; 0001 004E 		ds18b20_writebit(_byte&1);
0000cb 81e9      	LDD  R30,Y+1
0000cc 70e1      	ANDI R30,LOW(0x1)
0000cd 2fae      	MOV  R26,R30
0000ce dfda      	RCALL _ds18b20_writebit
                 ; 0001 004F 		_byte >>= 1;
0000cf 81e9      	LDD  R30,Y+1
0000d0 95e6      	LSR  R30
0000d1 83e9      	STD  Y+1,R30
                 ; 0001 0050 	}
0000d2 cff4      	RJMP _0x20005
                 _0x20007:
                 ; 0001 0051 }
0000d3 8118      	LDD  R17,Y+0
0000d4 9622      	ADIW R28,2
0000d5 9508      	RET
                 ; .FEND
                 ;
                 ;/*
                 ; * read one byte
                 ; */
                 ;uint8_t ds18b20_readbyte(void){
                 ; 0001 0056 uint8_t ds18b20_readbyte(void){
                 _ds18b20_readbyte:
                 ; .FSTART _ds18b20_readbyte
                 ; 0001 0057 	uint8_t i=8, n=0;
                 ; 0001 0058 	while(i--){
0000d6 931a      	ST   -Y,R17
0000d7 930a      	ST   -Y,R16
                 ;	i -> R17
                 ;	n -> R16
0000d8 e018      	LDI  R17,8
0000d9 e000      	LDI  R16,0
                 _0x20008:
0000da 2fe1      	MOV  R30,R17
0000db 5011      	SUBI R17,1
0000dc 30e0      	CPI  R30,0
0000dd f039      	BREQ _0x2000A
                 ; 0001 0059 		n >>= 1;
0000de 9506      	LSR  R16
                 ; 0001 005A 		n |= (ds18b20_readbit()<<7);
0000df dfd5      	RCALL _ds18b20_readbit
0000e0 95e7      	ROR  R30
0000e1 e0e0      	LDI  R30,0
0000e2 95e7      	ROR  R30
0000e3 2b0e      	OR   R16,R30
                 ; 0001 005B 	}
0000e4 cff5      	RJMP _0x20008
                 _0x2000A:
                 ; 0001 005C 	return n;
0000e5 2fe0      	MOV  R30,R16
0000e6 9109      	LD   R16,Y+
0000e7 9119      	LD   R17,Y+
0000e8 9508      	RET
                 ; 0001 005D }
                 ; .FEND
                 ;
                 ;/*
                 ; * get temperature in celsius
                 ; */
                 ;double ds18b20_gettemp(void) {
                 ; 0001 0062 double ds18b20_gettemp(void) {
                 _ds18b20_gettemp:
                 ; .FSTART _ds18b20_gettemp
                 ; 0001 0063 	uint8_t temperature[2];
                 ; 0001 0064 	int8_t digit;
                 ; 0001 0065 	uint16_t decimal;
                 ; 0001 0066 	double retd = 0;
                 ; 0001 0067 
                 ; 0001 0068 	ds18b20_reset(); //reset
0000e9 9726      	SBIW R28,6
0000ea d24d      	RCALL SUBOPT_0x1
0000eb d2a5      	RCALL __SAVELOCR4
                 ;	temperature -> Y+8
                 ;	digit -> R17
                 ;	decimal -> R18,R19
                 ;	retd -> Y+4
0000ec dfa9      	RCALL _ds18b20_reset
                 ; 0001 0069 	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
0000ed ecac      	LDI  R26,LOW(204)
0000ee dfd5      	RCALL _ds18b20_writebyte
                 ; 0001 006A 	ds18b20_writebyte(DS18B20_CMD_CONVERTTEMP); //start temperature conversion
0000ef e4a4      	LDI  R26,LOW(68)
0000f0 dfd3      	RCALL _ds18b20_writebyte
                 ; 0001 006B 
                 ; 0001 006C 	while(!ds18b20_readbit()); //wait until conversion is complete
                 _0x2000B:
0000f1 dfc3      	RCALL _ds18b20_readbit
0000f2 30e0      	CPI  R30,0
0000f3 f3e9      	BREQ _0x2000B
                 ; 0001 006D 
                 ; 0001 006E 	ds18b20_reset(); //reset
0000f4 dfa1      	RCALL _ds18b20_reset
                 ; 0001 006F 	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
0000f5 ecac      	LDI  R26,LOW(204)
0000f6 dfcd      	RCALL _ds18b20_writebyte
                 ; 0001 0070 	ds18b20_writebyte(DS18B20_CMD_RSCRATCHPAD); //read scratchpad
0000f7 ebae      	LDI  R26,LOW(190)
0000f8 dfcb      	RCALL _ds18b20_writebyte
                 ; 0001 0071 
                 ; 0001 0072 	//read 2 byte from scratchpad
                 ; 0001 0073 	temperature[0] = ds18b20_readbyte();
0000f9 dfdc      	RCALL _ds18b20_readbyte
0000fa 87e8      	STD  Y+8,R30
                 ; 0001 0074 	temperature[1] = ds18b20_readbyte();
0000fb dfda      	RCALL _ds18b20_readbyte
0000fc 87e9      	STD  Y+9,R30
                 ; 0001 0075 
                 ; 0001 0076 	ds18b20_reset(); //reset
0000fd df98      	RCALL _ds18b20_reset
                 ; 0001 0077 
                 ; 0001 0078 	//store temperature integer digits
                 ; 0001 0079 	digit = temperature[0]>>4;
0000fe 85e8      	LDD  R30,Y+8
0000ff 95e2      	SWAP R30
000100 70ef      	ANDI R30,0xF
000101 2f1e      	MOV  R17,R30
                 ; 0001 007A 	digit |= (temperature[1]&0x7)<<4;
000102 85e9      	LDD  R30,Y+9
000103 70e7      	ANDI R30,LOW(0x7)
000104 95e2      	SWAP R30
000105 7fe0      	ANDI R30,0xF0
000106 2b1e      	OR   R17,R30
                 ; 0001 007B 
                 ; 0001 007C 	//store temperature decimal digits
                 ; 0001 007D 	decimal = temperature[0]&0xf;
000107 85e8      	LDD  R30,Y+8
000108 e0f0      	LDI  R31,0
000109 70ef      	ANDI R30,LOW(0xF)
00010a 70f0      	ANDI R31,HIGH(0xF)
00010b 019f      	MOVW R18,R30
                 ; 0001 007E 	decimal *= DS18B20_DECIMALSTEPS;
00010c e7a1      	LDI  R26,LOW(625)
00010d e0b2      	LDI  R27,HIGH(625)
00010e d2b5      	RCALL __MULW12U
00010f 019f      	MOVW R18,R30
                 ; 0001 007F 
                 ; 0001 0080 	//compose the double temperature value and return it
                 ; 0001 0081 	retd = digit + decimal * 0.0001;
000110 2fe1      	MOV  R30,R17
000111 e0f0      	LDI  R31,0
000112 fde7      	SBRC R30,7
000113 efff      	SER  R31
000114 93ff      	PUSH R31
000115 93ef      	PUSH R30
000116 01f9      	MOVW R30,R18
000117 2766      	CLR  R22
000118 2777      	CLR  R23
000119 d36d      	RCALL __CDF1
                +
00011a e1a7     +LDI R26 , LOW ( 0x38D1B717 )
00011b ebb7     +LDI R27 , HIGH ( 0x38D1B717 )
00011c ed81     +LDI R24 , BYTE3 ( 0x38D1B717 )
00011d e398     +LDI R25 , BYTE4 ( 0x38D1B717 )
                 	__GETD2N 0x38D1B717
00011e d3ea      	RCALL __MULF12
00011f 91af      	POP  R26
000120 91bf      	POP  R27
000121 d293      	RCALL __CWD2
000122 d2e4      	RCALL __CDF2
000123 d396      	RCALL __ADDF12
                +
000124 83ec     +STD Y + 4 , R30
000125 83fd     +STD Y + 4 + 1 , R31
000126 836e     +STD Y + 4 + 2 , R22
000127 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0001 0082 
                 ; 0001 0083 	return retd;
000128 d26f      	RCALL __LOADLOCR4
000129 962a      	ADIW R28,10
00012a 9508      	RET
                 ; 0001 0084 }
                 ; .FEND
                 ;#include <myds1307rtc.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;//Khoi dong TWI
                 ;unsigned char registry_ds1307[7]; // mang de luu tam cac gia tri doc duoc tu thanh ghi cua ds1307
                 ;
                 ;void TWI_Init(void) {
                 ; 0002 0006 void TWI_Init(void) {
                 
                 	.CSEG
                 ; 0002 0007     TWSR = 0x00; //Prescaler=1
                 ; 0002 0008     TWBR = _100K;
                 ; 0002 0009     TWCR = (1 << TWINT) | (1 << TWEN);
                 ; 0002 000A }
                 ;
                 ;///chon dia chi thanh ghi can thao tac, dummy write
                 ;//Addr: dia thi thanh ghi can ghi
                 ;
                 ;unsigned char TWI_DS1307_wadr(unsigned char Addr) {
                 ; 0002 000F unsigned char TWI_DS1307_wadr(unsigned char Addr) {
                 ; 0002 0010 
                 ; 0002 0011     TWCR = TWI_START; //goi START condition
                 ;	Addr -> Y+0
                 ; 0002 0012     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 0013     if ((TWSR & 0xF8) != 0x08) return TWSR; //neu goi Start co loi thi thoat
                 ; 0002 0014 
                 ; 0002 0015     TWDR = (DS1307_SLA << 1) + TWI_W; //dia chi DS va bit W
                 ; 0002 0016     TWCR = TWI_Clear_TWINT; //xoa TWINT, bat dau goi SLA
                 ; 0002 0017     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 0018     if ((TWSR & 0xF8) != 0x18) return TWSR; //device address send error, escape anyway
                 ; 0002 0019 
                 ; 0002 001A     TWDR = Addr; //goi dia chi thanh ghi can ghi vao
                 ; 0002 001B     TWCR = TWI_Clear_TWINT; //start send address by cleaning TWINT
                 ; 0002 001C     while ((TWCR & 0x80) == 0x00); //check and wait for TWINT bit=1
                 ; 0002 001D     if ((TWSR & 0xF8) != 0x28) return TWSR; //neu du lieu goi ko thanh cong thi thoat
                 ; 0002 001E 
                 ; 0002 001F     TWCR = TWI_STOP; //STOP condition
                 ; 0002 0020     return 0;
                 ; 0002 0021 }
                 ;
                 ;//ghi 1 mang dat vao DS
                 ;//Addr: dia thi thanh ghi can ghi
                 ;//Data[]: mang du lieu
                 ;//len: so luong byte can ghi
                 ;
                 ;unsigned char TWI_DS1307_wblock(unsigned char Addr, unsigned char Data[], unsigned char len) {
                 ; 0002 0028 unsigned char TWI_DS1307_wblock(unsigned char Addr, unsigned char Data[], unsigned char len) {
                 ; 0002 0029     unsigned char i = 0;
                 ; 0002 002A     TWCR = TWI_START; //goi START condition
                 ;	Addr -> Y+4
                 ;	Data -> Y+2
                 ;	len -> Y+1
                 ;	i -> R17
                 ; 0002 002B     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 002C     if ((TWSR & 0xF8) != 0x08) return TWSR; //neu goi Start co loi thi thoat
                 ; 0002 002D 
                 ; 0002 002E     TWDR = (DS1307_SLA << 1) + TWI_W; //dia chi DS va bit W
                 ; 0002 002F     TWCR = TWI_Clear_TWINT; //xoa TWINT de bat dau goi
                 ; 0002 0030     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 0031     if ((TWSR & 0xF8) != 0x18) return TWSR; //neu co loi truyen SLA, thoat
                 ; 0002 0032 
                 ; 0002 0033     TWDR = Addr; //goi dia chi thanh ghi can ghi vao
                 ; 0002 0034     TWCR = TWI_Clear_TWINT; //xoa TWINT de bat dau goi
                 ; 0002 0035     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 0036     if ((TWSR & 0xF8) != 0x28) return TWSR;
                 ; 0002 0037 
                 ; 0002 0038     for (i = 0; i < len; i++) {
                 ; 0002 0039         TWDR = Data[i]; //chuan bi xuat du lieu
                 ; 0002 003A         TWCR = TWI_Clear_TWINT; //xoa TWINT, bat dau send
                 ; 0002 003B         while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 003C         if ((TWSR & 0xF8) != 0x28) return TWSR; //neu status ko phai la 0x28 thi return
                 ; 0002 003D     }
                 ; 0002 003E 
                 ; 0002 003F     TWCR = TWI_STOP; //STOP condition
                 ; 0002 0040     return 0;
                 ; 0002 0041 }
                 ;
                 ;//doc 1 mang tu DS
                 ;
                 ;unsigned char TWI_DS1307_rblock(unsigned char Data[], unsigned char len) {
                 ; 0002 0045 unsigned char TWI_DS1307_rblock(unsigned char Data[], unsigned char len) {
                 ; 0002 0046     unsigned char i;
                 ; 0002 0047 
                 ; 0002 0048     TWCR = TWI_START; // Start--------------------------------------------------------------------
                 ;	Data -> Y+2
                 ;	len -> Y+1
                 ;	i -> R17
                 ; 0002 0049     while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x08)); //cho TWINT bit=1 va goi START thanh cong
                 ; 0002 004A 
                 ; 0002 004B     TWDR = (DS1307_SLA << 1) + TWI_R; //goi dia chi SLA +READ
                 ; 0002 004C     TWCR = TWI_Clear_TWINT; //bat dau, xoa TWINT
                 ; 0002 004D     while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x40)); //cho TWINT bit=1	va goi SLA thanh cong
                 ; 0002 004E 
                 ; 0002 004F     //nhan len-1 bytes dau tien---------------------
                 ; 0002 0050     for (i = 0; i < len - 1; i++) {
                 ; 0002 0051         TWCR = TWI_Read_ACK; //xoa TWINT,se goi ACK sau khi nhan moi byte
                 ; 0002 0052         while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x50)); //cho TWINT bit=1 hoac nhan duoc ACK
                 ; 0002 0053         Data[i] = TWDR; //doc du lieu vao mang Data
                 ; 0002 0054     }
                 ; 0002 0055     //nhan byte cuoi
                 ; 0002 0056     TWCR = TWI_Clear_TWINT; //xoa TWINT de nhan byte cuoi, sau do set NOT ACK
                 ; 0002 0057     while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x58)); //cho TWIN=1 hoac trang thai not ack
                 ; 0002 0058     Data[len - 1] = TWDR;
                 ; 0002 0059 
                 ; 0002 005A     TWCR = TWI_STOP; //STOP condition
                 ; 0002 005B     return 0;
                 ; 0002 005C }
                 ;
                 ;//----------------------------------------------------------------------------
                 ;// xay dung lai cac ham ma khong dung thu vien
                 ;
                 ;// doi BCD sang thap phan va nguoc lai------------
                 ;
                 ;unsigned char BCD2Dec(unsigned char BCD) {
                 ; 0002 0063 unsigned char BCD2Dec(unsigned char BCD) {
                 ; 0002 0064     unsigned char L, H;
                 ; 0002 0065     L = BCD & 0x0F;
                 ;	BCD -> Y+2
                 ;	L -> R17
                 ;	H -> R16
                 ; 0002 0066     H = (BCD >> 4)*10;
                 ; 0002 0067     return (H + L);
                 ; 0002 0068 }
                 ;
                 ;unsigned char Dec2BCD(unsigned char Dec) {
                 ; 0002 006A unsigned char Dec2BCD(unsigned char Dec) {
                 ; 0002 006B     unsigned char L, H;
                 ; 0002 006C     L = Dec % 10;
                 ;	Dec -> Y+2
                 ;	L -> R17
                 ;	H -> R16
                 ; 0002 006D     H = (Dec / 10) << 4;
                 ; 0002 006E     return (H + L);
                 ; 0002 006F }
                 ;
                 ;Time myGetTimeFromDS1307() {
                 ; 0002 0071 Time myGetTimeFromDS1307() {
                 ; 0002 0072     Time time;
                 ; 0002 0073     time.Hour = 10;
                 ;	time -> Y+0
                 ; 0002 0074     time.Minute = 15;
                 ; 0002 0075     //    return time;
                 ; 0002 0076     TWI_DS1307_wadr(0x00); //set dia chi ve 0
                 ; 0002 0077     delay_ms(1); //cho DS1307 xu li
                 ; 0002 0078     TWI_DS1307_rblock(registry_ds1307, 7); //doc ca khoi thoi gian (7 bytes)
                 ; 0002 0079 
                 ; 0002 007A     time.Second = BCD2Dec(registry_ds1307[0] & 0x7F);
                 ; 0002 007B     time.Minute = BCD2Dec(registry_ds1307[1]);
                 ; 0002 007C     // mode lay tu bit 6 ( =0 la 24h; =1 la 12h)
                 ; 0002 007D     // mode = 0 la 24h, =1 la 12h
                 ; 0002 007E     time.Mode = ((registry_ds1307[2] & 0x40) != 0);
                 ; 0002 007F     // AM hay PM lay tu bit 5
                 ; 0002 0080     time.AP = ((registry_ds1307[2] & 0x20) != 0);
                 ; 0002 0081     if (time.Mode != 0) time.Hour = BCD2Dec(registry_ds1307[2] & 0x1F); //mode 12h
                 ; 0002 0082     else time.Hour = BCD2Dec(registry_ds1307[2] & 0x3F); //mode 24h
                 ; 0002 0083     time.Date = BCD2Dec(registry_ds1307[4]);
                 ; 0002 0084     time.Month = BCD2Dec(registry_ds1307[5]);
                 ; 0002 0085     time.Year = BCD2Dec(registry_ds1307[6]);
                 ; 0002 0086     return time;
                 ; 0002 0087 }
                 ;
                 ;void mySetTimeForDS1307(Time * t) {
                 ; 0002 0089 void mySetTimeForDS1307(Time * t) {
                 ; 0002 008A     registry_ds1307[0] = Dec2BCD(t->Second);
                 ;	*t -> Y+0
                 ; 0002 008B 
                 ; 0002 008C     registry_ds1307[1] = Dec2BCD(t->Minute);
                 ; 0002 008D     if (t->Mode != 0) // che do hien thi 12h
                 ; 0002 008E         // bit 7 = 0; bit 6 =1;(che do 12h), 0: che do 24h
                 ; 0002 008F         //; bit 5 =0 -> AM, 1->PM
                 ; 0002 0090         //5bit con lai la ma BCD cua gio
                 ; 0002 0091         registry_ds1307[2] = Dec2BCD(t->Hour) | (t->Mode << 6) | (t->AP << 5); //mode 12h
                 ; 0002 0092 
                 ; 0002 0093     else
                 ; 0002 0094         // bit 7 = 0; bit 6 =0;(che do 24h) ;
                 ; 0002 0095         registry_ds1307[2] = Dec2BCD(t->Hour); //mode 24h
                 ; 0002 0096 
                 ; 0002 0097     registry_ds1307[4] = Dec2BCD(t->Date);
                 ; 0002 0098     registry_ds1307[5] = Dec2BCD(t->Month);
                 ; 0002 0099     registry_ds1307[6] = Dec2BCD(t->Year);
                 ; 0002 009A 
                 ; 0002 009B 
                 ; 0002 009C     TWI_DS1307_wblock(0x00, registry_ds1307, 7); //doc ca khoi thoi gian (7 bytes)
                 ; 0002 009D     delay_ms(1); //cho DS1307 xu li
                 ; 0002 009E }
                 ;// ---------------------------------------------------------------------------
                 ;// I2C (TWI) ROUTINES
                 ;//
                 ;// On the AVRmega series, PA4 is the data line (SDA) and PA5 is the clock (SCL
                 ;// The standard clock rate is 100 KHz, and set by I2C_Init. It depends on the AVR osc. freq.
                 ;#include <myds1307rtcver2.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;
                 ;
                 ;//void DS1307_GetTime(byte *hours, byte *minutes, byte *seconds)
                 ;//// returns hours, minutes, and seconds in BCD format
                 ;//{
                 ;//    *hours = I2C_ReadRegister(DS1307, HOURS_REGISTER);
                 ;//    *minutes = I2C_ReadRegister(DS1307, MINUTES_REGISTER);
                 ;//    *seconds = I2C_ReadRegister(DS1307, SECONDS_REGISTER);
                 ;//    if (*hours & 0x40) // 12hr mode:
                 ;//        *hours &= 0x1F; // use bottom 5 bits (pm bit = temp & 0x20)
                 ;//    else *hours &= 0x3F; // 24hr mode: use bottom 6 bits
                 ;//}
                 ;//
                 ;//void DS1307_GetDate(byte *months, byte *days, byte *years)
                 ;//// returns months, days, and years in BCD format
                 ;//{
                 ;//    *months = I2C_ReadRegister(DS1307, MONTHS_REGISTER);
                 ;//    *days = I2C_ReadRegister(DS1307, DAYS_REGISTER);
                 ;//    *years = I2C_ReadRegister(DS1307, YEARS_REGISTER);
                 ;//}
                 ;//
                 ;//void SetTimeDate()
                 ;//// simple, hard-coded way to set the date.
                 ;//{
                 ;//    I2C_WriteRegister(DS1307, MONTHS_REGISTER, 0x08);
                 ;//    I2C_WriteRegister(DS1307, DAYS_REGISTER, 0x31);
                 ;//    I2C_WriteRegister(DS1307, YEARS_REGISTER, 0x13);
                 ;//    I2C_WriteRegister(DS1307, HOURS_REGISTER, 0x08 + 0x40); // add 0x40 for PM
                 ;//    I2C_WriteRegister(DS1307, MINUTES_REGISTER, 0x51);
                 ;//    I2C_WriteRegister(DS1307, SECONDS_REGISTER, 0x00);
                 ;//}
                 ;
                 ;
                 ;unsigned char BCD2Decver2(unsigned char BCD) {
                 ; 0003 002A unsigned char BCD2Decver2(unsigned char BCD) {
                 
                 	.CSEG
                 _BCD2Decver2:
                 ; .FSTART _BCD2Decver2
                 ; 0003 002B     unsigned char L, H;
                 ; 0003 002C     L = BCD & 0x0F;
00012b 93aa      	ST   -Y,R26
00012c 931a      	ST   -Y,R17
00012d 930a      	ST   -Y,R16
                 ;	BCD -> Y+2
                 ;	L -> R17
                 ;	H -> R16
00012e 81ea      	LDD  R30,Y+2
00012f 70ef      	ANDI R30,LOW(0xF)
000130 2f1e      	MOV  R17,R30
                 ; 0003 002D     H = (BCD >> 4)*10;
000131 81ea      	LDD  R30,Y+2
000132 95e2      	SWAP R30
000133 70ef      	ANDI R30,0xF
000134 e0aa      	LDI  R26,LOW(10)
000135 02ea      	MULS R30,R26
000136 2d00      	MOV  R16,R0
                 ; 0003 002E     return (H + L);
000137 2fe1      	MOV  R30,R17
000138 0fe0      	ADD  R30,R16
000139 940c 031e 	JMP  _0x20A0003
                 ; 0003 002F }
                 ; .FEND
                 ;
                 ;unsigned char Dec2BCDver2(unsigned char Dec) {
                 ; 0003 0031 unsigned char Dec2BCDver2(unsigned char Dec) {
                 ; 0003 0032     unsigned char L, H;
                 ; 0003 0033     L = Dec % 10;
                 ;	Dec -> Y+2
                 ;	L -> R17
                 ;	H -> R16
                 ; 0003 0034     H = (Dec / 10) << 4;
                 ; 0003 0035     return (H + L);
                 ; 0003 0036 }
                 ;
                 ;Time myGetTimeFromDS1307ver2() {
                 ; 0003 0038 Time myGetTimeFromDS1307ver2() {
                 _myGetTimeFromDS1307ver2:
                 ; .FSTART _myGetTimeFromDS1307ver2
                 ; 0003 0039     Time time;
                 ; 0003 003A     time.Hour = 10;
00013b 9762      	SBIW R28,18
                 ;	time -> Y+0
00013c e0ea      	LDI  R30,LOW(10)
00013d 83ea      	STD  Y+2,R30
                 ; 0003 003B     time.Minute = 15;
00013e e0ef      	LDI  R30,LOW(15)
00013f 83e9      	STD  Y+1,R30
                 ; 0003 003C     //    return time;
                 ; 0003 003D 
                 ; 0003 003E     time.Second = BCD2Decver2(I2C_ReadRegister(DS1307, SECONDS_REGISTER) & 0x7F);
000140 ede0      	LDI  R30,LOW(208)
000141 93ea      	ST   -Y,R30
000142 e0a0      	LDI  R26,LOW(0)
000143 d071      	RCALL _I2C_ReadRegister
000144 77ef      	ANDI R30,0x7F
000145 2fae      	MOV  R26,R30
000146 dfe4      	RCALL _BCD2Decver2
000147 83e8      	ST   Y,R30
                 ; 0003 003F     time.Minute = BCD2Decver2(I2C_ReadRegister(DS1307, MINUTES_REGISTER));
000148 ede0      	LDI  R30,LOW(208)
000149 93ea      	ST   -Y,R30
00014a e0a1      	LDI  R26,LOW(1)
00014b d069      	RCALL _I2C_ReadRegister
00014c 2fae      	MOV  R26,R30
00014d dfdd      	RCALL _BCD2Decver2
00014e 83e9      	STD  Y+1,R30
                 ; 0003 0040     // mode lay tu bit 6 ( =0 la 24h; =1 la 12h)
                 ; 0003 0041     // mode = 0 la 24h, =1 la 12h
                 ; 0003 0042     time.Mode = ((I2C_ReadRegister(DS1307, HOURS_REGISTER) & 0x40) != 0);
00014f d1ee      	RCALL SUBOPT_0x2
000150 74e0      	ANDI R30,LOW(0x40)
000151 e0a0      	LDI  R26,LOW(0)
000152 d26c      	RCALL __NEB12
000153 83ef      	STD  Y+7,R30
                 ; 0003 0043     // AM hay PM lay tu bit 5
                 ; 0003 0044     time.AP = ((I2C_ReadRegister(DS1307, HOURS_REGISTER) & 0x20) != 0);
000154 d1e9      	RCALL SUBOPT_0x2
000155 72e0      	ANDI R30,LOW(0x20)
000156 e0a0      	LDI  R26,LOW(0)
000157 d267      	RCALL __NEB12
000158 87e8      	STD  Y+8,R30
                 ; 0003 0045     if (time.Mode != 0) time.Hour = BCD2Decver2(I2C_ReadRegister(DS1307, HOURS_REGISTER) & 0x1F); //mode 12h
000159 81ef      	LDD  R30,Y+7
00015a 30e0      	CPI  R30,0
00015b f019      	BREQ _0x60003
00015c d1e1      	RCALL SUBOPT_0x2
00015d 71ef      	ANDI R30,LOW(0x1F)
00015e c002      	RJMP _0x60007
                 ; 0003 0046     else time.Hour = BCD2Decver2(I2C_ReadRegister(DS1307, HOURS_REGISTER) & 0x3F); //mode 24h
                 _0x60003:
00015f d1de      	RCALL SUBOPT_0x2
000160 73ef      	ANDI R30,LOW(0x3F)
                 _0x60007:
000161 2fae      	MOV  R26,R30
000162 dfc8      	RCALL _BCD2Decver2
000163 83ea      	STD  Y+2,R30
                 ; 0003 0047     time.Day = BCD2Decver2(I2C_ReadRegister(DS1307, DAYOFWK_REGISTER));
000164 ede0      	LDI  R30,LOW(208)
000165 93ea      	ST   -Y,R30
000166 e0a3      	LDI  R26,LOW(3)
000167 d04d      	RCALL _I2C_ReadRegister
000168 2fae      	MOV  R26,R30
000169 dfc1      	RCALL _BCD2Decver2
00016a 83eb      	STD  Y+3,R30
                 ; 0003 0048     time.Date = BCD2Decver2(I2C_ReadRegister(DS1307, DAYS_REGISTER));
00016b ede0      	LDI  R30,LOW(208)
00016c 93ea      	ST   -Y,R30
00016d e0a4      	LDI  R26,LOW(4)
00016e d046      	RCALL _I2C_ReadRegister
00016f 2fae      	MOV  R26,R30
000170 dfba      	RCALL _BCD2Decver2
000171 83ec      	STD  Y+4,R30
                 ; 0003 0049     time.Month = BCD2Decver2(I2C_ReadRegister(DS1307, MONTHS_REGISTER));
000172 ede0      	LDI  R30,LOW(208)
000173 93ea      	ST   -Y,R30
000174 e0a5      	LDI  R26,LOW(5)
000175 d03f      	RCALL _I2C_ReadRegister
000176 2fae      	MOV  R26,R30
000177 dfb3      	RCALL _BCD2Decver2
000178 83ed      	STD  Y+5,R30
                 ; 0003 004A     time.Year = BCD2Decver2(I2C_ReadRegister(DS1307, YEARS_REGISTER));
000179 ede0      	LDI  R30,LOW(208)
00017a 93ea      	ST   -Y,R30
00017b e0a6      	LDI  R26,LOW(6)
00017c d038      	RCALL _I2C_ReadRegister
00017d 2fae      	MOV  R26,R30
00017e dfac      	RCALL _BCD2Decver2
00017f 83ee      	STD  Y+6,R30
                 ; 0003 004B     return time;
000180 01fe      	MOVW R30,R28
000181 01de      	MOVW R26,R28
000182 9619      	ADIW R26,9
000183 e089      	LDI  R24,9
000184 d292      	RCALL __COPYMML
000185 01fe      	MOVW R30,R28
000186 9639      	ADIW R30,9
000187 e089      	LDI  R24,9
000188 b61f      	IN   R1,SREG
000189 94f8      	CLI
00018a 9662      	ADIW R28,18
00018b 9508      	RET
                 ; 0003 004C }
                 ; .FEND
                 ;
                 ;void mySetTimeForDS1307ver2(Time * t) {
                 ; 0003 004E void mySetTimeForDS1307ver2(Time * t) {
                 ; 0003 004F     I2C_WriteRegister(DS1307, SECONDS_REGISTER, Dec2BCDver2(t->Second));
                 ;	*t -> Y+0
                 ; 0003 0050 
                 ; 0003 0051     I2C_WriteRegister(DS1307, MINUTES_REGISTER,  Dec2BCDver2(t->Minute));
                 ; 0003 0052     if (t->Mode != 0) // che do hien thi 12h
                 ; 0003 0053         // bit 7 = 0; bit 6 =1;(che do 12h), 0: che do 24h
                 ; 0003 0054         //; bit 5 =0 -> AM, 1->PM
                 ; 0003 0055         //5bit con lai la ma BCD cua gio
                 ; 0003 0056         I2C_WriteRegister(DS1307, HOURS_REGISTER, Dec2BCDver2(t->Hour) | (t->Mode << 6) | (t->AP << 5)); //mode 12h
                 ; 0003 0057 
                 ; 0003 0058     else
                 ; 0003 0059         // bit 7 = 0; bit 6 =0;(che do 24h) ;
                 ; 0003 005A         I2C_WriteRegister(DS1307, HOURS_REGISTER, Dec2BCDver2(t->Hour)); //mode 24h
                 ; 0003 005B 
                 ; 0003 005C     I2C_WriteRegister(DS1307, DAYOFWK_REGISTER, Dec2BCDver2(t->Day));
                 ; 0003 005D     I2C_WriteRegister(DS1307, DAYS_REGISTER, Dec2BCDver2(t->Date));
                 ; 0003 005E     I2C_WriteRegister(DS1307, MONTHS_REGISTER, Dec2BCDver2(t->Month));
                 ; 0003 005F     I2C_WriteRegister(DS1307, YEARS_REGISTER, Dec2BCDver2(t->Year));
                 ; 0003 0060 }
                 ;#include <myi2c.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void I2C_Init()
                 ; 0004 0004 // port mac dinh SCL va SDA cua atmega
                 ; 0004 0005 // at 16 MHz, the SCL frequency will be 16/(16+2(TWBR)), assuming prescalar of 0.
                 ; 0004 0006 // so for 100KHz SCL, TWBR = ((F_CPU/F_SCL)-16)/2 = ((16/0.1)-16)/2 = 144/2 = 72.
                 ; 0004 0007 {
                 
                 	.CSEG
                 _I2C_Init:
                 ; .FSTART _I2C_Init
                 ; 0004 0008     TWSR = 0; // set prescalar to zero
00018c e0e0      	LDI  R30,LOW(0)
00018d b9e1      	OUT  0x1,R30
                 ; 0004 0009     TWBR = ((F_CPU / F_SCL) - 16) / 2; // set SCL frequency in TWI bit register
00018e e0ec      	LDI  R30,LOW(12)
00018f b9e0      	OUT  0x0,R30
                 ; 0004 000A }
000190 9508      	RET
                 ; .FEND
                 ;
                 ;byte I2C_Detect(byte addr)
                 ; 0004 000D // look for device at specified address; return 1=found, 0=not found
                 ; 0004 000E {
                 _I2C_Detect:
                 ; .FSTART _I2C_Detect
                 ; 0004 000F     TWCR = TW_START; // send start condition
000191 93aa      	ST   -Y,R26
                 ;	addr -> Y+0
000192 eae4      	LDI  R30,LOW(164)
000193 bfe6      	OUT  0x36,R30
                 ; 0004 0010     while (!TW_READY); // wait
                 _0x80003:
000194 b7e6      	IN   R30,0x36
000195 78e0      	ANDI R30,LOW(0x80)
000196 f3e9      	BREQ _0x80003
                 ; 0004 0011     TWDR = addr; // load device's bus address
000197 d1aa      	RCALL SUBOPT_0x3
                 ; 0004 0012     TWCR = TW_SEND; // and send it
                 ; 0004 0013     while (!TW_READY); // wait
                 _0x80006:
000198 b7e6      	IN   R30,0x36
000199 78e0      	ANDI R30,LOW(0x80)
00019a f3e9      	BREQ _0x80006
                 ; 0004 0014     return (TW_STATUS == 0x18); // return 1 if found; 0 otherwise
00019b b1e1      	IN   R30,0x1
00019c 7fe8      	ANDI R30,LOW(0xF8)
00019d e1a8      	LDI  R26,LOW(24)
00019e d21b      	RCALL __EQB12
00019f c190      	RJMP _0x20A0002
                 ; 0004 0015 }
                 ; .FEND
                 ;
                 ;byte I2C_FindDevice(byte start)
                 ; 0004 0018 // returns with address of first device found; 0=not found
                 ; 0004 0019 {
                 ; 0004 001A     byte addr;
                 ; 0004 001B     for ( addr = start; addr < 0xFF; addr++) // search all 256 addresses
                 ;	start -> Y+1
                 ;	addr -> R17
                 ; 0004 001C     {
                 ; 0004 001D         if (I2C_Detect(addr)) // I2C detected?
                 ; 0004 001E             return addr; // leave as soon as one is found
                 ; 0004 001F     }
                 ; 0004 0020     return 0; // none detected, so return 0.
                 ; 0004 0021 }
                 ;
                 ;void I2C_Start(byte slaveAddr) {
                 ; 0004 0023 void I2C_Start(byte slaveAddr) {
                 _I2C_Start:
                 ; .FSTART _I2C_Start
                 ; 0004 0024     I2C_Detect(slaveAddr);
0001a0 93aa      	ST   -Y,R26
                 ;	slaveAddr -> Y+0
0001a1 81a8      	LD   R26,Y
0001a2 dfee      	RCALL _I2C_Detect
                 ; 0004 0025 }
0001a3 c18c      	RJMP _0x20A0002
                 ; .FEND
                 ;
                 ;byte I2C_Write(byte data) // sends a data byte to slave
                 ; 0004 0028 {
                 _I2C_Write:
                 ; .FSTART _I2C_Write
                 ; 0004 0029     TWDR = data; // load data to be sent
0001a4 93aa      	ST   -Y,R26
                 ;	data -> Y+0
0001a5 d19c      	RCALL SUBOPT_0x3
                 ; 0004 002A     TWCR = TW_SEND; // and send it
                 ; 0004 002B     while (!TW_READY); // wait
                 _0x8000D:
0001a6 b7e6      	IN   R30,0x36
0001a7 78e0      	ANDI R30,LOW(0x80)
0001a8 f3e9      	BREQ _0x8000D
                 ; 0004 002C     return (TW_STATUS != 0x28);
0001a9 b1e1      	IN   R30,0x1
0001aa 7fe8      	ANDI R30,LOW(0xF8)
0001ab e2a8      	LDI  R26,LOW(40)
0001ac d212      	RCALL __NEB12
0001ad c182      	RJMP _0x20A0002
                 ; 0004 002D }
                 ; .FEND
                 ;
                 ;byte I2C_ReadACK() // reads a data byte from slave
                 ; 0004 0030 {
                 ; 0004 0031     TWCR = TW_ACK; // ack = will read more data
                 ; 0004 0032     while (!TW_READY); // wait
                 ; 0004 0033     return TWDR;
                 ; 0004 0034     //return (TW_STATUS!=0x28);
                 ; 0004 0035 }
                 ;
                 ;byte I2C_ReadNACK() // reads a data byte from slave
                 ; 0004 0038 {
                 _I2C_ReadNACK:
                 ; .FSTART _I2C_ReadNACK
                 ; 0004 0039     TWCR = TW_NACK; // nack = not reading more data
0001ae e8e4      	LDI  R30,LOW(132)
0001af bfe6      	OUT  0x36,R30
                 ; 0004 003A     while (!TW_READY); // wait
                 _0x80013:
0001b0 b7e6      	IN   R30,0x36
0001b1 78e0      	ANDI R30,LOW(0x80)
0001b2 f3e9      	BREQ _0x80013
                 ; 0004 003B     return TWDR;
0001b3 b1e3      	IN   R30,0x3
0001b4 9508      	RET
                 ; 0004 003C     //return (TW_STATUS!=0x28);
                 ; 0004 003D }
                 ; .FEND
                 ;
                 ;void I2C_WriteByte(byte busAddr, byte data) {
                 ; 0004 003F void I2C_WriteByte(byte busAddr, byte data) {
                 ; 0004 0040     I2C_Start(busAddr); // send bus address
                 ;	busAddr -> Y+1
                 ;	data -> Y+0
                 ; 0004 0041     I2C_Write(data); // then send the data byte
                 ; 0004 0042     I2C_Stop();
                 ; 0004 0043 }
                 ;
                 ;void I2C_WriteRegister(byte busAddr, byte deviceRegister, byte data) {
                 ; 0004 0045 void I2C_WriteRegister(byte busAddr, byte deviceRegister, byte data) {
                 ; 0004 0046     I2C_Start(busAddr); // send bus address
                 ;	busAddr -> Y+2
                 ;	deviceRegister -> Y+1
                 ;	data -> Y+0
                 ; 0004 0047     I2C_Write(deviceRegister); // first byte = device register address
                 ; 0004 0048     I2C_Write(data); // second byte = data for device register
                 ; 0004 0049     I2C_Stop();
                 ; 0004 004A }
                 ;
                 ;byte I2C_ReadRegister(byte busAddr, byte deviceRegister) {
                 ; 0004 004C byte I2C_ReadRegister(byte busAddr, byte deviceRegister) {
                 _I2C_ReadRegister:
                 ; .FSTART _I2C_ReadRegister
                 ; 0004 004D     byte data = 0;
                 ; 0004 004E     I2C_Start(busAddr); // send device address
0001b5 93aa      	ST   -Y,R26
0001b6 931a      	ST   -Y,R17
                 ;	busAddr -> Y+2
                 ;	deviceRegister -> Y+1
                 ;	data -> R17
0001b7 e010      	LDI  R17,0
0001b8 81aa      	LDD  R26,Y+2
0001b9 dfe6      	RCALL _I2C_Start
                 ; 0004 004F     I2C_Write(deviceRegister); // set register pointer
0001ba 81a9      	LDD  R26,Y+1
0001bb dfe8      	RCALL _I2C_Write
                 ; 0004 0050     I2C_Start(busAddr + READ); // restart as a read operation
0001bc 81aa      	LDD  R26,Y+2
0001bd 5faf      	SUBI R26,-LOW(1)
0001be dfe1      	RCALL _I2C_Start
                 ; 0004 0051     data = I2C_ReadNACK(); // read the register data
0001bf dfee      	RCALL _I2C_ReadNACK
0001c0 2f1e      	MOV  R17,R30
                 ; 0004 0052     I2C_Stop(); // stop
0001c1 e9e4      	LDI  R30,LOW(148)
0001c2 bfe6      	OUT  0x36,R30
                 ; 0004 0053     return data;
0001c3 2fe1      	MOV  R30,R17
0001c4 8118      	LDD  R17,Y+0
0001c5 c15a      	RJMP _0x20A0004
                 ; 0004 0054 }
                 ; .FEND
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.6 Evaluation
                 ;Automatic Program Generator
                 ;Ã¯Â¿Â½ Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 4.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ; *****************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;//#include <myds1307rtc.h>
                 ;#include <myds1307rtcver2.h>
                 ;
                 ;
                 ;//#include <myds18b20ver1.h>
                 ;#include <myds18b20ver2.h>
                 ;
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <io.h>
                 ;#include <interrupt.h>
                 ;	flags -> R17
                 
                 	.CSEG
                 ;
                 ;#define IS_MASTER 1
                 ;#define MY_ADDRESS '2'
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;#if RX_BUFFER_SIZE<256
                 ;unsigned char rx_wr_index, rx_rd_index, rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index, rx_rd_index, rx_counter;
                 ;#endif
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;// USART Receiver interrupt service routine
                 ;
                 ;
                 ;// Declare your global variables here
                 ;unsigned char ma[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
                 
                 	.DSEG
                 ;void quet(unsigned char x);
                 ;void day();
                 ;void hienthi(int x);
                 ;
                 ;void hienthinhietdo(unsigned char temp);
                 ;void hienthithoigian(unsigned char hour, unsigned char minute);
                 ;
                 ;void uart_char_tx(unsigned char chr);
                 ;void uart_address_tx(unsigned char chr);
                 ;unsigned char uart_getchar();
                 ;void getState(unsigned char);
                 ;void process_received_data();
                 ;
                 ;float temp;
                 ;unsigned char kytu = '';
                 ;unsigned char b = 2;
                 ;unsigned char received_byte = '';
                 ;unsigned char received_package[10];
                 ;int isComplete = 1;
                 ;int package_size = 0;
                 ;int slave_enable = 0;
                 ;
                 ;byte ttemp0; // first byte
                 ;byte ttemp1;
                 ;
                 ;void execute_query();
                 ;void send_confirm_to_master();
                 ;void disable_slave();
                 ;void ensable_slave();
                 ;// thuc thi cau lenh doc tu goi tin (package))
                 ;
                 ;void return_data_to_master(unsigned char d1, unsigned char d2, unsigned char d3, unsigned char d4, unsigned char d5) {
                 ; 0005 005A void return_data_to_master(unsigned char d1, unsigned char d2, unsigned char d3, unsigned char d4, unsigned char d5) {
                 
                 	.CSEG
                 _return_data_to_master:
                 ; .FSTART _return_data_to_master
                 ; 0005 005B     uart_char_tx('@');
0001c6 93aa      	ST   -Y,R26
                 ;	d1 -> Y+4
                 ;	d2 -> Y+3
                 ;	d3 -> Y+2
                 ;	d4 -> Y+1
                 ;	d5 -> Y+0
0001c7 e4a0      	LDI  R26,LOW(64)
0001c8 d17e      	RCALL SUBOPT_0x4
                 ; 0005 005C     delay_ms(100);
                 ; 0005 005D     uart_char_tx(d1); //printf("%d",d1);
0001c9 81ac      	LDD  R26,Y+4
0001ca d17c      	RCALL SUBOPT_0x4
                 ; 0005 005E     delay_ms(100);
                 ; 0005 005F     uart_char_tx(d2); //printf("%d",d2);
0001cb 81ab      	LDD  R26,Y+3
0001cc d17a      	RCALL SUBOPT_0x4
                 ; 0005 0060     delay_ms(100);
                 ; 0005 0061     uart_char_tx(d3); //printf("%d",d3);
0001cd 81aa      	LDD  R26,Y+2
0001ce d178      	RCALL SUBOPT_0x4
                 ; 0005 0062     delay_ms(100);
                 ; 0005 0063     uart_char_tx(d4); //printf("%d",d4);
0001cf 81a9      	LDD  R26,Y+1
0001d0 d176      	RCALL SUBOPT_0x4
                 ; 0005 0064     delay_ms(100);
                 ; 0005 0065     uart_char_tx(d5); //printf("%d",d5);
0001d1 81a8      	LD   R26,Y
0001d2 d174      	RCALL SUBOPT_0x4
                 ; 0005 0066     delay_ms(100);
                 ; 0005 0067     uart_char_tx('#');
0001d3 e2a3      	LDI  R26,LOW(35)
0001d4 d172      	RCALL SUBOPT_0x4
                 ; 0005 0068     delay_ms(100);
                 ; 0005 0069     disable_slave();
0001d5 d088      	RCALL _disable_slave
                 ; 0005 006A }
0001d6 c016      	RJMP _0x20A0005
                 ; .FEND
                 ;
                 ;void return_data_to_computer(unsigned char d1, unsigned char d2, unsigned char d3, unsigned char d4, unsigned char d5) {
                 ; 0005 006C void return_data_to_computer(unsigned char d1, unsigned char d2, unsigned char d3, unsigned char d4, unsigned char d5) {
                 _return_data_to_computer:
                 ; .FSTART _return_data_to_computer
                 ; 0005 006D     hienthi(111);
0001d7 93aa      	ST   -Y,R26
                 ;	d1 -> Y+4
                 ;	d2 -> Y+3
                 ;	d3 -> Y+2
                 ;	d4 -> Y+1
                 ;	d5 -> Y+0
0001d8 e6af      	LDI  R26,LOW(111)
0001d9 d171      	RCALL SUBOPT_0x5
                 ; 0005 006E     delay_ms(2000);
                 ; 0005 006F     uart_char_tx('&');
0001da e2a6      	LDI  R26,LOW(38)
0001db d149      	RCALL _uart_char_tx
                 ; 0005 0070     //delay_ms(100);
                 ; 0005 0071     // cong them 1 de tranh null, khi computer nhan duoc thi tru di 1
                 ; 0005 0072     uart_char_tx(d1 + 1);
0001dc 81ac      	LDD  R26,Y+4
0001dd 5faf      	SUBI R26,-LOW(1)
0001de d146      	RCALL _uart_char_tx
                 ; 0005 0073 //    hienthi(d1);
                 ; 0005 0074 //    delay_ms(2000);
                 ; 0005 0075     //delay_ms(100);
                 ; 0005 0076     uart_char_tx(d2 + 1);
0001df 81ab      	LDD  R26,Y+3
0001e0 5faf      	SUBI R26,-LOW(1)
0001e1 d143      	RCALL _uart_char_tx
                 ; 0005 0077 //    hienthi(d2);
                 ; 0005 0078 //    delay_ms(2000);
                 ; 0005 0079 //    delay_ms(100);
                 ; 0005 007A     uart_char_tx(d3 + 1);
0001e2 81aa      	LDD  R26,Y+2
0001e3 5faf      	SUBI R26,-LOW(1)
0001e4 d140      	RCALL _uart_char_tx
                 ; 0005 007B //    hienthi(d3);
                 ; 0005 007C //    delay_ms(2000);
                 ; 0005 007D //    delay_ms(100);
                 ; 0005 007E     uart_char_tx(d4 + 1);
0001e5 81a9      	LDD  R26,Y+1
0001e6 5faf      	SUBI R26,-LOW(1)
0001e7 d13d      	RCALL _uart_char_tx
                 ; 0005 007F //    hienthi(d4);
                 ; 0005 0080 //    delay_ms(2000);
                 ; 0005 0081     //delay_ms(100);
                 ; 0005 0082     uart_char_tx(d5 + 1);
0001e8 81a8      	LD   R26,Y
0001e9 5faf      	SUBI R26,-LOW(1)
0001ea d13a      	RCALL _uart_char_tx
                 ; 0005 0083 //    hienthi(d5);
                 ; 0005 0084 //    delay_ms(2000);
                 ; 0005 0085     //delay_ms(100);
                 ; 0005 0086     uart_char_tx('#');
0001eb e2a3      	LDI  R26,LOW(35)
0001ec d15a      	RCALL SUBOPT_0x4
                 ; 0005 0087     delay_ms(100);
                 ; 0005 0088 
                 ; 0005 0089 }
                 _0x20A0005:
0001ed 9625      	ADIW R28,5
0001ee 9508      	RET
                 ; .FEND
                 ;
                 ;void execute_query() {
                 ; 0005 008B void execute_query() {
                 _execute_query:
                 ; .FSTART _execute_query
                 ; 0005 008C     Time t;
                 ; 0005 008D 
                 ; 0005 008E     if (IS_MASTER) {
0001ef 9729      	SBIW R28,9
                 ;	t -> Y+0
                 ; 0005 008F         hienthi(package_size);
0001f0 01d6      	MOVW R26,R12
0001f1 d0f1      	RCALL _hienthi
                 ; 0005 0090         delay_ms(2000);
0001f2 eda0      	LDI  R26,LOW(2000)
0001f3 e0b7      	LDI  R27,HIGH(2000)
0001f4 d362      	RCALL _delay_ms
                 ; 0005 0091         // thuc hien cau truy van nhan duoc tren master
                 ; 0005 0092         if (package_size == 4) { // co the nhan biet bang byte dau tien khac 0
0001f5 e0e4      	LDI  R30,LOW(4)
0001f6 e0f0      	LDI  R31,HIGH(4)
0001f7 15ec      	CP   R30,R12
0001f8 05fd      	CPC  R31,R13
0001f9 f419      	BRNE _0xA0006
                 ; 0005 0093             // gui dia chi cho slave, sau do cho xac nhan tu slave
                 ; 0005 0094             //hienthi(99);delay_ms(5000);
                 ; 0005 0095             uart_address_tx(received_package[1]);
                +
0001fa 91a0 017e+LDS R26 , _received_package + ( 1 )
                 	__GETB2MN _received_package,1
0001fc d12d      	RCALL _uart_address_tx
                 ; 0005 0096 //            printf("heheh");
                 ; 0005 0097 //            temp = ds18b20_gettemp();
                 ; 0005 0098 //            printf ("%d",(int)temp);
                 ; 0005 0099 //            return_data_to_computer(0, 0, 0, (unsigned char) ((int) temp), (unsigned char) ((int) (10 * (temp - (int)  ...
                 ; 0005 009A 
                 ; 0005 009B             //            if (received_package[2] == 't') {
                 ; 0005 009C             //                //printf ("%c",a);
                 ; 0005 009D             //                temp = ds18b20_gettemp();
                 ; 0005 009E             //                uart_char_tx('T');
                 ; 0005 009F             //                printf(" Nhiet do hien tai la %d oC\n\r", (unsigned char) temp);
                 ; 0005 00A0             //
                 ; 0005 00A1             //            }
                 ; 0005 00A2             //            if (received_package[2] == 'h') {
                 ; 0005 00A3             //                t = myGetTimeFromDS1307ver2();
                 ; 0005 00A4             //                printf(" Gio hien tai la %d:%d:%d\n\r", (unsigned char) (t.Hour + t.Mode * t.AP * 12), (un ...
                 ; 0005 00A5             //
                 ; 0005 00A6             //            }
                 ; 0005 00A7 
                 ; 0005 00A8         }
                 ; 0005 00A9         if (package_size == 7) { // co the nhan biet goi tin data bang byte dau tien luon =0
                 _0xA0006:
0001fd e0e7      	LDI  R30,LOW(7)
0001fe e0f0      	LDI  R31,HIGH(7)
0001ff 15ec      	CP   R30,R12
000200 05fd      	CPC  R31,R13
000201 f541      	BRNE _0xA0007
                 ; 0005 00AA             // day la goi tin data
                 ; 0005 00AB             // nhan biet nhiet do hay thoi gian dua vao byte so 3 = 0 hay khac 0
                 ; 0005 00AC             hienthi(55);
000202 e3a7      	LDI  R26,LOW(55)
000203 d14c      	RCALL SUBOPT_0x6
                 ; 0005 00AD             delay_ms(4000);
                 ; 0005 00AE             if (received_package[2] == 0) {
                +
000204 91e0 017f+LDS R30 , _received_package + ( 2 )
                 	__GETB1MN _received_package,2
000206 30e0      	CPI  R30,0
000207 f489      	BRNE _0xA0008
                 ; 0005 00AF                 // day la goi nhiet do
                 ; 0005 00B0                 temp = received_package[4] + received_package[5] / 10;
                +
000208 9160 0181+LDS R22 , _received_package + ( 4 )
                 	__GETBRMN 22,_received_package,4
00020a 2777      	CLR  R23
                +
00020b 91a0 0182+LDS R26 , _received_package + ( 5 )
                 	__GETB2MN _received_package,5
00020d d147      	RCALL SUBOPT_0x7
00020e 0fe6      	ADD  R30,R22
00020f 1ff7      	ADC  R31,R23
000210 e7a9      	LDI  R26,LOW(_temp)
000211 e0b1      	LDI  R27,HIGH(_temp)
000212 d19d      	RCALL __CWD1
000213 d273      	RCALL __CDF1
000214 d1eb      	RCALL __PUTDP1
                 ; 0005 00B1                 return_data_to_computer(0, 0, 0, received_package[4], received_package[5]);
000215 e0e0      	LDI  R30,LOW(0)
000216 93ea      	ST   -Y,R30
000217 93ea      	ST   -Y,R30
000218 d141      	RCALL SUBOPT_0x8
                 ; 0005 00B2             }
                 ; 0005 00B3             if (received_package[2] == 1) {
                 _0xA0008:
                +
000219 91a0 017f+LDS R26 , _received_package + ( 2 )
                 	__GETB2MN _received_package,2
00021b 30a1      	CPI  R26,LOW(0x1)
00021c f469      	BRNE _0xA0009
                 ; 0005 00B4                 // day la goi thoi gian
                 ; 0005 00B5                 t.Hour = received_package[3];
                +
00021d 91e0 0180+LDS R30 , _received_package + ( 3 )
                 	__GETB1MN _received_package,3
00021f 83ea      	STD  Y+2,R30
                 ; 0005 00B6                 t.Minute = received_package[4];
                +
000220 91e0 0181+LDS R30 , _received_package + ( 4 )
                 	__GETB1MN _received_package,4
000222 83e9      	STD  Y+1,R30
                 ; 0005 00B7                 t.Second = received_package[5];
                +
000223 91e0 0182+LDS R30 , _received_package + ( 5 )
                 	__GETB1MN _received_package,5
000225 83e8      	ST   Y,R30
                 ; 0005 00B8                 return_data_to_computer(0, 1, received_package[3], received_package[4], received_package[5]);
000226 d13a      	RCALL SUBOPT_0x9
                +
000227 91e0 0180+LDS R30 , _received_package + ( 3 )
                 	__GETB1MN _received_package,3
000229 d130      	RCALL SUBOPT_0x8
                 ; 0005 00B9             }
                 ; 0005 00BA         }
                 _0xA0009:
                 ; 0005 00BB     } else {
                 _0xA0007:
                 ; 0005 00BC         // thuc hien cau truy van nhan duoc tren slave
                 ; 0005 00BD         if (package_size == 4) {
                 ; 0005 00BE             if (received_package[2] == 't') {
                 ; 0005 00BF                 //printf ("%c",a);
                 ; 0005 00C0                 temp = ds18b20_gettemp();
                 ; 0005 00C1                 //printf("%d", (int)temp);
                 ; 0005 00C2                 //printf ("%d",temp);
                 ; 0005 00C3                 return_data_to_master(0, 0, 0, (unsigned char) ((int) temp), (unsigned char) ((int) (10 * (temp - (int)  ...
                 ; 0005 00C4 
                 ; 0005 00C5             }
                 ; 0005 00C6             if (received_package[2] == 'h') {
                 ; 0005 00C7                 t = myGetTimeFromDS1307ver2();
                 ; 0005 00C8                 //printf(" Gio hien tai la %d:%d:%d\n\r", (unsigned char) (t.Hour + t.Mode * t.AP * 12), (unsigned char) ...
                 ; 0005 00C9                 return_data_to_master(0, 1, (t.Hour + t.Mode * t.AP * 12), t.Minute, t.Second);
                 ; 0005 00CA             }
                 ; 0005 00CB 
                 ; 0005 00CC         }
                 ; 0005 00CD     }
                 ; 0005 00CE     package_size = 0;
00022a 24cc      	CLR  R12
00022b 24dd      	CLR  R13
                 ; 0005 00CF }
00022c 9629      	ADIW R28,9
00022d 9508      	RET
                 ; .FEND
                 ;
                 ;void send_query_to_slave() {
                 ; 0005 00D1 void send_query_to_slave() {
                 _send_query_to_slave:
                 ; .FSTART _send_query_to_slave
                 ; 0005 00D2     //    hienthi(11);delay_ms(4000);
                 ; 0005 00D3     uart_char_tx(received_package[0]);
00022e 91a0 017d 	LDS  R26,_received_package
000230 d116      	RCALL SUBOPT_0x4
                 ; 0005 00D4     delay_ms(100); // cho cho master nhan va xu ly
                 ; 0005 00D5     uart_char_tx(received_package[1]);
                +
000231 91a0 017e+LDS R26 , _received_package + ( 1 )
                 	__GETB2MN _received_package,1
000233 d113      	RCALL SUBOPT_0x4
                 ; 0005 00D6     delay_ms(100);
                 ; 0005 00D7     uart_char_tx(received_package[2]);
                +
000234 91a0 017f+LDS R26 , _received_package + ( 2 )
                 	__GETB2MN _received_package,2
000236 d110      	RCALL SUBOPT_0x4
                 ; 0005 00D8     delay_ms(100);
                 ; 0005 00D9     uart_char_tx(received_package[3]);
                +
000237 91a0 0180+LDS R26 , _received_package + ( 3 )
                 	__GETB2MN _received_package,3
000239 d10d      	RCALL SUBOPT_0x4
                 ; 0005 00DA     delay_ms(100);
                 ; 0005 00DB }
00023a 9508      	RET
                 ; .FEND
                 ;
                 ;// doc tung byte va luu vao goi tin theo dinh dang
                 ;
                 ;void process_received_data() {
                 ; 0005 00DF void process_received_data() {
                 _process_received_data:
                 ; .FSTART _process_received_data
                 ; 0005 00E0     if (IS_MASTER) {
                 ; 0005 00E1         // xu ly du lieu nhan duoc tren master
                 ; 0005 00E2         if (isComplete) {
00023b 2c0a      	MOV  R0,R10
00023c 280b      	OR   R0,R11
00023d f069      	BREQ _0xA000F
                 ; 0005 00E3             if (received_byte == '@') {
00023e e4e0      	LDI  R30,LOW(64)
00023f 15e8      	CP   R30,R8
000240 f419      	BRNE _0xA0010
                 ; 0005 00E4                 //hienthi(33);delay_ms(4000);
                 ; 0005 00E5                 //printf("bat dau goi tin; ");
                 ; 0005 00E6                 isComplete = 0;
000241 24aa      	CLR  R10
000242 24bb      	CLR  R11
                 ; 0005 00E7                 received_package[package_size] = received_byte;
000243 d122      	RCALL SUBOPT_0xA
                 ; 0005 00E8                 package_size++;
                 ; 0005 00E9             }
                 ; 0005 00EA             if (received_byte == '$') {
                 _0xA0010:
000244 e2e4      	LDI  R30,LOW(36)
000245 15e8      	CP   R30,R8
000246 f419      	BRNE _0xA0011
                 ; 0005 00EB                 // slave da xac nhan, xu ly tiep, gui cau truy van toi slave
                 ; 0005 00EC                 hienthi(11);
000247 e0ab      	LDI  R26,LOW(11)
000248 d107      	RCALL SUBOPT_0x6
                 ; 0005 00ED                 delay_ms(4000);
                 ; 0005 00EE                 send_query_to_slave();
000249 dfe4      	RCALL _send_query_to_slave
                 ; 0005 00EF             }
                 ; 0005 00F0         } else {
                 _0xA0011:
00024a c007      	RJMP _0xA0012
                 _0xA000F:
                 ; 0005 00F1             received_package[package_size] = received_byte;
00024b d11a      	RCALL SUBOPT_0xA
                 ; 0005 00F2             package_size++;
                 ; 0005 00F3             //hienthi(package_size);delay_ms(4000);
                 ; 0005 00F4             if ((received_byte == '#') || (package_size > 9)) {
00024c e2e3      	LDI  R30,LOW(35)
00024d 15e8      	CP   R30,R8
00024e f011      	BREQ _0xA0014
00024f d11e      	RCALL SUBOPT_0xB
000250 f40c      	BRGE _0xA0013
                 _0xA0014:
                 ; 0005 00F5                 //printf("ket thuc goi tin; ");
                 ; 0005 00F6                 //hienthi(44);delay_ms(4000);
                 ; 0005 00F7                 isComplete = 1;
000251 d121      	RCALL SUBOPT_0xC
                 ; 0005 00F8                 execute_query();
                 ; 0005 00F9             }
                 ; 0005 00FA         }
                 _0xA0013:
                 _0xA0012:
                 ; 0005 00FB     } else {
                 ; 0005 00FC         // xu ly du lieu nhan duoc tren slave
                 ; 0005 00FD         if (isComplete) {
                 ; 0005 00FE             if (received_byte == '@') {
                 ; 0005 00FF                 //printf("bat dau goi tin; ");
                 ; 0005 0100                 isComplete = 0;
                 ; 0005 0101                 received_package[package_size] = received_byte;
                 ; 0005 0102                 package_size++;
                 ; 0005 0103             }
                 ; 0005 0104         } else {
                 ; 0005 0105             received_package[package_size] = received_byte;
                 ; 0005 0106             package_size++;
                 ; 0005 0107             if ((received_byte == '#') || (package_size > 9)) {
                 ; 0005 0108                 //printf("ket thuc goi tin; ");
                 ; 0005 0109                 isComplete = 1;
                 ; 0005 010A                 execute_query();
                 ; 0005 010B             }
                 ; 0005 010C         }
                 ; 0005 010D     }
                 ; 0005 010E }
000252 9508      	RET
                 ; .FEND
                 ;
                 ;void send_confirm_to_master() {
                 ; 0005 0110 void send_confirm_to_master() {
                 _send_confirm_to_master:
                 ; .FSTART _send_confirm_to_master
                 ; 0005 0111     uart_char_tx('$');
000253 e2a4      	LDI  R26,LOW(36)
000254 d0d0      	RCALL _uart_char_tx
                 ; 0005 0112 }
000255 9508      	RET
                 ; .FEND
                 ;
                 ;void enable_slave() {
                 ; 0005 0114 void enable_slave() {
                 _enable_slave:
                 ; .FSTART _enable_slave
                 ; 0005 0115     slave_enable = 1;
000256 e0e1      	LDI  R30,LOW(1)
000257 e0f0      	LDI  R31,HIGH(1)
000258 93e0 0187 	STS  _slave_enable,R30
00025a 93f0 0188 	STS  _slave_enable+1,R31
                 ; 0005 0116     UCSRA &= ~(1 << MPCM);
00025c 9858      	CBI  0xB,0
                 ; 0005 0117 }
00025d 9508      	RET
                 ; .FEND
                 ;
                 ;void disable_slave() {
                 ; 0005 0119 void disable_slave() {
                 _disable_slave:
                 ; .FSTART _disable_slave
                 ; 0005 011A     slave_enable = 0;
00025e e0e0      	LDI  R30,LOW(0)
00025f 93e0 0187 	STS  _slave_enable,R30
000261 93e0 0188 	STS  _slave_enable+1,R30
                 ; 0005 011B     UCSRA |= (1 << MPCM);
000263 9a58      	SBI  0xB,0
                 ; 0005 011C }
000264 9508      	RET
                 ; .FEND
                 ;
                 ;// xu ly ngat nhan du lieu
                 ;
                 ;interrupt [USART_RXC] void usart_rx_isr(void) {
                 ; 0005 0120 interrupt [12] void usart_rx_isr(void) {
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000265 920a      	ST   -Y,R0
000266 921a      	ST   -Y,R1
000267 92fa      	ST   -Y,R15
000268 936a      	ST   -Y,R22
000269 937a      	ST   -Y,R23
00026a 938a      	ST   -Y,R24
00026b 939a      	ST   -Y,R25
00026c 93aa      	ST   -Y,R26
00026d 93ba      	ST   -Y,R27
00026e 93ea      	ST   -Y,R30
00026f 93fa      	ST   -Y,R31
000270 b7ef      	IN   R30,SREG
000271 93ea      	ST   -Y,R30
                 ; 0005 0121     if (IS_MASTER) {
                 ; 0005 0122         // xu ly ngat nhan du lieu tren master
                 ; 0005 0123         received_byte = UDR;
000272 b08c      	IN   R8,12
                 ; 0005 0124         process_received_data();
000273 dfc7      	RCALL _process_received_data
                 ; 0005 0125     }
                 ; 0005 0126     else {
                 ; 0005 0127         //xu ly ngat nhan du lieu tren slave
                 ; 0005 0128         //printf("slave nhan dia chi");
                 ; 0005 0129         //        hienthi(received_byte);
                 ; 0005 012A         //        delay_ms(6000);
                 ; 0005 012B         received_byte = UDR;
                 ; 0005 012C         if (slave_enable) {
                 ; 0005 012D             //printf("xy ly nghat");
                 ; 0005 012E             process_received_data();
                 ; 0005 012F         } else {
                 ; 0005 0130             //printf("slave nhan dia chi");
                 ; 0005 0131             if (MY_ADDRESS == received_byte) {
                 ; 0005 0132                 enable_slave();
                 ; 0005 0133                 send_confirm_to_master();
                 ; 0005 0134             }
                 ; 0005 0135         }
                 ; 0005 0136     }
                 ; 0005 0137 }
000274 91e9      	LD   R30,Y+
000275 bfef      	OUT  SREG,R30
000276 91f9      	LD   R31,Y+
000277 91e9      	LD   R30,Y+
000278 91b9      	LD   R27,Y+
000279 91a9      	LD   R26,Y+
00027a 9199      	LD   R25,Y+
00027b 9189      	LD   R24,Y+
00027c 9179      	LD   R23,Y+
00027d 9169      	LD   R22,Y+
00027e 90f9      	LD   R15,Y+
00027f 9019      	LD   R1,Y+
000280 9009      	LD   R0,Y+
000281 9518      	RETI
                 ; .FEND
                 ;
                 ;char mygetchar(void) {
                 ; 0005 0139 char mygetchar(void) {
                 ; 0005 013A     char data;
                 ; 0005 013B     if (rx_counter == 0) return 0;
                 ;	data -> R17
                 ; 0005 013C     data = rx_buffer[rx_rd_index];
                 ; 0005 013D     if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
                 ; 0005 013E     //#asm("cli")
                 ; 0005 013F     --rx_counter;
                 ; 0005 0140     //#asm("sei")
                 ; 0005 0141     return data;
                 ; 0005 0142 }
                 ;
                 ;// Declare your global variables here
                 ;unsigned char my_variable;
                 ;
                 ;void main(void) {
                 ; 0005 0147 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0005 0148     // Declare your local variables here
                 ; 0005 0149     unsigned char *t = 0;
                 ; 0005 014A     unsigned char h, m, s, i;
                 ; 0005 014B     int x;
                 ; 0005 014C     Time time = {30, 15, 10, 5, 12, 5, 16, 1, 1}; // thoi gian hien tai
                 ; 0005 014D     // Input/Output Ports initialization
                 ; 0005 014E     // Port A initialization
                 ; 0005 014F     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0005 0150     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0005 0151     PORTA = 0x00;
000282 972b      	SBIW R28,11
000283 e089      	LDI  R24,9
000284 e0a0      	LDI  R26,LOW(0)
000285 e0b0      	LDI  R27,HIGH(0)
000286 e7ea      	LDI  R30,LOW(_0xA0024*2)
000287 e0f0      	LDI  R31,HIGH(_0xA0024*2)
000288 d114      	RCALL __INITLOCB
                 ;	*t -> R16,R17
                 ;	h -> R19
                 ;	m -> R18
                 ;	s -> R21
                 ;	i -> R20
                 ;	x -> Y+9
                 ;	time -> Y+0
                +
000289 e000     +LDI R16 , LOW ( 0 )
00028a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
00028b e0e0      	LDI  R30,LOW(0)
00028c bbeb      	OUT  0x1B,R30
                 ; 0005 0152     //    DDRA = 0x00;
                 ; 0005 0153     DDRA = 0xFF;
00028d efef      	LDI  R30,LOW(255)
00028e bbea      	OUT  0x1A,R30
                 ; 0005 0154 
                 ; 0005 0155     // Port B initialization
                 ; 0005 0156     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0005 0157     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0005 0158     PORTB = 0x00;
00028f e0e0      	LDI  R30,LOW(0)
000290 bbe8      	OUT  0x18,R30
                 ; 0005 0159     DDRB = 0x00;
000291 bbe7      	OUT  0x17,R30
                 ; 0005 015A 
                 ; 0005 015B     // Port C initialization
                 ; 0005 015C     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0005 015D     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0005 015E     PORTC = 0x00;
000292 bbe5      	OUT  0x15,R30
                 ; 0005 015F     //    DDRC = 0xFF;
                 ; 0005 0160     DDRC = 0x00;
000293 bbe4      	OUT  0x14,R30
                 ; 0005 0161 
                 ; 0005 0162     // Port D initialization
                 ; 0005 0163     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0005 0164     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0005 0165     PORTD = 0x00;
000294 bbe2      	OUT  0x12,R30
                 ; 0005 0166     DDRD = 0x00;
000295 bbe1      	OUT  0x11,R30
                 ; 0005 0167 
                 ; 0005 0168     // Timer/Counter 0 initialization
                 ; 0005 0169     // Clock source: System Clock
                 ; 0005 016A     // Clock value: Timer 0 Stopped
                 ; 0005 016B     // Mode: Normal top=0xFF
                 ; 0005 016C     // OC0 output: Disconnected
                 ; 0005 016D     TCCR0 = 0x00;
000296 bfe3      	OUT  0x33,R30
                 ; 0005 016E     TCNT0 = 0x00;
000297 bfe2      	OUT  0x32,R30
                 ; 0005 016F     OCR0 = 0x00;
000298 bfec      	OUT  0x3C,R30
                 ; 0005 0170 
                 ; 0005 0171     // Timer/Counter 1 initialization
                 ; 0005 0172     // Clock source: System Clock
                 ; 0005 0173     // Clock value: Timer1 Stopped
                 ; 0005 0174     // Mode: Normal top=0xFFFF
                 ; 0005 0175     // OC1A output: Discon.
                 ; 0005 0176     // OC1B output: Discon.
                 ; 0005 0177     // Noise Canceler: Off
                 ; 0005 0178     // Input Capture on Falling Edge
                 ; 0005 0179     // Timer1 Overflow Interrupt: Off
                 ; 0005 017A     // Input Capture Interrupt: Off
                 ; 0005 017B     // Compare A Match Interrupt: Off
                 ; 0005 017C     // Compare B Match Interrupt: Off
                 ; 0005 017D     TCCR1A = 0x00;
000299 bdef      	OUT  0x2F,R30
                 ; 0005 017E     TCCR1B = 0x00;
00029a bdee      	OUT  0x2E,R30
                 ; 0005 017F     TCNT1H = 0x00;
00029b bded      	OUT  0x2D,R30
                 ; 0005 0180     TCNT1L = 0x00;
00029c bdec      	OUT  0x2C,R30
                 ; 0005 0181     ICR1H = 0x00;
00029d bde7      	OUT  0x27,R30
                 ; 0005 0182     ICR1L = 0x00;
00029e bde6      	OUT  0x26,R30
                 ; 0005 0183     OCR1AH = 0x00;
00029f bdeb      	OUT  0x2B,R30
                 ; 0005 0184     OCR1AL = 0x00;
0002a0 bdea      	OUT  0x2A,R30
                 ; 0005 0185     OCR1BH = 0x00;
0002a1 bde9      	OUT  0x29,R30
                 ; 0005 0186     OCR1BL = 0x00;
0002a2 bde8      	OUT  0x28,R30
                 ; 0005 0187 
                 ; 0005 0188     // Timer/Counter 2 initialization
                 ; 0005 0189     // Clock source: System Clock
                 ; 0005 018A     // Clock value: Timer2 Stopped
                 ; 0005 018B     // Mode: Normal top=0xFF
                 ; 0005 018C     // OC2 output: Disconnected
                 ; 0005 018D     ASSR = 0x00;
0002a3 bde2      	OUT  0x22,R30
                 ; 0005 018E     TCCR2 = 0x00;
0002a4 bde5      	OUT  0x25,R30
                 ; 0005 018F     TCNT2 = 0x00;
0002a5 bde4      	OUT  0x24,R30
                 ; 0005 0190     OCR2 = 0x00;
0002a6 bde3      	OUT  0x23,R30
                 ; 0005 0191 
                 ; 0005 0192     // External Interrupt(s) initialization
                 ; 0005 0193     // INT0: Off
                 ; 0005 0194     // INT1: Off
                 ; 0005 0195     // INT2: Off
                 ; 0005 0196     MCUCR = 0x00;
0002a7 bfe5      	OUT  0x35,R30
                 ; 0005 0197     MCUCSR = 0x00;
0002a8 bfe4      	OUT  0x34,R30
                 ; 0005 0198 
                 ; 0005 0199     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0005 019A     TIMSK = 0x00;
0002a9 bfe9      	OUT  0x39,R30
                 ; 0005 019B 
                 ; 0005 019C     // USART initialization
                 ; 0005 019D     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0005 019E     // USART Receiver: On
                 ; 0005 019F     // USART Transmitter: On
                 ; 0005 01A0     // USART Mode: Asynchronous
                 ; 0005 01A1     // USART Baud Rate: 9600
                 ; 0005 01A2     UCSRA = 0x00;
0002aa b9eb      	OUT  0xB,R30
                 ; 0005 01A3     UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
0002ab e8e6      	LDI  R30,LOW(134)
0002ac bde0      	OUT  0x20,R30
                 ; 0005 01A4     UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE) | (1 << UCSZ2);
0002ad e9ec      	LDI  R30,LOW(156)
0002ae b9ea      	OUT  0xA,R30
                 ; 0005 01A5     UBRRH = 0x00;
0002af e0e0      	LDI  R30,LOW(0)
0002b0 bde0      	OUT  0x20,R30
                 ; 0005 01A6     UBRRL = 0x19;
0002b1 e1e9      	LDI  R30,LOW(25)
0002b2 b9e9      	OUT  0x9,R30
                 ; 0005 01A7     if (!IS_MASTER) disable_slave();
                 ; 0005 01A8 
                 ; 0005 01A9 
                 ; 0005 01AA     // Analog Comparator initialization
                 ; 0005 01AB     // Analog Comparator: Off
                 ; 0005 01AC     // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0005 01AD     ACSR = 0x80;
0002b3 e8e0      	LDI  R30,LOW(128)
0002b4 b9e8      	OUT  0x8,R30
                 ; 0005 01AE     SFIOR = 0x00;
0002b5 e0e0      	LDI  R30,LOW(0)
0002b6 bfe0      	OUT  0x30,R30
                 ; 0005 01AF 
                 ; 0005 01B0     // ADC initialization
                 ; 0005 01B1     // ADC disabled
                 ; 0005 01B2     ADCSRA = 0x00;
0002b7 b9e6      	OUT  0x6,R30
                 ; 0005 01B3 
                 ; 0005 01B4     // SPI initialization
                 ; 0005 01B5     // SPI disabled
                 ; 0005 01B6     SPCR = 0x00;
0002b8 b9ed      	OUT  0xD,R30
                 ; 0005 01B7 
                 ; 0005 01B8     // TWI initialization
                 ; 0005 01B9     // TWI disabled
                 ; 0005 01BA     TWCR = 0x00;
0002b9 bfe6      	OUT  0x36,R30
                 ; 0005 01BB 
                 ; 0005 01BC     // I2C Bus initialization
                 ; 0005 01BD     // I2C Port: PORTA
                 ; 0005 01BE     // I2C SDA bit: 1
                 ; 0005 01BF     // I2C SCL bit: 0
                 ; 0005 01C0     // Bit Rate: 100 kHz
                 ; 0005 01C1     // Note: I2C settings are specified in the
                 ; 0005 01C2     // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0005 01C3     //    i2c_init();
                 ; 0005 01C4 
                 ; 0005 01C5     // 1 Wire Bus initialization
                 ; 0005 01C6     // 1 Wire Data port: PORTB
                 ; 0005 01C7     // 1 Wire Data bit: 0
                 ; 0005 01C8     // Note: 1 Wire port settings are specified in the
                 ; 0005 01C9     // Project|Configure|C Compiler|Libraries|1 Wire menu.
                 ; 0005 01CA     //    w1_init();
                 ; 0005 01CB     //    ds18b20_init(t, 0, 0, DS18B20_9BIT_RES);
                 ; 0005 01CC     //    rtc_init(0, 0, 0);
                 ; 0005 01CD 
                 ; 0005 01CE     //    TWI_Init(); //khoi dong TWI dung cho myds1307rtc.h
                 ; 0005 01CF     I2C_Init(); //khoi dong TWI dung cho myds1307rtcver2.h
0002ba ded1      	RCALL _I2C_Init
                 ; 0005 01D0 
                 ; 0005 01D1     // Global enable interrupts
                 ; 0005 01D2 #asm("sei")
0002bb 9478      	sei
                 ; 0005 01D3 
                 ; 0005 01D4     while (1) {
                 _0xA0026:
                 ; 0005 01D5 
                 ; 0005 01D6         // nhiet do
                 ; 0005 01D7         int whole = 0, decimal = 0;
                 ; 0005 01D8 
                 ; 0005 01D9         // hien thi nhiet do su dung myds18b20ver1.h
                 ; 0005 01DA         //        therm_ReadTempC(NULL, &whole, &decimal);
                 ; 0005 01DB         //        hienthinhietdo(whole);
                 ; 0005 01DC 
                 ; 0005 01DD         // hien thi nhiet do su dung myds18b20ver2.h
                 ; 0005 01DE         temp = ds18b20_gettemp();
0002bc 9724      	SBIW R28,4
0002bd d07a      	RCALL SUBOPT_0x1
                 ;	x -> Y+13
                 ;	time -> Y+4
                 ;	whole -> Y+2
                 ;	decimal -> Y+0
0002be de2a      	RCALL _ds18b20_gettemp
0002bf 93e0 0179 	STS  _temp,R30
0002c1 93f0 017a 	STS  _temp+1,R31
0002c3 9360 017b 	STS  _temp+2,R22
0002c5 9370 017c 	STS  _temp+3,R23
                 ; 0005 01DF         hienthinhietdo(temp);
0002c7 d186      	RCALL __CFD1U
0002c8 2fae      	MOV  R26,R30
0002c9 d008      	RCALL _hienthinhietdo
                 ; 0005 01E0 
                 ; 0005 01E1         delay_ms(1000);
0002ca eea8      	LDI  R26,LOW(1000)
0002cb e0b3      	LDI  R27,HIGH(1000)
0002cc d28a      	RCALL _delay_ms
                 ; 0005 01E2 
                 ; 0005 01E3         //        temp = ds18b20_temperature(t);
                 ; 0005 01E4 
                 ; 0005 01E5         // lay thoi gian
                 ; 0005 01E6         //        mySetTimeForDS1307ver2(&time);
                 ; 0005 01E7         //        time = myGetTimeFromDS1307();
                 ; 0005 01E8         //        time = myGetTimeFromDS1307ver2();
                 ; 0005 01E9         //        hienthithoigian(time.Hour + time.Mode * time.AP * 12, time.Minute); // hien thi theo 24h
                 ; 0005 01EA         hienthi(10);
0002cd e0aa      	LDI  R26,LOW(10)
0002ce d07c      	RCALL SUBOPT_0x5
                 ; 0005 01EB         delay_ms(2000);
                 ; 0005 01EC 
                 ; 0005 01ED         //        uart_char_tx('@');
                 ; 0005 01EE         //        delay_ms(100);
                 ; 0005 01EF         //        uart_char_tx('2');
                 ; 0005 01F0         //        delay_ms(100);
                 ; 0005 01F1         //        uart_char_tx('t');
                 ; 0005 01F2         //        delay_ms(100);
                 ; 0005 01F3         //        uart_char_tx('#');
                 ; 0005 01F4         //        delay_ms(100);
                 ; 0005 01F5 
                 ; 0005 01F6         // kytu = mygetchar();
                 ; 0005 01F7         // if(kytu !=0) putchar(kytu);
                 ; 0005 01F8         // printf("%c", my_variable);
                 ; 0005 01F9         //printf("Nhiet do hien tai la");
                 ; 0005 01FA         //kytu = uart_getchar();
                 ; 0005 01FB 
                 ; 0005 01FC         //        received_package[0] = '@';
                 ; 0005 01FD         //        received_package[1]='2';
                 ; 0005 01FE         //        received_package[2]='t';
                 ; 0005 01FF         //        received_package[3]='#';
                 ; 0005 0200         //        uart_address_tx(received_package[1]);
                 ; 0005 0201 
                 ; 0005 0202 
                 ; 0005 0203 
                 ; 0005 0204     }
0002cf 9624      	ADIW R28,4
0002d0 cfeb      	RJMP _0xA0026
                 ; 0005 0205 }
                 _0xA0029:
0002d1 cfff      	RJMP _0xA0029
                 ; .FEND
                 ;
                 ;void hienthinhietdo(unsigned char temp) {
                 ; 0005 0207 void hienthinhietdo(unsigned char temp) {
                 _hienthinhietdo:
                 ; .FSTART _hienthinhietdo
                 ; 0005 0208     unsigned char a, b;
                 ; 0005 0209     a = temp / 10;
0002d2 93aa      	ST   -Y,R26
0002d3 931a      	ST   -Y,R17
0002d4 930a      	ST   -Y,R16
                 ;	temp -> Y+2
                 ;	a -> R17
                 ;	b -> R16
0002d5 81aa      	LDD  R26,Y+2
0002d6 d07e      	RCALL SUBOPT_0x7
0002d7 2f1e      	MOV  R17,R30
                 ; 0005 020A     b = temp % 10;
0002d8 81aa      	LDD  R26,Y+2
0002d9 27bb      	CLR  R27
0002da e0ea      	LDI  R30,LOW(10)
0002db e0f0      	LDI  R31,HIGH(10)
0002dc d107      	RCALL __MODW21
0002dd 2f0e      	MOV  R16,R30
                 ; 0005 020B 
                 ; 0005 020C 
                 ; 0005 020D     quet(0xC6);
0002de eca6      	LDI  R26,LOW(198)
0002df d02a      	RCALL _quet
                 ; 0005 020E     quet(0x9C);
0002e0 e9ac      	LDI  R26,LOW(156)
0002e1 d095      	RCALL SUBOPT_0xD
                 ; 0005 020F     quet(ma[b]);
                 ; 0005 0210     quet(ma[a]);
                 ; 0005 0211     day(); // push
                 ; 0005 0212 }
0002e2 c03b      	RJMP _0x20A0003
                 ; .FEND
                 ;
                 ;void hienthithoigian(unsigned char hour, unsigned char minute) {
                 ; 0005 0214 void hienthithoigian(unsigned char hour, unsigned char minute) {
                 ; 0005 0215     unsigned char a, b, c, d;
                 ; 0005 0216     a = hour / 10;
                 ;	hour -> Y+5
                 ;	minute -> Y+4
                 ;	a -> R17
                 ;	b -> R16
                 ;	c -> R19
                 ;	d -> R18
                 ; 0005 0217     b = hour % 10;
                 ; 0005 0218     c = minute / 10;
                 ; 0005 0219     d = minute % 10;
                 ; 0005 021A     quet(ma[d]);
                 ; 0005 021B     quet(ma[c]);
                 ; 0005 021C     quet(~(~ma[b] | 0x80));
                 ; 0005 021D     quet(ma[a]);
                 ; 0005 021E     day();
                 ; 0005 021F }
                 ;
                 ;void hienthi(int x) {
                 ; 0005 0221 void hienthi(int x) {
                 _hienthi:
                 ; .FSTART _hienthi
                 ; 0005 0222     unsigned char a, b, c, d;
                 ; 0005 0223     int i = 0;
                 ; 0005 0224     a = x / 1000;
0002e3 93ba      	ST   -Y,R27
0002e4 93aa      	ST   -Y,R26
0002e5 d0a9      	RCALL __SAVELOCR6
                 ;	x -> Y+6
                 ;	a -> R17
                 ;	b -> R16
                 ;	c -> R19
                 ;	d -> R18
                 ;	i -> R20,R21
                +
0002e6 e040     +LDI R20 , LOW ( 0 )
0002e7 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0002e8 d09c      	RCALL SUBOPT_0xE
0002e9 d0f5      	RCALL __DIVW21
0002ea 2f1e      	MOV  R17,R30
                 ; 0005 0225     b = (x % 1000) / 100;
0002eb d099      	RCALL SUBOPT_0xE
0002ec d0f7      	RCALL __MODW21
0002ed 01df      	MOVW R26,R30
0002ee e6e4      	LDI  R30,LOW(100)
0002ef e0f0      	LDI  R31,HIGH(100)
0002f0 d0ee      	RCALL __DIVW21
0002f1 2f0e      	MOV  R16,R30
                 ; 0005 0226     c = (x % 100) / 10;
0002f2 81ae      	LDD  R26,Y+6
0002f3 81bf      	LDD  R27,Y+6+1
0002f4 e6e4      	LDI  R30,LOW(100)
0002f5 e0f0      	LDI  R31,HIGH(100)
0002f6 d0ed      	RCALL __MODW21
0002f7 01df      	MOVW R26,R30
0002f8 e0ea      	LDI  R30,LOW(10)
0002f9 e0f0      	LDI  R31,HIGH(10)
0002fa d0e4      	RCALL __DIVW21
0002fb 2f3e      	MOV  R19,R30
                 ; 0005 0227     d = (x % 10);
0002fc 81ae      	LDD  R26,Y+6
0002fd 81bf      	LDD  R27,Y+6+1
0002fe e0ea      	LDI  R30,LOW(10)
0002ff e0f0      	LDI  R31,HIGH(10)
000300 d0e3      	RCALL __MODW21
000301 2f2e      	MOV  R18,R30
                 ; 0005 0228 
                 ; 0005 0229     quet(ma[d]);
000302 d087      	RCALL SUBOPT_0xF
000303 d006      	RCALL _quet
                 ; 0005 022A     quet(ma[c]);
000304 2fe3      	MOV  R30,R19
000305 d084      	RCALL SUBOPT_0xF
000306 d070      	RCALL SUBOPT_0xD
                 ; 0005 022B     quet(ma[b]);
                 ; 0005 022C     quet(ma[a]);
                 ; 0005 022D 
                 ; 0005 022E 
                 ; 0005 022F 
                 ; 0005 0230 
                 ; 0005 0231     day();
                 ; 0005 0232 }
000307 d08e      	RCALL __LOADLOCR6
000308 9628      	ADIW R28,8
000309 9508      	RET
                 ; .FEND
                 ;
                 ;void quet(unsigned char x) {
                 ; 0005 0234 void quet(unsigned char x) {
                 _quet:
                 ; .FSTART _quet
                 ; 0005 0235     unsigned char i, temp;
                 ; 0005 0236     for (i = 0; i < 8; i++) {
00030a 93aa      	ST   -Y,R26
00030b 931a      	ST   -Y,R17
00030c 930a      	ST   -Y,R16
                 ;	x -> Y+2
                 ;	i -> R17
                 ;	temp -> R16
00030d e010      	LDI  R17,LOW(0)
                 _0xA002B:
00030e 3018      	CPI  R17,8
00030f f470      	BRSH _0xA002C
                 ; 0005 0237         temp = x;
000310 810a      	LDD  R16,Y+2
                 ; 0005 0238         temp = temp & 0x80;
000311 7800      	ANDI R16,LOW(128)
                 ; 0005 0239         if (temp == 0x80) {
000312 3800      	CPI  R16,128
000313 f411      	BRNE _0xA002D
                 ; 0005 023A             PORTA.1 = 1;
000314 9ad9      	SBI  0x1B,1
                 ; 0005 023B         } else {
000315 c001      	RJMP _0xA0030
                 _0xA002D:
                 ; 0005 023C             PORTA.1 = 0;
000316 98d9      	CBI  0x1B,1
                 ; 0005 023D         }
                 _0xA0030:
                 ; 0005 023E         x = x * 2;
000317 81ea      	LDD  R30,Y+2
000318 0fee      	LSL  R30
000319 83ea      	STD  Y+2,R30
                 ; 0005 023F         PORTA.0 = 0;
00031a 98d8      	CBI  0x1B,0
                 ; 0005 0240         PORTA.0 = 1;
00031b 9ad8      	SBI  0x1B,0
                 ; 0005 0241     }
00031c 5f1f      	SUBI R17,-1
00031d cff0      	RJMP _0xA002B
                 _0xA002C:
                 ; 0005 0242 }
                 _0x20A0003:
00031e 8119      	LDD  R17,Y+1
00031f 8108      	LDD  R16,Y+0
                 _0x20A0004:
000320 9623      	ADIW R28,3
000321 9508      	RET
                 ; .FEND
                 ;
                 ;void day() {
                 ; 0005 0244 void day() {
                 _day:
                 ; .FSTART _day
                 ; 0005 0245     PORTA.2 = 0;
000322 98da      	CBI  0x1B,2
                 ; 0005 0246     PORTA.2 = 1;
000323 9ada      	SBI  0x1B,2
                 ; 0005 0247 }
000324 9508      	RET
                 ; .FEND
                 ;
                 ;//chuong trinh con phat du lieu
                 ;
                 ;void uart_char_tx(unsigned char chr) {
                 ; 0005 024B void uart_char_tx(unsigned char chr) {
                 _uart_char_tx:
                 ; .FSTART _uart_char_tx
                 ; 0005 024C     while (!(UCSRA & (1 << UDRE))); //cho den khi bit UDRE=1 moi thoat khoi while
000325 93aa      	ST   -Y,R26
                 ;	chr -> Y+0
                 _0xA003B:
000326 9b5d      	SBIS 0xB,5
000327 cffe      	RJMP _0xA003B
                 ; 0005 024D     UCSRB &= ~(1 << TXB8); //reset the 9th bit
000328 9850      	CBI  0xA,0
                 ; 0005 024E     UDR = chr;
000329 c004      	RJMP _0x20A0001
                 ; 0005 024F }
                 ; .FEND
                 ;
                 ;//chuong trinh con phat dia chi
                 ;
                 ;void uart_address_tx(unsigned char chr) {
                 ; 0005 0253 void uart_address_tx(unsigned char chr) {
                 _uart_address_tx:
                 ; .FSTART _uart_address_tx
                 ; 0005 0254     while (!(UCSRA & (1 << UDRE))); //cho den khi bit UDRE=1 moi thoat khoi while
00032a 93aa      	ST   -Y,R26
                 ;	chr -> Y+0
                 _0xA003E:
00032b 9b5d      	SBIS 0xB,5
00032c cffe      	RJMP _0xA003E
                 ; 0005 0255     UCSRB |= (1 << TXB8);
00032d 9a50      	SBI  0xA,0
                 ; 0005 0256     UDR = chr;
                 _0x20A0001:
00032e 81e8      	LD   R30,Y
00032f b9ec      	OUT  0xC,R30
                 ; 0005 0257 }
                 _0x20A0002:
000330 9621      	ADIW R28,1
000331 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char uart_getchar() {
                 ; 0005 0259 unsigned char uart_getchar() {
                 ; 0005 025A     unsigned char a = '';
                 ; 0005 025B     a = UDR;
                 ;	a -> R17
                 ; 0005 025C     return a;
                 ; 0005 025D }
                 ;
                 ;void getState(unsigned char a) {
                 ; 0005 025F void getState(unsigned char a) {
                 ; 0005 0260     switch (a) {
                 ;	a -> Y+0
                 ; 0005 0261         case 't':
                 ; 0005 0262             printf("Nhiet do hien tai la %f", temp);
                 ; 0005 0263             break;
                 ; 0005 0264         case 'h':
                 ; 0005 0265             printf("xin chao");
                 ; 0005 0266             break;
                 ; 0005 0267     }
                 ; 0005 0268 }
                 ;
                 ;//interrupt [USART_RXC] void rx_isr(){ //ngat nhan khi bit RXC =1
                 ;//  kytu = UDR;
                 ;//}
                 ;
                 ;
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _registry_ds1307:
000160           	.BYTE 0x7
                 _rx_buffer:
000167           	.BYTE 0x8
                 _ma:
00016f           	.BYTE 0xA
                 _temp:
000179           	.BYTE 0x4
                 _received_package:
00017d           	.BYTE 0xA
                 _slave_enable:
000187           	.BYTE 0x2
                 __seed_G100:
000189           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000332 98c0      	CBI  0x18,0
000333 9ab8      	SBI  0x17,0
                +
000334 e081     +LDI R24 , LOW ( 1 )
                +__DELAY_USB_LOOP :
000335 958a     +DEC R24
000336 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 1
000337 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000338 e0e0      	LDI  R30,LOW(0)
000339 83e8      	ST   Y,R30
00033a 83e9      	STD  Y+1,R30
00033b 83ea      	STD  Y+2,R30
00033c 83eb      	STD  Y+3,R30
00033d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
00033e ede0      	LDI  R30,LOW(208)
00033f 93ea      	ST   -Y,R30
000340 e0a2      	LDI  R26,LOW(2)
000341 ce73      	RJMP _I2C_ReadRegister
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000342 81e8      	LD   R30,Y
000343 b9e3      	OUT  0x3,R30
000344 e8e4      	LDI  R30,LOW(132)
000345 bfe6      	OUT  0x36,R30
000346 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x4:
000347 dfdd      	RCALL _uart_char_tx
000348 e6a4      	LDI  R26,LOW(100)
000349 e0b0      	LDI  R27,0
00034a c20c      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
00034b e0b0      	LDI  R27,0
00034c df96      	RCALL _hienthi
00034d eda0      	LDI  R26,LOW(2000)
00034e e0b7      	LDI  R27,HIGH(2000)
00034f c207      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
000350 e0b0      	LDI  R27,0
000351 df91      	RCALL _hienthi
000352 eaa0      	LDI  R26,LOW(4000)
000353 e0bf      	LDI  R27,HIGH(4000)
000354 c202      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000355 e0b0      	LDI  R27,0
000356 e0ea      	LDI  R30,LOW(10)
000357 e0f0      	LDI  R31,HIGH(10)
000358 d086      	RCALL __DIVW21
000359 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
00035a 93ea      	ST   -Y,R30
                +
00035b 91e0 0181+LDS R30 , _received_package + ( 4 )
                 	__GETB1MN _received_package,4
00035d 93ea      	ST   -Y,R30
                +
00035e 91a0 0182+LDS R26 , _received_package + ( 5 )
                 	__GETB2MN _received_package,5
000360 ce76      	RJMP _return_data_to_computer
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000361 e0e0      	LDI  R30,LOW(0)
000362 93ea      	ST   -Y,R30
000363 e0e1      	LDI  R30,LOW(1)
000364 93ea      	ST   -Y,R30
000365 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xA:
000366 01f6      	MOVW R30,R12
000367 58e3      	SUBI R30,LOW(-_received_package)
000368 4ffe      	SBCI R31,HIGH(-_received_package)
000369 8280      	ST   Z,R8
00036a 01f6      	MOVW R30,R12
00036b 9631      	ADIW R30,1
00036c 016f      	MOVW R12,R30
00036d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00036e e0e9      	LDI  R30,LOW(9)
00036f e0f0      	LDI  R31,HIGH(9)
000370 15ec      	CP   R30,R12
000371 05fd      	CPC  R31,R13
000372 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000373 e0e1      	LDI  R30,LOW(1)
000374 e0f0      	LDI  R31,HIGH(1)
000375 015f      	MOVW R10,R30
000376 ce78      	RJMP _execute_query
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xD:
000377 df92      	RCALL _quet
000378 2fe0      	MOV  R30,R16
000379 e0f0      	LDI  R31,0
00037a 59e1      	SUBI R30,LOW(-_ma)
00037b 4ffe      	SBCI R31,HIGH(-_ma)
00037c 81a0      	LD   R26,Z
00037d df8c      	RCALL _quet
00037e 2fe1      	MOV  R30,R17
00037f e0f0      	LDI  R31,0
000380 59e1      	SUBI R30,LOW(-_ma)
000381 4ffe      	SBCI R31,HIGH(-_ma)
000382 81a0      	LD   R26,Z
000383 df86      	RCALL _quet
000384 cf9d      	RJMP _day
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000385 81ae      	LDD  R26,Y+6
000386 81bf      	LDD  R27,Y+6+1
000387 eee8      	LDI  R30,LOW(1000)
000388 e0f3      	LDI  R31,HIGH(1000)
000389 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
00038a e0f0      	LDI  R31,0
00038b 59e1      	SUBI R30,LOW(-_ma)
00038c 4ffe      	SBCI R31,HIGH(-_ma)
00038d 81a0      	LD   R26,Z
00038e 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
00038f 935a      	ST   -Y,R21
                 __SAVELOCR5:
000390 934a      	ST   -Y,R20
                 __SAVELOCR4:
000391 933a      	ST   -Y,R19
                 __SAVELOCR3:
000392 932a      	ST   -Y,R18
                 __SAVELOCR2:
000393 931a      	ST   -Y,R17
000394 930a      	ST   -Y,R16
000395 9508      	RET
                 
                 __LOADLOCR6:
000396 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000397 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000398 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000399 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00039a 8119      	LDD  R17,Y+1
00039b 8108      	LD   R16,Y
00039c 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
00039d 0fac      	ADD  R26,R28
00039e 1fbd      	ADC  R27,R29
                 __INITLOC0:
00039f 9005      	LPM  R0,Z+
0003a0 920d      	ST   X+,R0
0003a1 958a      	DEC  R24
0003a2 f7e1      	BRNE __INITLOC0
0003a3 9508      	RET
                 
                 __ANEGW1:
0003a4 95f1      	NEG  R31
0003a5 95e1      	NEG  R30
0003a6 40f0      	SBCI R31,0
0003a7 9508      	RET
                 
                 __ANEGD1:
0003a8 95f0      	COM  R31
0003a9 9560      	COM  R22
0003aa 9570      	COM  R23
0003ab 95e1      	NEG  R30
0003ac 4fff      	SBCI R31,-1
0003ad 4f6f      	SBCI R22,-1
0003ae 4f7f      	SBCI R23,-1
0003af 9508      	RET
                 
                 __CWD1:
0003b0 2f6f      	MOV  R22,R31
0003b1 0f66      	ADD  R22,R22
0003b2 0b66      	SBC  R22,R22
0003b3 2f76      	MOV  R23,R22
0003b4 9508      	RET
                 
                 __CWD2:
0003b5 2f8b      	MOV  R24,R27
0003b6 0f88      	ADD  R24,R24
0003b7 0b88      	SBC  R24,R24
0003b8 2f98      	MOV  R25,R24
0003b9 9508      	RET
                 
                 __EQB12:
0003ba 17ea      	CP   R30,R26
0003bb e0e1      	LDI  R30,1
0003bc f009      	BREQ __EQB12T
0003bd 27ee      	CLR  R30
                 __EQB12T:
0003be 9508      	RET
                 
                 __NEB12:
0003bf 17ea      	CP   R30,R26
0003c0 e0e1      	LDI  R30,1
0003c1 f409      	BRNE __NEB12T
0003c2 27ee      	CLR  R30
                 __NEB12T:
0003c3 9508      	RET
                 
                 __MULW12U:
0003c4 9ffa      	MUL  R31,R26
0003c5 2df0      	MOV  R31,R0
0003c6 9feb      	MUL  R30,R27
0003c7 0df0      	ADD  R31,R0
0003c8 9fea      	MUL  R30,R26
0003c9 2de0      	MOV  R30,R0
0003ca 0df1      	ADD  R31,R1
0003cb 9508      	RET
                 
                 __DIVW21U:
0003cc 2400      	CLR  R0
0003cd 2411      	CLR  R1
0003ce e190      	LDI  R25,16
                 __DIVW21U1:
0003cf 0faa      	LSL  R26
0003d0 1fbb      	ROL  R27
0003d1 1c00      	ROL  R0
0003d2 1c11      	ROL  R1
0003d3 1a0e      	SUB  R0,R30
0003d4 0a1f      	SBC  R1,R31
0003d5 f418      	BRCC __DIVW21U2
0003d6 0e0e      	ADD  R0,R30
0003d7 1e1f      	ADC  R1,R31
0003d8 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003d9 60a1      	SBR  R26,1
                 __DIVW21U3:
0003da 959a      	DEC  R25
0003db f799      	BRNE __DIVW21U1
0003dc 01fd      	MOVW R30,R26
0003dd 01d0      	MOVW R26,R0
0003de 9508      	RET
                 
                 __DIVW21:
0003df d012      	RCALL __CHKSIGNW
0003e0 dfeb      	RCALL __DIVW21U
0003e1 f40e      	BRTC __DIVW211
0003e2 dfc1      	RCALL __ANEGW1
                 __DIVW211:
0003e3 9508      	RET
                 
                 __MODW21:
0003e4 94e8      	CLT
0003e5 ffb7      	SBRS R27,7
0003e6 c004      	RJMP __MODW211
0003e7 95b1      	NEG  R27
0003e8 95a1      	NEG  R26
0003e9 40b0      	SBCI R27,0
0003ea 9468      	SET
                 __MODW211:
0003eb fdf7      	SBRC R31,7
0003ec dfb7      	RCALL __ANEGW1
0003ed dfde      	RCALL __DIVW21U
0003ee 01fd      	MOVW R30,R26
0003ef f40e      	BRTC __MODW212
0003f0 dfb3      	RCALL __ANEGW1
                 __MODW212:
0003f1 9508      	RET
                 
                 __CHKSIGNW:
0003f2 94e8      	CLT
0003f3 fff7      	SBRS R31,7
0003f4 c002      	RJMP __CHKSW1
0003f5 dfae      	RCALL __ANEGW1
0003f6 9468      	SET
                 __CHKSW1:
0003f7 ffb7      	SBRS R27,7
0003f8 c006      	RJMP __CHKSW2
0003f9 95b1      	NEG  R27
0003fa 95a1      	NEG  R26
0003fb 40b0      	SBCI R27,0
0003fc f800      	BLD  R0,0
0003fd 9403      	INC  R0
0003fe fa00      	BST  R0,0
                 __CHKSW2:
0003ff 9508      	RET
                 
                 __PUTDP1:
000400 93ed      	ST   X+,R30
000401 93fd      	ST   X+,R31
000402 936d      	ST   X+,R22
000403 937c      	ST   X,R23
000404 9508      	RET
                 
                 __CDF2U:
000405 9468      	SET
000406 c001      	RJMP __CDF2U0
                 __CDF2:
000407 94e8      	CLT
                 __CDF2U0:
000408 d001      	RCALL __SWAPD12
000409 d07e      	RCALL __CDF1U0
                 
                 __SWAPD12:
00040a 2e18      	MOV  R1,R24
00040b 2f86      	MOV  R24,R22
00040c 2d61      	MOV  R22,R1
00040d 2e19      	MOV  R1,R25
00040e 2f97      	MOV  R25,R23
00040f 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000410 2e1b      	MOV  R1,R27
000411 2fbf      	MOV  R27,R31
000412 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000413 2e1a      	MOV  R1,R26
000414 2fae      	MOV  R26,R30
000415 2de1      	MOV  R30,R1
000416 9508      	RET
                 
                 __COPYMML:
000417 2799      	CLR  R25
                 __COPYMM:
000418 93ef      	PUSH R30
000419 93ff      	PUSH R31
                 __COPYMM0:
00041a 9161      	LD   R22,Z+
00041b 936d      	ST   X+,R22
00041c 9701      	SBIW R24,1
00041d f7e1      	BRNE __COPYMM0
00041e 91ff      	POP  R31
00041f 91ef      	POP  R30
000420 9508      	RET
                 
                 __ROUND_REPACK:
000421 2355      	TST  R21
000422 f442      	BRPL __REPACK
000423 3850      	CPI  R21,0x80
000424 f411      	BRNE __ROUND_REPACK0
000425 ffe0      	SBRS R30,0
000426 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000427 9631      	ADIW R30,1
000428 1f69      	ADC  R22,R25
000429 1f79      	ADC  R23,R25
00042a f06b      	BRVS __REPACK1
                 
                 __REPACK:
00042b e850      	LDI  R21,0x80
00042c 2757      	EOR  R21,R23
00042d f411      	BRNE __REPACK0
00042e 935f      	PUSH R21
00042f c0c8      	RJMP __ZERORES
                 __REPACK0:
000430 3f5f      	CPI  R21,0xFF
000431 f031      	BREQ __REPACK1
000432 0f66      	LSL  R22
000433 0c00      	LSL  R0
000434 9557      	ROR  R21
000435 9567      	ROR  R22
000436 2f75      	MOV  R23,R21
000437 9508      	RET
                 __REPACK1:
000438 935f      	PUSH R21
000439 2000      	TST  R0
00043a f00a      	BRMI __REPACK2
00043b c0c7      	RJMP __MAXRES
                 __REPACK2:
00043c c0c0      	RJMP __MINRES
                 
                 __UNPACK:
00043d e850      	LDI  R21,0x80
00043e 2e19      	MOV  R1,R25
00043f 2215      	AND  R1,R21
000440 0f88      	LSL  R24
000441 1f99      	ROL  R25
000442 2795      	EOR  R25,R21
000443 0f55      	LSL  R21
000444 9587      	ROR  R24
                 
                 __UNPACK1:
000445 e850      	LDI  R21,0x80
000446 2e07      	MOV  R0,R23
000447 2205      	AND  R0,R21
000448 0f66      	LSL  R22
000449 1f77      	ROL  R23
00044a 2775      	EOR  R23,R21
00044b 0f55      	LSL  R21
00044c 9567      	ROR  R22
00044d 9508      	RET
                 
                 __CFD1U:
00044e 9468      	SET
00044f c001      	RJMP __CFD1U0
                 __CFD1:
000450 94e8      	CLT
                 __CFD1U0:
000451 935f      	PUSH R21
000452 dff2      	RCALL __UNPACK1
000453 3870      	CPI  R23,0x80
000454 f018      	BRLO __CFD10
000455 3f7f      	CPI  R23,0xFF
000456 f408      	BRCC __CFD10
000457 c0a0      	RJMP __ZERORES
                 __CFD10:
000458 e156      	LDI  R21,22
000459 1b57      	SUB  R21,R23
00045a f4aa      	BRPL __CFD11
00045b 9551      	NEG  R21
00045c 3058      	CPI  R21,8
00045d f40e      	BRTC __CFD19
00045e 3059      	CPI  R21,9
                 __CFD19:
00045f f030      	BRLO __CFD17
000460 efef      	SER  R30
000461 efff      	SER  R31
000462 ef6f      	SER  R22
000463 e77f      	LDI  R23,0x7F
000464 f977      	BLD  R23,7
000465 c01a      	RJMP __CFD15
                 __CFD17:
000466 2777      	CLR  R23
000467 2355      	TST  R21
000468 f0b9      	BREQ __CFD15
                 __CFD18:
000469 0fee      	LSL  R30
00046a 1fff      	ROL  R31
00046b 1f66      	ROL  R22
00046c 1f77      	ROL  R23
00046d 955a      	DEC  R21
00046e f7d1      	BRNE __CFD18
00046f c010      	RJMP __CFD15
                 __CFD11:
000470 2777      	CLR  R23
                 __CFD12:
000471 3058      	CPI  R21,8
000472 f028      	BRLO __CFD13
000473 2fef      	MOV  R30,R31
000474 2ff6      	MOV  R31,R22
000475 2f67      	MOV  R22,R23
000476 5058      	SUBI R21,8
000477 cff9      	RJMP __CFD12
                 __CFD13:
000478 2355      	TST  R21
000479 f031      	BREQ __CFD15
                 __CFD14:
00047a 9576      	LSR  R23
00047b 9567      	ROR  R22
00047c 95f7      	ROR  R31
00047d 95e7      	ROR  R30
00047e 955a      	DEC  R21
00047f f7d1      	BRNE __CFD14
                 __CFD15:
000480 2000      	TST  R0
000481 f40a      	BRPL __CFD16
000482 df25      	RCALL __ANEGD1
                 __CFD16:
000483 915f      	POP  R21
000484 9508      	RET
                 
                 __CDF1U:
000485 9468      	SET
000486 c001      	RJMP __CDF1U0
                 __CDF1:
000487 94e8      	CLT
                 __CDF1U0:
000488 9730      	SBIW R30,0
000489 4060      	SBCI R22,0
00048a 4070      	SBCI R23,0
00048b f0b1      	BREQ __CDF10
00048c 2400      	CLR  R0
00048d f026      	BRTS __CDF11
00048e 2377      	TST  R23
00048f f412      	BRPL __CDF11
000490 9400      	COM  R0
000491 df16      	RCALL __ANEGD1
                 __CDF11:
000492 2e17      	MOV  R1,R23
000493 e17e      	LDI  R23,30
000494 2011      	TST  R1
                 __CDF12:
000495 f032      	BRMI __CDF13
000496 957a      	DEC  R23
000497 0fee      	LSL  R30
000498 1fff      	ROL  R31
000499 1f66      	ROL  R22
00049a 1c11      	ROL  R1
00049b cff9      	RJMP __CDF12
                 __CDF13:
00049c 2fef      	MOV  R30,R31
00049d 2ff6      	MOV  R31,R22
00049e 2d61      	MOV  R22,R1
00049f 935f      	PUSH R21
0004a0 df8a      	RCALL __REPACK
0004a1 915f      	POP  R21
                 __CDF10:
0004a2 9508      	RET
                 
                 __SWAPACC:
0004a3 934f      	PUSH R20
0004a4 01af      	MOVW R20,R30
0004a5 01fd      	MOVW R30,R26
0004a6 01da      	MOVW R26,R20
0004a7 01ab      	MOVW R20,R22
0004a8 01bc      	MOVW R22,R24
0004a9 01ca      	MOVW R24,R20
0004aa 2d40      	MOV  R20,R0
0004ab 2c01      	MOV  R0,R1
0004ac 2e14      	MOV  R1,R20
0004ad 914f      	POP  R20
0004ae 9508      	RET
                 
                 __UADD12:
0004af 0fea      	ADD  R30,R26
0004b0 1ffb      	ADC  R31,R27
0004b1 1f68      	ADC  R22,R24
0004b2 9508      	RET
                 
                 __NEGMAN1:
0004b3 95e0      	COM  R30
0004b4 95f0      	COM  R31
0004b5 9560      	COM  R22
0004b6 5fef      	SUBI R30,-1
0004b7 4fff      	SBCI R31,-1
0004b8 4f6f      	SBCI R22,-1
0004b9 9508      	RET
                 
                 __ADDF12:
0004ba 935f      	PUSH R21
0004bb df81      	RCALL __UNPACK
0004bc 3890      	CPI  R25,0x80
0004bd f139      	BREQ __ADDF129
                 
                 __ADDF120:
0004be 3870      	CPI  R23,0x80
0004bf f121      	BREQ __ADDF128
                 __ADDF121:
0004c0 2f57      	MOV  R21,R23
0004c1 1b59      	SUB  R21,R25
0004c2 f12b      	BRVS __ADDF1211
0004c3 f412      	BRPL __ADDF122
0004c4 dfde      	RCALL __SWAPACC
0004c5 cffa      	RJMP __ADDF121
                 __ADDF122:
0004c6 3158      	CPI  R21,24
0004c7 f018      	BRLO __ADDF123
0004c8 27aa      	CLR  R26
0004c9 27bb      	CLR  R27
0004ca 2788      	CLR  R24
                 __ADDF123:
0004cb 3058      	CPI  R21,8
0004cc f028      	BRLO __ADDF124
0004cd 2fab      	MOV  R26,R27
0004ce 2fb8      	MOV  R27,R24
0004cf 2788      	CLR  R24
0004d0 5058      	SUBI R21,8
0004d1 cff9      	RJMP __ADDF123
                 __ADDF124:
0004d2 2355      	TST  R21
0004d3 f029      	BREQ __ADDF126
                 __ADDF125:
0004d4 9586      	LSR  R24
0004d5 95b7      	ROR  R27
0004d6 95a7      	ROR  R26
0004d7 955a      	DEC  R21
0004d8 f7d9      	BRNE __ADDF125
                 __ADDF126:
0004d9 2d50      	MOV  R21,R0
0004da 2551      	EOR  R21,R1
0004db f072      	BRMI __ADDF127
0004dc dfd2      	RCALL __UADD12
0004dd f438      	BRCC __ADDF129
0004de 9567      	ROR  R22
0004df 95f7      	ROR  R31
0004e0 95e7      	ROR  R30
0004e1 9573      	INC  R23
0004e2 f413      	BRVC __ADDF129
0004e3 c01f      	RJMP __MAXRES
                 __ADDF128:
0004e4 dfbe      	RCALL __SWAPACC
                 __ADDF129:
0004e5 df45      	RCALL __REPACK
0004e6 915f      	POP  R21
0004e7 9508      	RET
                 __ADDF1211:
0004e8 f7d8      	BRCC __ADDF128
0004e9 cffb      	RJMP __ADDF129
                 __ADDF127:
0004ea 1bea      	SUB  R30,R26
0004eb 0bfb      	SBC  R31,R27
0004ec 0b68      	SBC  R22,R24
0004ed f051      	BREQ __ZERORES
0004ee f410      	BRCC __ADDF1210
0004ef 9400      	COM  R0
0004f0 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
0004f1 2366      	TST  R22
0004f2 f392      	BRMI __ADDF129
0004f3 0fee      	LSL  R30
0004f4 1fff      	ROL  R31
0004f5 1f66      	ROL  R22
0004f6 957a      	DEC  R23
0004f7 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0004f8 27ee      	CLR  R30
0004f9 27ff      	CLR  R31
0004fa 01bf      	MOVW R22,R30
0004fb 915f      	POP  R21
0004fc 9508      	RET
                 
                 __MINRES:
0004fd efef      	SER  R30
0004fe efff      	SER  R31
0004ff e76f      	LDI  R22,0x7F
000500 ef7f      	SER  R23
000501 915f      	POP  R21
000502 9508      	RET
                 
                 __MAXRES:
000503 efef      	SER  R30
000504 efff      	SER  R31
000505 e76f      	LDI  R22,0x7F
000506 e77f      	LDI  R23,0x7F
000507 915f      	POP  R21
000508 9508      	RET
                 
                 __MULF12:
000509 935f      	PUSH R21
00050a df32      	RCALL __UNPACK
00050b 3870      	CPI  R23,0x80
00050c f359      	BREQ __ZERORES
00050d 3890      	CPI  R25,0x80
00050e f349      	BREQ __ZERORES
00050f 2401      	EOR  R0,R1
000510 9408      	SEC
000511 1f79      	ADC  R23,R25
000512 f423      	BRVC __MULF124
000513 f324      	BRLT __ZERORES
                 __MULF125:
000514 2000      	TST  R0
000515 f33a      	BRMI __MINRES
000516 cfec      	RJMP __MAXRES
                 __MULF124:
000517 920f      	PUSH R0
000518 931f      	PUSH R17
000519 932f      	PUSH R18
00051a 933f      	PUSH R19
00051b 934f      	PUSH R20
00051c 2711      	CLR  R17
00051d 2722      	CLR  R18
00051e 2799      	CLR  R25
00051f 9f68      	MUL  R22,R24
000520 01a0      	MOVW R20,R0
000521 9f8f      	MUL  R24,R31
000522 2d30      	MOV  R19,R0
000523 0d41      	ADD  R20,R1
000524 1f59      	ADC  R21,R25
000525 9f6b      	MUL  R22,R27
000526 0d30      	ADD  R19,R0
000527 1d41      	ADC  R20,R1
000528 1f59      	ADC  R21,R25
000529 9f8e      	MUL  R24,R30
00052a d027      	RCALL __MULF126
00052b 9fbf      	MUL  R27,R31
00052c d025      	RCALL __MULF126
00052d 9f6a      	MUL  R22,R26
00052e d023      	RCALL __MULF126
00052f 9fbe      	MUL  R27,R30
000530 d01d      	RCALL __MULF127
000531 9faf      	MUL  R26,R31
000532 d01b      	RCALL __MULF127
000533 9fae      	MUL  R26,R30
000534 0d11      	ADD  R17,R1
000535 1f29      	ADC  R18,R25
000536 1f39      	ADC  R19,R25
000537 1f49      	ADC  R20,R25
000538 1f59      	ADC  R21,R25
000539 2fe3      	MOV  R30,R19
00053a 2ff4      	MOV  R31,R20
00053b 2f65      	MOV  R22,R21
00053c 2f52      	MOV  R21,R18
00053d 914f      	POP  R20
00053e 913f      	POP  R19
00053f 912f      	POP  R18
000540 911f      	POP  R17
000541 900f      	POP  R0
000542 2366      	TST  R22
000543 f02a      	BRMI __MULF122
000544 0f55      	LSL  R21
000545 1fee      	ROL  R30
000546 1fff      	ROL  R31
000547 1f66      	ROL  R22
000548 c002      	RJMP __MULF123
                 __MULF122:
000549 9573      	INC  R23
00054a f24b      	BRVS __MULF125
                 __MULF123:
00054b ded5      	RCALL __ROUND_REPACK
00054c 915f      	POP  R21
00054d 9508      	RET
                 
                 __MULF127:
00054e 0d10      	ADD  R17,R0
00054f 1d21      	ADC  R18,R1
000550 1f39      	ADC  R19,R25
000551 c002      	RJMP __MULF128
                 __MULF126:
000552 0d20      	ADD  R18,R0
000553 1d31      	ADC  R19,R1
                 __MULF128:
000554 1f49      	ADC  R20,R25
000555 1f59      	ADC  R21,R25
000556 9508      	RET
                 
                 _delay_ms:
000557 9610      	adiw r26,0
000558 f039      	breq __delay_ms1
                 __delay_ms0:
000559 95a8      	wdr
                +
00055a ee88     +LDI R24 , LOW ( 0x3E8 )
00055b e093     +LDI R25 , HIGH ( 0x3E8 )
                +__DELAY_USW_LOOP :
00055c 9701     +SBIW R24 , 1
00055d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3E8
00055e 9711      	sbiw r26,1
00055f f7c9      	brne __delay_ms0
                 __delay_ms1:
000560 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  42 r1 :  32 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   5 r9 :   0 r10:   3 r11:   2 r12:   8 r13:   4 r14:   0 r15:   2 
r16:  21 r17:  45 r18:  13 r19:  12 r20:  19 r21:  58 r22:  54 r23:  43 
r24:  52 r25:  33 r26: 134 r27:  43 r28:  19 r29:   2 r30: 316 r31:  79 
x  :   9 y  : 144 z  :  13 
Registers used: 27 out of 35 (77.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  20 add   :  14 
adiw  :  14 and   :   2 andi  :  21 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  24 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 
brlt  :   1 brmi  :   6 brne  :  28 brpl  :   5 brsh  :   1 brtc  :   3 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   1 call  :   0 
cbi   :  11 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  27 cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :   8 
cp    :   8 cpc   :   3 cpi   :  22 cpse  :   0 dec   :  13 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  11 inc   :   3 jmp   :  24 ld    :  26 ldd   :  38 ldi   : 164 
lds   :  15 lpm   :   8 lsl   :  12 lsr   :   4 mov   :  71 movw  :  27 
mul   :  12 muls  :   1 mulsu :   0 neg   :   8 nop   :   0 or    :   3 
ori   :   0 out   :  55 pop   :  17 push  :  16 rcall : 150 ret   :  58 
reti  :   1 rjmp  :  49 rol   :  16 ror   :  14 sbc   :   5 sbci  :  14 
sbi   :   7 sbic  :   1 sbis  :   2 sbiw  :  14 sbr   :   1 sbrc  :   2 
sbrs  :   4 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   9 
ses   :   0 set   :   5 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  71 std   :  23 sts   :   8 sub   :   4 subi  :  16 swap  :   3 
tst   :  11 wdr   :   1 
Instructions used: 76 out of 116 (65.5%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000ac2   2634    120   2754   16384  16.8%
[.dseg] 0x000060 0x00018d      0     45     45    1024   4.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 14 warnings
