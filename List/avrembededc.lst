
AVRASM ver. 2.1.30  D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm Thu Jun 23 10:59:52 2016

D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1095): warning: Register r5 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1096): warning: Register r4 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1097): warning: Register r7 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1098): warning: Register r6 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1099): warning: Register r9 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1100): warning: Register r8 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1101): warning: Register r10 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1102): warning: Register r11 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1103): warning: Register r12 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1104): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.24 Evaluation
                 ;(C) Copyright 1998-2015 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _kytu=R6
                 	.DEF _b=R9
                 	.DEF _received_byte=R8
                 	.DEF _isComplete=R10
                 	.DEF _isComplete_msb=R11
                 	.DEF _package_size=R12
                 	.DEF _package_size_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0066 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 026d 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0200      	.DB  0x0,0x0,0x0,0x2
000036 0001
000037 0000      	.DB  0x1,0x0,0x0,0x0
                 
                 _0xA0004:
000038 f9c0
000039 b0a4
00003a 9299
00003b f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
00003c 9080      	.DB  0x80,0x90
                 _0xA0024:
00003d 0f1e
00003e 050a
00003f 050c
000040 0110      	.DB  0x1E,0xF,0xA,0x5,0xC,0x5,0x10,0x1
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1155): warning: .cseg .db misalignment - padding zero byte
000041 0001      	.DB  0x1
                 _0xA0000:
000042 684e
000043 6569
000044 2074
000045 6f64      	.DB  0x4E,0x68,0x69,0x65,0x74,0x20,0x64,0x6F
000046 6820
000047 6569
000048 206e
000049 6174      	.DB  0x20,0x68,0x69,0x65,0x6E,0x20,0x74,0x61
00004a 2069
00004b 616c
00004c 2520
00004d 0066      	.DB  0x69,0x20,0x6C,0x61,0x20,0x25,0x66,0x0
00004e 6978
00004f 206e
000050 6863
000051 6f61      	.DB  0x78,0x69,0x6E,0x20,0x63,0x68,0x61,0x6F
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1161): warning: .cseg .db misalignment - padding zero byte
000052 0000      	.DB  0x0
                 _0x2000060:
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1163): warning: .cseg .db misalignment - padding zero byte
000053 0001      	.DB  0x1
                 _0x2000000:
000054 4e2d
000055 4e41
000056 4900
000057 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1166): warning: .cseg .db misalignment - padding zero byte
000058 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000059 0001      	.DW  0x01
00005a 0002      	.DW  0x02
00005b 0066      	.DW  __REG_BIT_VARS*2
                 
00005c 0008      	.DW  0x08
00005d 0006      	.DW  0x06
00005e 0068      	.DW  __REG_VARS*2
                 
00005f 000a      	.DW  0x0A
000060 016f      	.DW  _ma
000061 0070      	.DW  _0xA0004*2
                 
000062 0001      	.DW  0x01
000063 0189      	.DW  __seed_G100
000064 00a6      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
000065 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000066 94f8      	CLI
000067 27ee      	CLR  R30
000068 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000069 e0f1      	LDI  R31,1
00006a bffb      	OUT  GICR,R31
00006b bfeb      	OUT  GICR,R30
00006c bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00006d e1f8      	LDI  R31,0x18
00006e bdf1      	OUT  WDTCR,R31
00006f bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000070 e08d      	LDI  R24,(14-2)+1
000071 e0a2      	LDI  R26,2
000072 27bb      	CLR  R27
                 __CLEAR_REG:
000073 93ed      	ST   X+,R30
000074 958a      	DEC  R24
000075 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000076 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000077 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000078 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000079 93ed      	ST   X+,R30
00007a 9701      	SBIW R24,1
00007b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00007c ebe2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00007d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007e 9185      	LPM  R24,Z+
00007f 9195      	LPM  R25,Z+
000080 9700      	SBIW R24,0
000081 f061      	BREQ __GLOBAL_INI_END
000082 91a5      	LPM  R26,Z+
000083 91b5      	LPM  R27,Z+
000084 9005      	LPM  R0,Z+
000085 9015      	LPM  R1,Z+
000086 01bf      	MOVW R22,R30
000087 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000088 9005      	LPM  R0,Z+
000089 920d      	ST   X+,R0
00008a 9701      	SBIW R24,1
00008b f7e1      	BRNE __GLOBAL_INI_LOOP
00008c 01fb      	MOVW R30,R22
00008d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008f bfed      	OUT  SPL,R30
000090 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000091 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000092 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000093 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000094 940c 028a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <myds18b20ver1.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// the following arrays specify the addresses of *my* ds18b20 devices
                 ;// substitute the address of your devices before using.
                 ;
                 ;//byte rom0[] = {0x28, 0xE1, 0x21, 0xA3, 0x02, 0x00, 0x00, 0x5B};
                 ;//byte rom1[] = {0x28, 0x1B, 0x21, 0x30, 0x05, 0x00, 0x00, 0xF5};
                 ;
                 ;byte therm_Reset() {
                 ; 0000 0009 byte therm_Reset() {
                 
                 	.CSEG
                 ; 0000 000A     byte i;
                 ; 0000 000B     THERM_OUTPUT(); // set pin as output
                 ;	i -> R17
                 ; 0000 000C     THERM_LOW(); // pull pin low for 480uS
                 ; 0000 000D     delay_us(480);
                 ; 0000 000E     THERM_INPUT(); // set pin as input
                 ; 0000 000F     delay_us(60); // wait for 60uS
                 ; 0000 0010     i = THERM_READ(); // get pin value
                 ; 0000 0011     delay_us(420); // wait for rest of 480uS period
                 ; 0000 0012     return i;
                 ; 0000 0013 }
                 ;
                 ;void therm_WriteBit(byte _bit) {
                 ; 0000 0015 void therm_WriteBit(byte _bit) {
                 ; 0000 0016     THERM_OUTPUT(); // set pin as output
                 ;	_bit -> Y+0
                 ; 0000 0017     THERM_LOW(); // pull pin low for 1uS
                 ; 0000 0018     delay_us(1);
                 ; 0000 0019     if (_bit) THERM_INPUT(); // to write 1, float pin
                 ; 0000 001A     delay_us(60);
                 ; 0000 001B     THERM_INPUT(); // wait 60uS & release pin
                 ; 0000 001C }
                 ;
                 ;byte therm_ReadBit() {
                 ; 0000 001E byte therm_ReadBit() {
                 ; 0000 001F     byte _bit = 0;
                 ; 0000 0020     THERM_OUTPUT(); // set pin as output
                 ;	_bit -> R17
                 ; 0000 0021     THERM_LOW(); // pull pin low for 1uS
                 ; 0000 0022     delay_us(1);
                 ; 0000 0023     THERM_INPUT(); // release pin & wait 14 uS
                 ; 0000 0024     delay_us(14);
                 ; 0000 0025     if (THERM_READ()) _bit = 1; // read pin value
                 ; 0000 0026     delay_us(45); // wait rest of 60uS period
                 ; 0000 0027     return _bit;
                 ; 0000 0028 }
                 ;
                 ;void therm_WriteByte(byte data) {
                 ; 0000 002A void therm_WriteByte(byte data) {
                 ; 0000 002B     byte i = 8;
                 ; 0000 002C     while (i--) // for 8 bits:
                 ;	data -> Y+1
                 ;	i -> R17
                 ; 0000 002D     {
                 ; 0000 002E         therm_WriteBit(data & 1); // send least significant bit
                 ; 0000 002F         data >>= 1; // shift all bits right
                 ; 0000 0030     }
                 ; 0000 0031 }
                 ;
                 ;byte therm_ReadByte() {
                 ; 0000 0033 byte therm_ReadByte() {
                 ; 0000 0034     byte i = 8, data = 0;
                 ; 0000 0035     while (i--) // for 8 bits:
                 ;	i -> R17
                 ;	data -> R16
                 ; 0000 0036     {
                 ; 0000 0037         data >>= 1; // shift all bits right
                 ; 0000 0038         data |= (therm_ReadBit() << 7); // get next bit (LSB first)
                 ; 0000 0039     }
                 ; 0000 003A     return data;
                 ; 0000 003B }
                 ;
                 ;//void therm_MatchRom(byte rom[]) {
                 ;//    byte i;
                 ;//    therm_WriteByte(THERM_MATCHROM);
                 ;//    for (i = 0; i < 8; i++)
                 ;//        therm_WriteByte(rom[i]);
                 ;//}
                 ;
                 ;void therm_ReadTempRaw(byte id[], byte *t0, byte *t1)
                 ; 0000 0045 // Returns the two temperature bytes from the scratchpad
                 ; 0000 0046 {
                 ; 0000 0047 //    therm_Reset(); // skip ROM & start temp conversion
                 ; 0000 0048 
                 ; 0000 0049     //    if (id) therm_MatchRom(id);
                 ; 0000 004A     //    else therm_WriteByte(THERM_SKIPROM);
                 ; 0000 004B     //    therm_WriteByte(THERM_CONVERTTEMP);
                 ; 0000 004C     //    while (!therm_ReadBit()); // wait until conversion completed
                 ; 0000 004D     //    therm_Reset(); // read first two bytes from scratchpad
                 ; 0000 004E     //    if (id) therm_MatchRom(id);
                 ; 0000 004F     //    else therm_WriteByte(THERM_SKIPROM);
                 ; 0000 0050 
                 ; 0000 0051     therm_Reset(); // skip ROM & start temp conversion
                 ;	id -> Y+4
                 ;	*t0 -> Y+2
                 ;	*t1 -> Y+0
                 ; 0000 0052     therm_WriteByte(THERM_SKIPROM);
                 ; 0000 0053     therm_WriteByte(THERM_CONVERTTEMP);
                 ; 0000 0054     while (!therm_ReadBit()); // wait until conversion completed
                 ; 0000 0055 
                 ; 0000 0056     therm_Reset(); // read first two bytes from scratchpad
                 ; 0000 0057     therm_WriteByte(THERM_SKIPROM);
                 ; 0000 0058 
                 ; 0000 0059     therm_WriteByte(THERM_READSCRATCH);
                 ; 0000 005A     *t0 = therm_ReadByte(); // first byte
                 ; 0000 005B     *t1 = therm_ReadByte(); // second byte
                 ; 0000 005C }
                 ;
                 ;void therm_ReadTempC(byte id[], int *whole, int *decimal)
                 ; 0000 005F // returns temperature in Celsius as WW.DDDD, where W=whole & D=decimal
                 ; 0000 0060 {
                 ; 0000 0061     byte t0, t1;
                 ; 0000 0062     therm_ReadTempRaw(id, &t0, &t1); // get temperature values
                 ;	id -> Y+6
                 ;	*whole -> Y+4
                 ;	*decimal -> Y+2
                 ;	t0 -> R17
                 ;	t1 -> R16
                 ; 0000 0063     *whole = (t1 & 0x07) << 4; // grab lower 3 bits of t1
                 ; 0000 0064     *whole |= t0 >> 4; // and upper 4 bits of t0
                 ; 0000 0065     *decimal = t0 & 0x0F; // decimals in lower 4 bits of t0
                 ; 0000 0066     *decimal *= 625; // conversion factor for 12-bit resolution
                 ; 0000 0067 }
                 ;
                 ;void therm_ReadTempF(byte id[], int *whole, int *decimal)
                 ; 0000 006A // returns temperature in Fahrenheit as WW.D, where W=whole & D=decimal
                 ; 0000 006B {
                 ; 0000 006C     byte t0, t1;
                 ; 0000 006D     int t16, t2, f10;
                 ; 0000 006E     therm_ReadTempRaw(id, &t0, &t1); // get temperature values
                 ;	id -> Y+12
                 ;	*whole -> Y+10
                 ;	*decimal -> Y+8
                 ;	t0 -> R17
                 ;	t1 -> R16
                 ;	t16 -> R18,R19
                 ;	t2 -> R20,R21
                 ;	f10 -> Y+6
                 ; 0000 006F     t16 = (t1 << 8) + t0; // result is temp*16, in celcius
                 ; 0000 0070     t2 = t16 / 8; // get t*2, with fractional part lost
                 ; 0000 0071     f10 = t16 + t2 + 320; // F=1.8C+32, so 10F = 18C+320 = 16C + 2C + 320
                 ; 0000 0072     *whole = f10 / 10; // get whole part
                 ; 0000 0073     *decimal = f10 % 10; // get fractional part
                 ; 0000 0074 }
                 ;
                 ;//inline __attribute__((gnu_inline)) void quickDelay(int delay)
                 ;//// this routine will pause 0.25uS per delay unit
                 ;//// for testing only; use _us_Delay() routine for >1uS delays
                 ;//{
                 ;//    while (delay--) // uses sbiw to subtract 1 from 16bit word
                 ;//        asm volatile("nop"); // nop, sbiw, brne = 4 cycles = 0.25 uS
                 ;//}
                 ;
                 ;// ---------------------------------------------------------------------------
                 ;// ROM READER PROGRAM
                 ;
                 ;byte RomReaderProgram()
                 ; 0000 0082 // Read the ID of the attached Dallas 18B20 device
                 ; 0000 0083 // Note: only ONE device should be on the bus.
                 ; 0000 0084 {
                 ; 0000 0085     byte i;
                 ; 0000 0086     byte data;
                 ; 0000 0087     //    LCD_String("ID (ROM) Reader:");
                 ; 0000 0088 //    while (1) {
                 ; 0000 0089         //        LCD_Line(1);
                 ; 0000 008A         // write 64-bit ROM code on first LCD line
                 ; 0000 008B         therm_Reset();
                 ;	i -> R17
                 ;	data -> R16
                 ; 0000 008C         therm_WriteByte(THERM_READROM);
                 ; 0000 008D //        for (i = 0; i < 8; i++) {
                 ; 0000 008E             data = therm_ReadByte();
                 ; 0000 008F             //            LCD_HexByte(data);
                 ; 0000 0090 //        }
                 ; 0000 0091         //        msDelay(1000); // do a read every second
                 ; 0000 0092 //    }
                 ; 0000 0093         return data;
                 ; 0000 0094 }
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#include <myds18b20ver2.h>
                 ;
                 ;/*
                 ; * ds18b20 init
                 ; */
                 ;uint8_t ds18b20_reset(void) {
                 ; 0001 000A uint8_t ds18b20_reset(void) {
                 
                 	.CSEG
                 _ds18b20_reset:
                 ; .FSTART _ds18b20_reset
                 ; 0001 000B 	uint8_t i;
                 ; 0001 000C 
                 ; 0001 000D 	//low for 480us
                 ; 0001 000E 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
000096 931a      	ST   -Y,R17
                 ;	i -> R17
000097 98c0      	CBI  0x18,0
                 ; 0001 000F 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
000098 9ab8      	SBI  0x17,0
                 ; 0001 0010 	delay_us(480);
                +
000099 ee80     +LDI R24 , LOW ( 480 )
00009a e091     +LDI R25 , HIGH ( 480 )
                +__DELAY_USW_LOOP :
00009b 9701     +SBIW R24 , 1
00009c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 480
                 ; 0001 0011 
                 ; 0001 0012 	//release line and wait for 60uS
                 ; 0001 0013 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
00009d 98b8      	CBI  0x17,0
                 ; 0001 0014 	delay_us(60);
                +
00009e e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
00009f 958a     +DEC R24
0000a0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0001 0015 
                 ; 0001 0016 	//get value and wait 420us
                 ; 0001 0017 	i = (DS18B20_PIN & (1<<DS18B20_DQ));
0000a1 b3e6      	IN   R30,0x16
0000a2 70e1      	ANDI R30,LOW(0x1)
0000a3 2f1e      	MOV  R17,R30
                 ; 0001 0018 	delay_us(420);
                +
0000a4 ea84     +LDI R24 , LOW ( 420 )
0000a5 e091     +LDI R25 , HIGH ( 420 )
                +__DELAY_USW_LOOP :
0000a6 9701     +SBIW R24 , 1
0000a7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 420
                 ; 0001 0019 
                 ; 0001 001A 	//return the read value, 0=ok, 1=error
                 ; 0001 001B 	return i;
0000a8 c018      	RJMP _0x20A0006
                 ; 0001 001C }
                 ; .FEND
                 ;
                 ;/*
                 ; * write one bit
                 ; */
                 ;void ds18b20_writebit(uint8_t _bit){
                 ; 0001 0021 void ds18b20_writebit(uint8_t _bit){
                 _ds18b20_writebit:
                 ; .FSTART _ds18b20_writebit
                 ; 0001 0022 	//low for 1uS
                 ; 0001 0023 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
0000a9 93aa      	ST   -Y,R26
                 ;	_bit -> Y+0
0000aa d2a2      	RCALL SUBOPT_0x0
                 ; 0001 0024 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
                 ; 0001 0025 	delay_us(1);
                 ; 0001 0026 
                 ; 0001 0027 	//if we want to write 1, release the line (if not will keep low)
                 ; 0001 0028 	if(_bit)
0000ab 81e8      	LD   R30,Y
0000ac 30e0      	CPI  R30,0
0000ad f009      	BREQ _0x20003
                 ; 0001 0029 		DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
0000ae 98b8      	CBI  0x17,0
                 ; 0001 002A 
                 ; 0001 002B 	//wait 60uS and release the line
                 ; 0001 002C 	delay_us(60);
                 _0x20003:
                +
0000af e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
0000b0 958a     +DEC R24
0000b1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0001 002D 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
0000b2 98b8      	CBI  0x17,0
                 ; 0001 002E }
0000b3 940c 034b 	JMP  _0x20A0002
                 ; .FEND
                 ;
                 ;/*
                 ; * read one bit
                 ; */
                 ;uint8_t ds18b20_readbit(void){
                 ; 0001 0033 uint8_t ds18b20_readbit(void){
                 _ds18b20_readbit:
                 ; .FSTART _ds18b20_readbit
                 ; 0001 0034 	uint8_t _bit=0;
                 ; 0001 0035 
                 ; 0001 0036 	//low for 1uS
                 ; 0001 0037 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
0000b5 931a      	ST   -Y,R17
                 ;	_bit -> R17
0000b6 e010      	LDI  R17,0
0000b7 d295      	RCALL SUBOPT_0x0
                 ; 0001 0038 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
                 ; 0001 0039 	delay_us(1);
                 ; 0001 003A 
                 ; 0001 003B 	//release line and wait for 14uS
                 ; 0001 003C 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
0000b8 98b8      	CBI  0x17,0
                 ; 0001 003D 	delay_us(14);
                +
0000b9 e183     +LDI R24 , LOW ( 19 )
                +__DELAY_USB_LOOP :
0000ba 958a     +DEC R24
0000bb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 19
                 ; 0001 003E 
                 ; 0001 003F 	//read the value
                 ; 0001 0040 	if(DS18B20_PIN & (1<<DS18B20_DQ))
0000bc 99b0      	SBIC 0x16,0
                 ; 0001 0041 		_bit=1;
0000bd e011      	LDI  R17,LOW(1)
                 ; 0001 0042 
                 ; 0001 0043 	//wait 45uS and return read value
                 ; 0001 0044 	delay_us(45);
                +
0000be e38c     +LDI R24 , LOW ( 60 )
                +__DELAY_USB_LOOP :
0000bf 958a     +DEC R24
0000c0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 60
                 ; 0001 0045 	return _bit;
                 _0x20A0006:
0000c1 2fe1      	MOV  R30,R17
0000c2 9119      	LD   R17,Y+
0000c3 9508      	RET
                 ; 0001 0046 }
                 ; .FEND
                 ;
                 ;/*
                 ; * write one byte
                 ; */
                 ;void ds18b20_writebyte(uint8_t _byte){
                 ; 0001 004B void ds18b20_writebyte(uint8_t _byte){
                 _ds18b20_writebyte:
                 ; .FSTART _ds18b20_writebyte
                 ; 0001 004C 	uint8_t i=8;
                 ; 0001 004D 	while(i--){
0000c4 93aa      	ST   -Y,R26
0000c5 931a      	ST   -Y,R17
                 ;	_byte -> Y+1
                 ;	i -> R17
0000c6 e018      	LDI  R17,8
                 _0x20005:
0000c7 2fe1      	MOV  R30,R17
0000c8 5011      	SUBI R17,1
0000c9 30e0      	CPI  R30,0
0000ca f041      	BREQ _0x20007
                 ; 0001 004E 		ds18b20_writebit(_byte&1);
0000cb 81e9      	LDD  R30,Y+1
0000cc 70e1      	ANDI R30,LOW(0x1)
0000cd 2fae      	MOV  R26,R30
0000ce dfda      	RCALL _ds18b20_writebit
                 ; 0001 004F 		_byte >>= 1;
0000cf 81e9      	LDD  R30,Y+1
0000d0 95e6      	LSR  R30
0000d1 83e9      	STD  Y+1,R30
                 ; 0001 0050 	}
0000d2 cff4      	RJMP _0x20005
                 _0x20007:
                 ; 0001 0051 }
0000d3 8118      	LDD  R17,Y+0
0000d4 9622      	ADIW R28,2
0000d5 9508      	RET
                 ; .FEND
                 ;
                 ;/*
                 ; * read one byte
                 ; */
                 ;uint8_t ds18b20_readbyte(void){
                 ; 0001 0056 uint8_t ds18b20_readbyte(void){
                 _ds18b20_readbyte:
                 ; .FSTART _ds18b20_readbyte
                 ; 0001 0057 	uint8_t i=8, n=0;
                 ; 0001 0058 	while(i--){
0000d6 931a      	ST   -Y,R17
0000d7 930a      	ST   -Y,R16
                 ;	i -> R17
                 ;	n -> R16
0000d8 e018      	LDI  R17,8
0000d9 e000      	LDI  R16,0
                 _0x20008:
0000da 2fe1      	MOV  R30,R17
0000db 5011      	SUBI R17,1
0000dc 30e0      	CPI  R30,0
0000dd f039      	BREQ _0x2000A
                 ; 0001 0059 		n >>= 1;
0000de 9506      	LSR  R16
                 ; 0001 005A 		n |= (ds18b20_readbit()<<7);
0000df dfd5      	RCALL _ds18b20_readbit
0000e0 95e7      	ROR  R30
0000e1 e0e0      	LDI  R30,0
0000e2 95e7      	ROR  R30
0000e3 2b0e      	OR   R16,R30
                 ; 0001 005B 	}
0000e4 cff5      	RJMP _0x20008
                 _0x2000A:
                 ; 0001 005C 	return n;
0000e5 2fe0      	MOV  R30,R16
0000e6 9109      	LD   R16,Y+
0000e7 9119      	LD   R17,Y+
0000e8 9508      	RET
                 ; 0001 005D }
                 ; .FEND
                 ;
                 ;/*
                 ; * get temperature in celsius
                 ; */
                 ;double ds18b20_gettemp(void) {
                 ; 0001 0062 double ds18b20_gettemp(void) {
                 _ds18b20_gettemp:
                 ; .FSTART _ds18b20_gettemp
                 ; 0001 0063 	uint8_t temperature[2];
                 ; 0001 0064 	int8_t digit;
                 ; 0001 0065 	uint16_t decimal;
                 ; 0001 0066 	double retd = 0;
                 ; 0001 0067 
                 ; 0001 0068 	ds18b20_reset(); //reset
0000e9 9726      	SBIW R28,6
0000ea d268      	RCALL SUBOPT_0x1
0000eb d2c2      	RCALL __SAVELOCR4
                 ;	temperature -> Y+8
                 ;	digit -> R17
                 ;	decimal -> R18,R19
                 ;	retd -> Y+4
0000ec dfa9      	RCALL _ds18b20_reset
                 ; 0001 0069 	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
0000ed ecac      	LDI  R26,LOW(204)
0000ee dfd5      	RCALL _ds18b20_writebyte
                 ; 0001 006A 	ds18b20_writebyte(DS18B20_CMD_CONVERTTEMP); //start temperature conversion
0000ef e4a4      	LDI  R26,LOW(68)
0000f0 dfd3      	RCALL _ds18b20_writebyte
                 ; 0001 006B 
                 ; 0001 006C 	while(!ds18b20_readbit()); //wait until conversion is complete
                 _0x2000B:
0000f1 dfc3      	RCALL _ds18b20_readbit
0000f2 30e0      	CPI  R30,0
0000f3 f3e9      	BREQ _0x2000B
                 ; 0001 006D 
                 ; 0001 006E 	ds18b20_reset(); //reset
0000f4 dfa1      	RCALL _ds18b20_reset
                 ; 0001 006F 	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
0000f5 ecac      	LDI  R26,LOW(204)
0000f6 dfcd      	RCALL _ds18b20_writebyte
                 ; 0001 0070 	ds18b20_writebyte(DS18B20_CMD_RSCRATCHPAD); //read scratchpad
0000f7 ebae      	LDI  R26,LOW(190)
0000f8 dfcb      	RCALL _ds18b20_writebyte
                 ; 0001 0071 
                 ; 0001 0072 	//read 2 byte from scratchpad
                 ; 0001 0073 	temperature[0] = ds18b20_readbyte();
0000f9 dfdc      	RCALL _ds18b20_readbyte
0000fa 87e8      	STD  Y+8,R30
                 ; 0001 0074 	temperature[1] = ds18b20_readbyte();
0000fb dfda      	RCALL _ds18b20_readbyte
0000fc 87e9      	STD  Y+9,R30
                 ; 0001 0075 
                 ; 0001 0076 	ds18b20_reset(); //reset
0000fd df98      	RCALL _ds18b20_reset
                 ; 0001 0077 
                 ; 0001 0078 	//store temperature integer digits
                 ; 0001 0079 	digit = temperature[0]>>4;
0000fe 85e8      	LDD  R30,Y+8
0000ff 95e2      	SWAP R30
000100 70ef      	ANDI R30,0xF
000101 2f1e      	MOV  R17,R30
                 ; 0001 007A 	digit |= (temperature[1]&0x7)<<4;
000102 85e9      	LDD  R30,Y+9
000103 70e7      	ANDI R30,LOW(0x7)
000104 95e2      	SWAP R30
000105 7fe0      	ANDI R30,0xF0
000106 2b1e      	OR   R17,R30
                 ; 0001 007B 
                 ; 0001 007C 	//store temperature decimal digits
                 ; 0001 007D 	decimal = temperature[0]&0xf;
000107 85e8      	LDD  R30,Y+8
000108 e0f0      	LDI  R31,0
000109 70ef      	ANDI R30,LOW(0xF)
00010a 70f0      	ANDI R31,HIGH(0xF)
00010b 019f      	MOVW R18,R30
                 ; 0001 007E 	decimal *= DS18B20_DECIMALSTEPS;
00010c e7a1      	LDI  R26,LOW(625)
00010d e0b2      	LDI  R27,HIGH(625)
00010e d2d2      	RCALL __MULW12U
00010f 019f      	MOVW R18,R30
                 ; 0001 007F 
                 ; 0001 0080 	//compose the double temperature value and return it
                 ; 0001 0081 	retd = digit + decimal * 0.0001;
000110 2fe1      	MOV  R30,R17
000111 e0f0      	LDI  R31,0
000112 fde7      	SBRC R30,7
000113 efff      	SER  R31
000114 93ff      	PUSH R31
000115 93ef      	PUSH R30
000116 01f9      	MOVW R30,R18
000117 2766      	CLR  R22
000118 2777      	CLR  R23
000119 d38a      	RCALL __CDF1
                +
00011a e1a7     +LDI R26 , LOW ( 0x38D1B717 )
00011b ebb7     +LDI R27 , HIGH ( 0x38D1B717 )
00011c ed81     +LDI R24 , BYTE3 ( 0x38D1B717 )
00011d e398     +LDI R25 , BYTE4 ( 0x38D1B717 )
                 	__GETD2N 0x38D1B717
00011e d407      	RCALL __MULF12
00011f 91af      	POP  R26
000120 91bf      	POP  R27
000121 d2b0      	RCALL __CWD2
000122 d301      	RCALL __CDF2
000123 d3b3      	RCALL __ADDF12
                +
000124 83ec     +STD Y + 4 , R30
000125 83fd     +STD Y + 4 + 1 , R31
000126 836e     +STD Y + 4 + 2 , R22
000127 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0001 0082 
                 ; 0001 0083 	return retd;
000128 d28c      	RCALL __LOADLOCR4
000129 962a      	ADIW R28,10
00012a 9508      	RET
                 ; 0001 0084 }
                 ; .FEND
                 ;#include <myds1307rtc.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;//Khoi dong TWI
                 ;unsigned char registry_ds1307[7]; // mang de luu tam cac gia tri doc duoc tu thanh ghi cua ds1307
                 ;
                 ;void TWI_Init(void) {
                 ; 0002 0006 void TWI_Init(void) {
                 
                 	.CSEG
                 ; 0002 0007     TWSR = 0x00; //Prescaler=1
                 ; 0002 0008     TWBR = _100K;
                 ; 0002 0009     TWCR = (1 << TWINT) | (1 << TWEN);
                 ; 0002 000A }
                 ;
                 ;///chon dia chi thanh ghi can thao tac, dummy write
                 ;//Addr: dia thi thanh ghi can ghi
                 ;
                 ;unsigned char TWI_DS1307_wadr(unsigned char Addr) {
                 ; 0002 000F unsigned char TWI_DS1307_wadr(unsigned char Addr) {
                 ; 0002 0010 
                 ; 0002 0011     TWCR = TWI_START; //goi START condition
                 ;	Addr -> Y+0
                 ; 0002 0012     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 0013     if ((TWSR & 0xF8) != 0x08) return TWSR; //neu goi Start co loi thi thoat
                 ; 0002 0014 
                 ; 0002 0015     TWDR = (DS1307_SLA << 1) + TWI_W; //dia chi DS va bit W
                 ; 0002 0016     TWCR = TWI_Clear_TWINT; //xoa TWINT, bat dau goi SLA
                 ; 0002 0017     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 0018     if ((TWSR & 0xF8) != 0x18) return TWSR; //device address send error, escape anyway
                 ; 0002 0019 
                 ; 0002 001A     TWDR = Addr; //goi dia chi thanh ghi can ghi vao
                 ; 0002 001B     TWCR = TWI_Clear_TWINT; //start send address by cleaning TWINT
                 ; 0002 001C     while ((TWCR & 0x80) == 0x00); //check and wait for TWINT bit=1
                 ; 0002 001D     if ((TWSR & 0xF8) != 0x28) return TWSR; //neu du lieu goi ko thanh cong thi thoat
                 ; 0002 001E 
                 ; 0002 001F     TWCR = TWI_STOP; //STOP condition
                 ; 0002 0020     return 0;
                 ; 0002 0021 }
                 ;
                 ;//ghi 1 mang dat vao DS
                 ;//Addr: dia thi thanh ghi can ghi
                 ;//Data[]: mang du lieu
                 ;//len: so luong byte can ghi
                 ;
                 ;unsigned char TWI_DS1307_wblock(unsigned char Addr, unsigned char Data[], unsigned char len) {
                 ; 0002 0028 unsigned char TWI_DS1307_wblock(unsigned char Addr, unsigned char Data[], unsigned char len) {
                 ; 0002 0029     unsigned char i = 0;
                 ; 0002 002A     TWCR = TWI_START; //goi START condition
                 ;	Addr -> Y+4
                 ;	Data -> Y+2
                 ;	len -> Y+1
                 ;	i -> R17
                 ; 0002 002B     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 002C     if ((TWSR & 0xF8) != 0x08) return TWSR; //neu goi Start co loi thi thoat
                 ; 0002 002D 
                 ; 0002 002E     TWDR = (DS1307_SLA << 1) + TWI_W; //dia chi DS va bit W
                 ; 0002 002F     TWCR = TWI_Clear_TWINT; //xoa TWINT de bat dau goi
                 ; 0002 0030     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 0031     if ((TWSR & 0xF8) != 0x18) return TWSR; //neu co loi truyen SLA, thoat
                 ; 0002 0032 
                 ; 0002 0033     TWDR = Addr; //goi dia chi thanh ghi can ghi vao
                 ; 0002 0034     TWCR = TWI_Clear_TWINT; //xoa TWINT de bat dau goi
                 ; 0002 0035     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 0036     if ((TWSR & 0xF8) != 0x28) return TWSR;
                 ; 0002 0037 
                 ; 0002 0038     for (i = 0; i < len; i++) {
                 ; 0002 0039         TWDR = Data[i]; //chuan bi xuat du lieu
                 ; 0002 003A         TWCR = TWI_Clear_TWINT; //xoa TWINT, bat dau send
                 ; 0002 003B         while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 003C         if ((TWSR & 0xF8) != 0x28) return TWSR; //neu status ko phai la 0x28 thi return
                 ; 0002 003D     }
                 ; 0002 003E 
                 ; 0002 003F     TWCR = TWI_STOP; //STOP condition
                 ; 0002 0040     return 0;
                 ; 0002 0041 }
                 ;
                 ;//doc 1 mang tu DS
                 ;
                 ;unsigned char TWI_DS1307_rblock(unsigned char Data[], unsigned char len) {
                 ; 0002 0045 unsigned char TWI_DS1307_rblock(unsigned char Data[], unsigned char len) {
                 ; 0002 0046     unsigned char i;
                 ; 0002 0047 
                 ; 0002 0048     TWCR = TWI_START; // Start--------------------------------------------------------------------
                 ;	Data -> Y+2
                 ;	len -> Y+1
                 ;	i -> R17
                 ; 0002 0049     while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x08)); //cho TWINT bit=1 va goi START thanh cong
                 ; 0002 004A 
                 ; 0002 004B     TWDR = (DS1307_SLA << 1) + TWI_R; //goi dia chi SLA +READ
                 ; 0002 004C     TWCR = TWI_Clear_TWINT; //bat dau, xoa TWINT
                 ; 0002 004D     while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x40)); //cho TWINT bit=1	va goi SLA thanh cong
                 ; 0002 004E 
                 ; 0002 004F     //nhan len-1 bytes dau tien---------------------
                 ; 0002 0050     for (i = 0; i < len - 1; i++) {
                 ; 0002 0051         TWCR = TWI_Read_ACK; //xoa TWINT,se goi ACK sau khi nhan moi byte
                 ; 0002 0052         while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x50)); //cho TWINT bit=1 hoac nhan duoc ACK
                 ; 0002 0053         Data[i] = TWDR; //doc du lieu vao mang Data
                 ; 0002 0054     }
                 ; 0002 0055     //nhan byte cuoi
                 ; 0002 0056     TWCR = TWI_Clear_TWINT; //xoa TWINT de nhan byte cuoi, sau do set NOT ACK
                 ; 0002 0057     while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x58)); //cho TWIN=1 hoac trang thai not ack
                 ; 0002 0058     Data[len - 1] = TWDR;
                 ; 0002 0059 
                 ; 0002 005A     TWCR = TWI_STOP; //STOP condition
                 ; 0002 005B     return 0;
                 ; 0002 005C }
                 ;
                 ;//----------------------------------------------------------------------------
                 ;// xay dung lai cac ham ma khong dung thu vien
                 ;
                 ;// doi BCD sang thap phan va nguoc lai------------
                 ;
                 ;unsigned char BCD2Dec(unsigned char BCD) {
                 ; 0002 0063 unsigned char BCD2Dec(unsigned char BCD) {
                 ; 0002 0064     unsigned char L, H;
                 ; 0002 0065     L = BCD & 0x0F;
                 ;	BCD -> Y+2
                 ;	L -> R17
                 ;	H -> R16
                 ; 0002 0066     H = (BCD >> 4)*10;
                 ; 0002 0067     return (H + L);
                 ; 0002 0068 }
                 ;
                 ;unsigned char Dec2BCD(unsigned char Dec) {
                 ; 0002 006A unsigned char Dec2BCD(unsigned char Dec) {
                 ; 0002 006B     unsigned char L, H;
                 ; 0002 006C     L = Dec % 10;
                 ;	Dec -> Y+2
                 ;	L -> R17
                 ;	H -> R16
                 ; 0002 006D     H = (Dec / 10) << 4;
                 ; 0002 006E     return (H + L);
                 ; 0002 006F }
                 ;
                 ;Time myGetTimeFromDS1307() {
                 ; 0002 0071 Time myGetTimeFromDS1307() {
                 ; 0002 0072     Time time;
                 ; 0002 0073     time.Hour = 10;
                 ;	time -> Y+0
                 ; 0002 0074     time.Minute = 15;
                 ; 0002 0075     //    return time;
                 ; 0002 0076     TWI_DS1307_wadr(0x00); //set dia chi ve 0
                 ; 0002 0077     delay_ms(1); //cho DS1307 xu li
                 ; 0002 0078     TWI_DS1307_rblock(registry_ds1307, 7); //doc ca khoi thoi gian (7 bytes)
                 ; 0002 0079 
                 ; 0002 007A     time.Second = BCD2Dec(registry_ds1307[0] & 0x7F);
                 ; 0002 007B     time.Minute = BCD2Dec(registry_ds1307[1]);
                 ; 0002 007C     // mode lay tu bit 6 ( =0 la 24h; =1 la 12h)
                 ; 0002 007D     // mode = 0 la 24h, =1 la 12h
                 ; 0002 007E     time.Mode = ((registry_ds1307[2] & 0x40) != 0);
                 ; 0002 007F     // AM hay PM lay tu bit 5
                 ; 0002 0080     time.AP = ((registry_ds1307[2] & 0x20) != 0);
                 ; 0002 0081     if (time.Mode != 0) time.Hour = BCD2Dec(registry_ds1307[2] & 0x1F); //mode 12h
                 ; 0002 0082     else time.Hour = BCD2Dec(registry_ds1307[2] & 0x3F); //mode 24h
                 ; 0002 0083     time.Date = BCD2Dec(registry_ds1307[4]);
                 ; 0002 0084     time.Month = BCD2Dec(registry_ds1307[5]);
                 ; 0002 0085     time.Year = BCD2Dec(registry_ds1307[6]);
                 ; 0002 0086     return time;
                 ; 0002 0087 }
                 ;
                 ;void mySetTimeForDS1307(Time * t) {
                 ; 0002 0089 void mySetTimeForDS1307(Time * t) {
                 ; 0002 008A     registry_ds1307[0] = Dec2BCD(t->Second);
                 ;	*t -> Y+0
                 ; 0002 008B 
                 ; 0002 008C     registry_ds1307[1] = Dec2BCD(t->Minute);
                 ; 0002 008D     if (t->Mode != 0) // che do hien thi 12h
                 ; 0002 008E         // bit 7 = 0; bit 6 =1;(che do 12h), 0: che do 24h
                 ; 0002 008F         //; bit 5 =0 -> AM, 1->PM
                 ; 0002 0090         //5bit con lai la ma BCD cua gio
                 ; 0002 0091         registry_ds1307[2] = Dec2BCD(t->Hour) | (t->Mode << 6) | (t->AP << 5); //mode 12h
                 ; 0002 0092 
                 ; 0002 0093     else
                 ; 0002 0094         // bit 7 = 0; bit 6 =0;(che do 24h) ;
                 ; 0002 0095         registry_ds1307[2] = Dec2BCD(t->Hour); //mode 24h
                 ; 0002 0096 
                 ; 0002 0097     registry_ds1307[4] = Dec2BCD(t->Date);
                 ; 0002 0098     registry_ds1307[5] = Dec2BCD(t->Month);
                 ; 0002 0099     registry_ds1307[6] = Dec2BCD(t->Year);
                 ; 0002 009A 
                 ; 0002 009B 
                 ; 0002 009C     TWI_DS1307_wblock(0x00, registry_ds1307, 7); //doc ca khoi thoi gian (7 bytes)
                 ; 0002 009D     delay_ms(1); //cho DS1307 xu li
                 ; 0002 009E }
                 ;// ---------------------------------------------------------------------------
                 ;// I2C (TWI) ROUTINES
                 ;//
                 ;// On the AVRmega series, PA4 is the data line (SDA) and PA5 is the clock (SCL
                 ;// The standard clock rate is 100 KHz, and set by I2C_Init. It depends on the AVR osc. freq.
                 ;#include <myds1307rtcver2.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;
                 ;
                 ;//void DS1307_GetTime(byte *hours, byte *minutes, byte *seconds)
                 ;//// returns hours, minutes, and seconds in BCD format
                 ;//{
                 ;//    *hours = I2C_ReadRegister(DS1307, HOURS_REGISTER);
                 ;//    *minutes = I2C_ReadRegister(DS1307, MINUTES_REGISTER);
                 ;//    *seconds = I2C_ReadRegister(DS1307, SECONDS_REGISTER);
                 ;//    if (*hours & 0x40) // 12hr mode:
                 ;//        *hours &= 0x1F; // use bottom 5 bits (pm bit = temp & 0x20)
                 ;//    else *hours &= 0x3F; // 24hr mode: use bottom 6 bits
                 ;//}
                 ;//
                 ;//void DS1307_GetDate(byte *months, byte *days, byte *years)
                 ;//// returns months, days, and years in BCD format
                 ;//{
                 ;//    *months = I2C_ReadRegister(DS1307, MONTHS_REGISTER);
                 ;//    *days = I2C_ReadRegister(DS1307, DAYS_REGISTER);
                 ;//    *years = I2C_ReadRegister(DS1307, YEARS_REGISTER);
                 ;//}
                 ;//
                 ;//void SetTimeDate()
                 ;//// simple, hard-coded way to set the date.
                 ;//{
                 ;//    I2C_WriteRegister(DS1307, MONTHS_REGISTER, 0x08);
                 ;//    I2C_WriteRegister(DS1307, DAYS_REGISTER, 0x31);
                 ;//    I2C_WriteRegister(DS1307, YEARS_REGISTER, 0x13);
                 ;//    I2C_WriteRegister(DS1307, HOURS_REGISTER, 0x08 + 0x40); // add 0x40 for PM
                 ;//    I2C_WriteRegister(DS1307, MINUTES_REGISTER, 0x51);
                 ;//    I2C_WriteRegister(DS1307, SECONDS_REGISTER, 0x00);
                 ;//}
                 ;
                 ;
                 ;unsigned char BCD2Decver2(unsigned char BCD) {
                 ; 0003 002A unsigned char BCD2Decver2(unsigned char BCD) {
                 
                 	.CSEG
                 _BCD2Decver2:
                 ; .FSTART _BCD2Decver2
                 ; 0003 002B     unsigned char L, H;
                 ; 0003 002C     L = BCD & 0x0F;
00012b 93aa      	ST   -Y,R26
00012c 931a      	ST   -Y,R17
00012d 930a      	ST   -Y,R16
                 ;	BCD -> Y+2
                 ;	L -> R17
                 ;	H -> R16
00012e 81ea      	LDD  R30,Y+2
00012f 70ef      	ANDI R30,LOW(0xF)
000130 2f1e      	MOV  R17,R30
                 ; 0003 002D     H = (BCD >> 4)*10;
000131 81ea      	LDD  R30,Y+2
000132 95e2      	SWAP R30
000133 70ef      	ANDI R30,0xF
000134 e0aa      	LDI  R26,LOW(10)
000135 02ea      	MULS R30,R26
000136 2d00      	MOV  R16,R0
                 ; 0003 002E     return (H + L);
000137 2fe1      	MOV  R30,R17
000138 0fe0      	ADD  R30,R16
000139 940c 0339 	JMP  _0x20A0003
                 ; 0003 002F }
                 ; .FEND
                 ;
                 ;unsigned char Dec2BCDver2(unsigned char Dec) {
                 ; 0003 0031 unsigned char Dec2BCDver2(unsigned char Dec) {
                 ; 0003 0032     unsigned char L, H;
                 ; 0003 0033     L = Dec % 10;
                 ;	Dec -> Y+2
                 ;	L -> R17
                 ;	H -> R16
                 ; 0003 0034     H = (Dec / 10) << 4;
                 ; 0003 0035     return (H + L);
                 ; 0003 0036 }
                 ;
                 ;Time myGetTimeFromDS1307ver2() {
                 ; 0003 0038 Time myGetTimeFromDS1307ver2() {
                 _myGetTimeFromDS1307ver2:
                 ; .FSTART _myGetTimeFromDS1307ver2
                 ; 0003 0039     Time time;
                 ; 0003 003A     time.Hour = 10;
00013b 9762      	SBIW R28,18
                 ;	time -> Y+0
00013c e0ea      	LDI  R30,LOW(10)
00013d 83ea      	STD  Y+2,R30
                 ; 0003 003B     time.Minute = 15;
00013e e0ef      	LDI  R30,LOW(15)
00013f 83e9      	STD  Y+1,R30
                 ; 0003 003C     //    return time;
                 ; 0003 003D 
                 ; 0003 003E     time.Second = BCD2Decver2(I2C_ReadRegister(DS1307, SECONDS_REGISTER) & 0x7F);
000140 ede0      	LDI  R30,LOW(208)
000141 93ea      	ST   -Y,R30
000142 e0a0      	LDI  R26,LOW(0)
000143 d071      	RCALL _I2C_ReadRegister
000144 77ef      	ANDI R30,0x7F
000145 2fae      	MOV  R26,R30
000146 dfe4      	RCALL _BCD2Decver2
000147 83e8      	ST   Y,R30
                 ; 0003 003F     time.Minute = BCD2Decver2(I2C_ReadRegister(DS1307, MINUTES_REGISTER));
000148 ede0      	LDI  R30,LOW(208)
000149 93ea      	ST   -Y,R30
00014a e0a1      	LDI  R26,LOW(1)
00014b d069      	RCALL _I2C_ReadRegister
00014c 2fae      	MOV  R26,R30
00014d dfdd      	RCALL _BCD2Decver2
00014e 83e9      	STD  Y+1,R30
                 ; 0003 0040     // mode lay tu bit 6 ( =0 la 24h; =1 la 12h)
                 ; 0003 0041     // mode = 0 la 24h, =1 la 12h
                 ; 0003 0042     time.Mode = ((I2C_ReadRegister(DS1307, HOURS_REGISTER) & 0x40) != 0);
00014f d209      	RCALL SUBOPT_0x2
000150 74e0      	ANDI R30,LOW(0x40)
000151 e0a0      	LDI  R26,LOW(0)
000152 d289      	RCALL __NEB12
000153 83ef      	STD  Y+7,R30
                 ; 0003 0043     // AM hay PM lay tu bit 5
                 ; 0003 0044     time.AP = ((I2C_ReadRegister(DS1307, HOURS_REGISTER) & 0x20) != 0);
000154 d204      	RCALL SUBOPT_0x2
000155 72e0      	ANDI R30,LOW(0x20)
000156 e0a0      	LDI  R26,LOW(0)
000157 d284      	RCALL __NEB12
000158 87e8      	STD  Y+8,R30
                 ; 0003 0045     if (time.Mode != 0) time.Hour = BCD2Decver2(I2C_ReadRegister(DS1307, HOURS_REGISTER) & 0x1F); //mode 12h
000159 81ef      	LDD  R30,Y+7
00015a 30e0      	CPI  R30,0
00015b f019      	BREQ _0x60003
00015c d1fc      	RCALL SUBOPT_0x2
00015d 71ef      	ANDI R30,LOW(0x1F)
00015e c002      	RJMP _0x60007
                 ; 0003 0046     else time.Hour = BCD2Decver2(I2C_ReadRegister(DS1307, HOURS_REGISTER) & 0x3F); //mode 24h
                 _0x60003:
00015f d1f9      	RCALL SUBOPT_0x2
000160 73ef      	ANDI R30,LOW(0x3F)
                 _0x60007:
000161 2fae      	MOV  R26,R30
000162 dfc8      	RCALL _BCD2Decver2
000163 83ea      	STD  Y+2,R30
                 ; 0003 0047     time.Day = BCD2Decver2(I2C_ReadRegister(DS1307, DAYOFWK_REGISTER));
000164 ede0      	LDI  R30,LOW(208)
000165 93ea      	ST   -Y,R30
000166 e0a3      	LDI  R26,LOW(3)
000167 d04d      	RCALL _I2C_ReadRegister
000168 2fae      	MOV  R26,R30
000169 dfc1      	RCALL _BCD2Decver2
00016a 83eb      	STD  Y+3,R30
                 ; 0003 0048     time.Date = BCD2Decver2(I2C_ReadRegister(DS1307, DAYS_REGISTER));
00016b ede0      	LDI  R30,LOW(208)
00016c 93ea      	ST   -Y,R30
00016d e0a4      	LDI  R26,LOW(4)
00016e d046      	RCALL _I2C_ReadRegister
00016f 2fae      	MOV  R26,R30
000170 dfba      	RCALL _BCD2Decver2
000171 83ec      	STD  Y+4,R30
                 ; 0003 0049     time.Month = BCD2Decver2(I2C_ReadRegister(DS1307, MONTHS_REGISTER));
000172 ede0      	LDI  R30,LOW(208)
000173 93ea      	ST   -Y,R30
000174 e0a5      	LDI  R26,LOW(5)
000175 d03f      	RCALL _I2C_ReadRegister
000176 2fae      	MOV  R26,R30
000177 dfb3      	RCALL _BCD2Decver2
000178 83ed      	STD  Y+5,R30
                 ; 0003 004A     time.Year = BCD2Decver2(I2C_ReadRegister(DS1307, YEARS_REGISTER));
000179 ede0      	LDI  R30,LOW(208)
00017a 93ea      	ST   -Y,R30
00017b e0a6      	LDI  R26,LOW(6)
00017c d038      	RCALL _I2C_ReadRegister
00017d 2fae      	MOV  R26,R30
00017e dfac      	RCALL _BCD2Decver2
00017f 83ee      	STD  Y+6,R30
                 ; 0003 004B     return time;
000180 01fe      	MOVW R30,R28
000181 01de      	MOVW R26,R28
000182 9619      	ADIW R26,9
000183 e089      	LDI  R24,9
000184 d2af      	RCALL __COPYMML
000185 01fe      	MOVW R30,R28
000186 9639      	ADIW R30,9
000187 e089      	LDI  R24,9
000188 b61f      	IN   R1,SREG
000189 94f8      	CLI
00018a 9662      	ADIW R28,18
00018b 9508      	RET
                 ; 0003 004C }
                 ; .FEND
                 ;
                 ;void mySetTimeForDS1307ver2(Time * t) {
                 ; 0003 004E void mySetTimeForDS1307ver2(Time * t) {
                 ; 0003 004F     I2C_WriteRegister(DS1307, SECONDS_REGISTER, Dec2BCDver2(t->Second));
                 ;	*t -> Y+0
                 ; 0003 0050 
                 ; 0003 0051     I2C_WriteRegister(DS1307, MINUTES_REGISTER,  Dec2BCDver2(t->Minute));
                 ; 0003 0052     if (t->Mode != 0) // che do hien thi 12h
                 ; 0003 0053         // bit 7 = 0; bit 6 =1;(che do 12h), 0: che do 24h
                 ; 0003 0054         //; bit 5 =0 -> AM, 1->PM
                 ; 0003 0055         //5bit con lai la ma BCD cua gio
                 ; 0003 0056         I2C_WriteRegister(DS1307, HOURS_REGISTER, Dec2BCDver2(t->Hour) | (t->Mode << 6) | (t->AP << 5)); //mode 12h
                 ; 0003 0057 
                 ; 0003 0058     else
                 ; 0003 0059         // bit 7 = 0; bit 6 =0;(che do 24h) ;
                 ; 0003 005A         I2C_WriteRegister(DS1307, HOURS_REGISTER, Dec2BCDver2(t->Hour)); //mode 24h
                 ; 0003 005B 
                 ; 0003 005C     I2C_WriteRegister(DS1307, DAYOFWK_REGISTER, Dec2BCDver2(t->Day));
                 ; 0003 005D     I2C_WriteRegister(DS1307, DAYS_REGISTER, Dec2BCDver2(t->Date));
                 ; 0003 005E     I2C_WriteRegister(DS1307, MONTHS_REGISTER, Dec2BCDver2(t->Month));
                 ; 0003 005F     I2C_WriteRegister(DS1307, YEARS_REGISTER, Dec2BCDver2(t->Year));
                 ; 0003 0060 }
                 ;#include <myi2c.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void I2C_Init()
                 ; 0004 0004 // port mac dinh SCL va SDA cua atmega
                 ; 0004 0005 // at 16 MHz, the SCL frequency will be 16/(16+2(TWBR)), assuming prescalar of 0.
                 ; 0004 0006 // so for 100KHz SCL, TWBR = ((F_CPU/F_SCL)-16)/2 = ((16/0.1)-16)/2 = 144/2 = 72.
                 ; 0004 0007 {
                 
                 	.CSEG
                 _I2C_Init:
                 ; .FSTART _I2C_Init
                 ; 0004 0008     TWSR = 0; // set prescalar to zero
00018c e0e0      	LDI  R30,LOW(0)
00018d b9e1      	OUT  0x1,R30
                 ; 0004 0009     TWBR = ((F_CPU / F_SCL) - 16) / 2; // set SCL frequency in TWI bit register
00018e e0ec      	LDI  R30,LOW(12)
00018f b9e0      	OUT  0x0,R30
                 ; 0004 000A }
000190 9508      	RET
                 ; .FEND
                 ;
                 ;byte I2C_Detect(byte addr)
                 ; 0004 000D // look for device at specified address; return 1=found, 0=not found
                 ; 0004 000E {
                 _I2C_Detect:
                 ; .FSTART _I2C_Detect
                 ; 0004 000F     TWCR = TW_START; // send start condition
000191 93aa      	ST   -Y,R26
                 ;	addr -> Y+0
000192 eae4      	LDI  R30,LOW(164)
000193 bfe6      	OUT  0x36,R30
                 ; 0004 0010     while (!TW_READY); // wait
                 _0x80003:
000194 b7e6      	IN   R30,0x36
000195 78e0      	ANDI R30,LOW(0x80)
000196 f3e9      	BREQ _0x80003
                 ; 0004 0011     TWDR = addr; // load device's bus address
000197 d1c5      	RCALL SUBOPT_0x3
                 ; 0004 0012     TWCR = TW_SEND; // and send it
                 ; 0004 0013     while (!TW_READY); // wait
                 _0x80006:
000198 b7e6      	IN   R30,0x36
000199 78e0      	ANDI R30,LOW(0x80)
00019a f3e9      	BREQ _0x80006
                 ; 0004 0014     return (TW_STATUS == 0x18); // return 1 if found; 0 otherwise
00019b b1e1      	IN   R30,0x1
00019c 7fe8      	ANDI R30,LOW(0xF8)
00019d e1a8      	LDI  R26,LOW(24)
00019e d238      	RCALL __EQB12
00019f c1ab      	RJMP _0x20A0002
                 ; 0004 0015 }
                 ; .FEND
                 ;
                 ;byte I2C_FindDevice(byte start)
                 ; 0004 0018 // returns with address of first device found; 0=not found
                 ; 0004 0019 {
                 ; 0004 001A     byte addr;
                 ; 0004 001B     for ( addr = start; addr < 0xFF; addr++) // search all 256 addresses
                 ;	start -> Y+1
                 ;	addr -> R17
                 ; 0004 001C     {
                 ; 0004 001D         if (I2C_Detect(addr)) // I2C detected?
                 ; 0004 001E             return addr; // leave as soon as one is found
                 ; 0004 001F     }
                 ; 0004 0020     return 0; // none detected, so return 0.
                 ; 0004 0021 }
                 ;
                 ;void I2C_Start(byte slaveAddr) {
                 ; 0004 0023 void I2C_Start(byte slaveAddr) {
                 _I2C_Start:
                 ; .FSTART _I2C_Start
                 ; 0004 0024     I2C_Detect(slaveAddr);
0001a0 93aa      	ST   -Y,R26
                 ;	slaveAddr -> Y+0
0001a1 81a8      	LD   R26,Y
0001a2 dfee      	RCALL _I2C_Detect
                 ; 0004 0025 }
0001a3 c1a7      	RJMP _0x20A0002
                 ; .FEND
                 ;
                 ;byte I2C_Write(byte data) // sends a data byte to slave
                 ; 0004 0028 {
                 _I2C_Write:
                 ; .FSTART _I2C_Write
                 ; 0004 0029     TWDR = data; // load data to be sent
0001a4 93aa      	ST   -Y,R26
                 ;	data -> Y+0
0001a5 d1b7      	RCALL SUBOPT_0x3
                 ; 0004 002A     TWCR = TW_SEND; // and send it
                 ; 0004 002B     while (!TW_READY); // wait
                 _0x8000D:
0001a6 b7e6      	IN   R30,0x36
0001a7 78e0      	ANDI R30,LOW(0x80)
0001a8 f3e9      	BREQ _0x8000D
                 ; 0004 002C     return (TW_STATUS != 0x28);
0001a9 b1e1      	IN   R30,0x1
0001aa 7fe8      	ANDI R30,LOW(0xF8)
0001ab e2a8      	LDI  R26,LOW(40)
0001ac d22f      	RCALL __NEB12
0001ad c19d      	RJMP _0x20A0002
                 ; 0004 002D }
                 ; .FEND
                 ;
                 ;byte I2C_ReadACK() // reads a data byte from slave
                 ; 0004 0030 {
                 ; 0004 0031     TWCR = TW_ACK; // ack = will read more data
                 ; 0004 0032     while (!TW_READY); // wait
                 ; 0004 0033     return TWDR;
                 ; 0004 0034     //return (TW_STATUS!=0x28);
                 ; 0004 0035 }
                 ;
                 ;byte I2C_ReadNACK() // reads a data byte from slave
                 ; 0004 0038 {
                 _I2C_ReadNACK:
                 ; .FSTART _I2C_ReadNACK
                 ; 0004 0039     TWCR = TW_NACK; // nack = not reading more data
0001ae e8e4      	LDI  R30,LOW(132)
0001af bfe6      	OUT  0x36,R30
                 ; 0004 003A     while (!TW_READY); // wait
                 _0x80013:
0001b0 b7e6      	IN   R30,0x36
0001b1 78e0      	ANDI R30,LOW(0x80)
0001b2 f3e9      	BREQ _0x80013
                 ; 0004 003B     return TWDR;
0001b3 b1e3      	IN   R30,0x3
0001b4 9508      	RET
                 ; 0004 003C     //return (TW_STATUS!=0x28);
                 ; 0004 003D }
                 ; .FEND
                 ;
                 ;void I2C_WriteByte(byte busAddr, byte data) {
                 ; 0004 003F void I2C_WriteByte(byte busAddr, byte data) {
                 ; 0004 0040     I2C_Start(busAddr); // send bus address
                 ;	busAddr -> Y+1
                 ;	data -> Y+0
                 ; 0004 0041     I2C_Write(data); // then send the data byte
                 ; 0004 0042     I2C_Stop();
                 ; 0004 0043 }
                 ;
                 ;void I2C_WriteRegister(byte busAddr, byte deviceRegister, byte data) {
                 ; 0004 0045 void I2C_WriteRegister(byte busAddr, byte deviceRegister, byte data) {
                 ; 0004 0046     I2C_Start(busAddr); // send bus address
                 ;	busAddr -> Y+2
                 ;	deviceRegister -> Y+1
                 ;	data -> Y+0
                 ; 0004 0047     I2C_Write(deviceRegister); // first byte = device register address
                 ; 0004 0048     I2C_Write(data); // second byte = data for device register
                 ; 0004 0049     I2C_Stop();
                 ; 0004 004A }
                 ;
                 ;byte I2C_ReadRegister(byte busAddr, byte deviceRegister) {
                 ; 0004 004C byte I2C_ReadRegister(byte busAddr, byte deviceRegister) {
                 _I2C_ReadRegister:
                 ; .FSTART _I2C_ReadRegister
                 ; 0004 004D     byte data = 0;
                 ; 0004 004E     I2C_Start(busAddr); // send device address
0001b5 93aa      	ST   -Y,R26
0001b6 931a      	ST   -Y,R17
                 ;	busAddr -> Y+2
                 ;	deviceRegister -> Y+1
                 ;	data -> R17
0001b7 e010      	LDI  R17,0
0001b8 81aa      	LDD  R26,Y+2
0001b9 dfe6      	RCALL _I2C_Start
                 ; 0004 004F     I2C_Write(deviceRegister); // set register pointer
0001ba 81a9      	LDD  R26,Y+1
0001bb dfe8      	RCALL _I2C_Write
                 ; 0004 0050     I2C_Start(busAddr + READ); // restart as a read operation
0001bc 81aa      	LDD  R26,Y+2
0001bd 5faf      	SUBI R26,-LOW(1)
0001be dfe1      	RCALL _I2C_Start
                 ; 0004 0051     data = I2C_ReadNACK(); // read the register data
0001bf dfee      	RCALL _I2C_ReadNACK
0001c0 2f1e      	MOV  R17,R30
                 ; 0004 0052     I2C_Stop(); // stop
0001c1 e9e4      	LDI  R30,LOW(148)
0001c2 bfe6      	OUT  0x36,R30
                 ; 0004 0053     return data;
0001c3 2fe1      	MOV  R30,R17
0001c4 8118      	LDD  R17,Y+0
0001c5 c175      	RJMP _0x20A0004
                 ; 0004 0054 }
                 ; .FEND
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.6 Evaluation
                 ;Automatic Program Generator
                 ;ï¿½ Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 4.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ; *****************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;//#include <myds1307rtc.h>
                 ;#include <myds1307rtcver2.h>
                 ;
                 ;
                 ;//#include <myds18b20ver1.h>
                 ;#include <myds18b20ver2.h>
                 ;
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <io.h>
                 ;#include <interrupt.h>
                 ;	flags -> R17
                 
                 	.CSEG
                 ;
                 ;#define IS_MASTER 1
                 ;#define MY_ADDRESS '2'
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;#if RX_BUFFER_SIZE<256
                 ;unsigned char rx_wr_index, rx_rd_index, rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index, rx_rd_index, rx_counter;
                 ;#endif
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;// USART Receiver interrupt service routine
                 ;
                 ;
                 ;// Declare your global variables here
                 ;unsigned char ma[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
                 
                 	.DSEG
                 ;void quet(unsigned char x);
                 ;void day();
                 ;void hienthi(int x);
                 ;
                 ;void hienthinhietdo(unsigned char temp);
                 ;void hienthithoigian(unsigned char hour, unsigned char minute);
                 ;
                 ;void uart_char_tx(unsigned char chr);
                 ;void uart_address_tx(unsigned char chr);
                 ;unsigned char uart_getchar();
                 ;void getState(unsigned char);
                 ;void process_received_data();
                 ;
                 ;float temp;
                 ;unsigned char kytu = '';
                 ;unsigned char b = 2;
                 ;unsigned char received_byte = '';
                 ;unsigned char received_package[10];
                 ;int isComplete = 1;
                 ;int package_size = 0;
                 ;int slave_enable = 0;
                 ;
                 ;byte ttemp0; // first byte
                 ;byte ttemp1;
                 ;
                 ;void execute_query();
                 ;void send_confirm_to_master();
                 ;void disable_slave();
                 ;void ensable_slave();
                 ;// thuc thi cau lenh doc tu goi tin (package))
                 ;
                 ;void return_data_to_master(unsigned char d1, unsigned char d2, unsigned char d3, unsigned char d4, unsigned char d5) {
                 ; 0005 005A void return_data_to_master(unsigned char d1, unsigned char d2, unsigned char d3, unsigned char d4, unsigned char d5) {
                 
                 	.CSEG
                 _return_data_to_master:
                 ; .FSTART _return_data_to_master
                 ; 0005 005B     uart_char_tx('@');
0001c6 93aa      	ST   -Y,R26
                 ;	d1 -> Y+4
                 ;	d2 -> Y+3
                 ;	d3 -> Y+2
                 ;	d4 -> Y+1
                 ;	d5 -> Y+0
0001c7 e4a0      	LDI  R26,LOW(64)
0001c8 d199      	RCALL SUBOPT_0x4
                 ; 0005 005C     delay_ms(100);
                 ; 0005 005D     uart_char_tx(d1); //printf("%d",d1);
0001c9 81ac      	LDD  R26,Y+4
0001ca d197      	RCALL SUBOPT_0x4
                 ; 0005 005E     delay_ms(100);
                 ; 0005 005F     uart_char_tx(d2);//printf("%d",d2);
0001cb 81ab      	LDD  R26,Y+3
0001cc d195      	RCALL SUBOPT_0x4
                 ; 0005 0060     delay_ms(100);
                 ; 0005 0061     uart_char_tx(d3);//printf("%d",d3);
0001cd 81aa      	LDD  R26,Y+2
0001ce d193      	RCALL SUBOPT_0x4
                 ; 0005 0062     delay_ms(100);
                 ; 0005 0063     uart_char_tx(d4);//printf("%d",d4);
0001cf 81a9      	LDD  R26,Y+1
0001d0 d191      	RCALL SUBOPT_0x4
                 ; 0005 0064     delay_ms(100);
                 ; 0005 0065     uart_char_tx(d5);//printf("%d",d5);
0001d1 81a8      	LD   R26,Y
0001d2 d18f      	RCALL SUBOPT_0x4
                 ; 0005 0066     delay_ms(100);
                 ; 0005 0067     uart_char_tx('#');
0001d3 e2a3      	LDI  R26,LOW(35)
0001d4 d18d      	RCALL SUBOPT_0x4
                 ; 0005 0068     delay_ms(100);
                 ; 0005 0069     disable_slave();
0001d5 d090      	RCALL _disable_slave
                 ; 0005 006A }
0001d6 c01f      	RJMP _0x20A0005
                 ; .FEND
                 ;
                 ;void return_data_to_computer(unsigned char d1, unsigned char d2, unsigned char d3, unsigned char d4, unsigned char d5){
                 ; 0005 006C void return_data_to_computer(unsigned char d1, unsigned char d2, unsigned char d3, unsigned char d4, unsigned char d5){
                 _return_data_to_computer:
                 ; .FSTART _return_data_to_computer
                 ; 0005 006D     hienthi(111);delay_ms(3000);
0001d7 93aa      	ST   -Y,R26
                 ;	d1 -> Y+4
                 ;	d2 -> Y+3
                 ;	d3 -> Y+2
                 ;	d4 -> Y+1
                 ;	d5 -> Y+0
0001d8 e6af      	LDI  R26,LOW(111)
0001d9 e0b0      	LDI  R27,0
0001da d123      	RCALL _hienthi
0001db eba8      	LDI  R26,LOW(3000)
0001dc e0bb      	LDI  R27,HIGH(3000)
0001dd d396      	RCALL _delay_ms
                 ; 0005 006E     uart_char_tx('&');
0001de e2a6      	LDI  R26,LOW(38)
0001df d182      	RCALL SUBOPT_0x4
                 ; 0005 006F     delay_ms(100);
                 ; 0005 0070     uart_char_tx(d1);hienthi(d1);delay_ms(2000);
0001e0 81ac      	LDD  R26,Y+4
0001e1 d15e      	RCALL _uart_char_tx
0001e2 81ac      	LDD  R26,Y+4
0001e3 d182      	RCALL SUBOPT_0x5
                 ; 0005 0071     delay_ms(100);
                 ; 0005 0072     uart_char_tx(d2);hienthi(d2);delay_ms(2000);
0001e4 81ab      	LDD  R26,Y+3
0001e5 d15a      	RCALL _uart_char_tx
0001e6 81ab      	LDD  R26,Y+3
0001e7 d17e      	RCALL SUBOPT_0x5
                 ; 0005 0073     delay_ms(100);
                 ; 0005 0074     uart_char_tx(d3);hienthi(d3);delay_ms(2000);
0001e8 81aa      	LDD  R26,Y+2
0001e9 d156      	RCALL _uart_char_tx
0001ea 81aa      	LDD  R26,Y+2
0001eb d17a      	RCALL SUBOPT_0x5
                 ; 0005 0075     delay_ms(100);
                 ; 0005 0076     uart_char_tx(d4);hienthi(d4);delay_ms(2000);
0001ec 81a9      	LDD  R26,Y+1
0001ed d152      	RCALL _uart_char_tx
0001ee 81a9      	LDD  R26,Y+1
0001ef d176      	RCALL SUBOPT_0x5
                 ; 0005 0077     delay_ms(100);
                 ; 0005 0078     uart_char_tx(d5);hienthi(d5);delay_ms(2000);
0001f0 81a8      	LD   R26,Y
0001f1 d14e      	RCALL _uart_char_tx
0001f2 81a8      	LD   R26,Y
0001f3 d172      	RCALL SUBOPT_0x5
                 ; 0005 0079     delay_ms(100);
                 ; 0005 007A     uart_char_tx('#');
0001f4 e2a3      	LDI  R26,LOW(35)
0001f5 d16c      	RCALL SUBOPT_0x4
                 ; 0005 007B     delay_ms(100);
                 ; 0005 007C 
                 ; 0005 007D }
                 _0x20A0005:
0001f6 9625      	ADIW R28,5
0001f7 9508      	RET
                 ; .FEND
                 ;
                 ;void execute_query() {
                 ; 0005 007F void execute_query() {
                 _execute_query:
                 ; .FSTART _execute_query
                 ; 0005 0080     Time t;
                 ; 0005 0081 
                 ; 0005 0082     if (IS_MASTER) {
0001f8 9729      	SBIW R28,9
                 ;	t -> Y+0
                 ; 0005 0083         hienthi(package_size); delay_ms(4000);
0001f9 01d6      	MOVW R26,R12
0001fa d173      	RCALL SUBOPT_0x6
                 ; 0005 0084         // thuc hien cau truy van nhan duoc tren master
                 ; 0005 0085         if (package_size == 4) { // co the nhan biet bang byte dau tien khac 0
0001fb e0e4      	LDI  R30,LOW(4)
0001fc e0f0      	LDI  R31,HIGH(4)
0001fd 15ec      	CP   R30,R12
0001fe 05fd      	CPC  R31,R13
0001ff f419      	BRNE _0xA0006
                 ; 0005 0086             // gui dia chi cho slave, sau do cho xac nhan tu slave
                 ; 0005 0087             uart_address_tx(received_package[1]);
                +
000200 91a0 017e+LDS R26 , _received_package + ( 1 )
                 	__GETB2MN _received_package,1
000202 d142      	RCALL _uart_address_tx
                 ; 0005 0088             //            if (received_package[2] == 't') {
                 ; 0005 0089             //                //printf ("%c",a);
                 ; 0005 008A             //                temp = ds18b20_gettemp();
                 ; 0005 008B             //                uart_char_tx('T');
                 ; 0005 008C             //                printf(" Nhiet do hien tai la %d oC\n\r", (unsigned char) temp);
                 ; 0005 008D             //
                 ; 0005 008E             //            }
                 ; 0005 008F             //            if (received_package[2] == 'h') {
                 ; 0005 0090             //                t = myGetTimeFromDS1307ver2();
                 ; 0005 0091             //                printf(" Gio hien tai la %d:%d:%d\n\r", (unsigned char) (t.Hour + t.Mode * t.AP * 12), (un ...
                 ; 0005 0092             //
                 ; 0005 0093             //            }
                 ; 0005 0094 
                 ; 0005 0095         }
                 ; 0005 0096         if(package_size == 7) { // co the nhan biet goi tin data bang byte dau tien luon =0
                 _0xA0006:
000203 e0e7      	LDI  R30,LOW(7)
000204 e0f0      	LDI  R31,HIGH(7)
000205 15ec      	CP   R30,R12
000206 05fd      	CPC  R31,R13
000207 f549      	BRNE _0xA0007
                 ; 0005 0097             // day la goi tin data
                 ; 0005 0098             // nhan biet nhiet do hay thoi gian dua vao byte so 3 = 0 hay khac 0
                 ; 0005 0099             hienthi(55);delay_ms(4000);
000208 e3a7      	LDI  R26,LOW(55)
000209 e0b0      	LDI  R27,0
00020a d163      	RCALL SUBOPT_0x6
                 ; 0005 009A             if(received_package[2] ==0){
                +
00020b 91e0 017f+LDS R30 , _received_package + ( 2 )
                 	__GETB1MN _received_package,2
00020d 30e0      	CPI  R30,0
00020e f489      	BRNE _0xA0008
                 ; 0005 009B                 // day la goi nhiet do
                 ; 0005 009C                 temp = received_package[4]+received_package[5]/10;
                +
00020f 9160 0181+LDS R22 , _received_package + ( 4 )
                 	__GETBRMN 22,_received_package,4
000211 2777      	CLR  R23
                +
000212 91a0 0182+LDS R26 , _received_package + ( 5 )
                 	__GETB2MN _received_package,5
000214 d15d      	RCALL SUBOPT_0x7
000215 0fe6      	ADD  R30,R22
000216 1ff7      	ADC  R31,R23
000217 e7a9      	LDI  R26,LOW(_temp)
000218 e0b1      	LDI  R27,HIGH(_temp)
000219 d1b3      	RCALL __CWD1
00021a d289      	RCALL __CDF1
00021b d201      	RCALL __PUTDP1
                 ; 0005 009D                 return_data_to_computer(0, 0, 0,received_package[4],received_package[5]);
00021c e0e0      	LDI  R30,LOW(0)
00021d 93ea      	ST   -Y,R30
00021e 93ea      	ST   -Y,R30
00021f d157      	RCALL SUBOPT_0x8
                 ; 0005 009E             }
                 ; 0005 009F             if(received_package[2] == 1){
                 _0xA0008:
                +
000220 91a0 017f+LDS R26 , _received_package + ( 2 )
                 	__GETB2MN _received_package,2
000222 30a1      	CPI  R26,LOW(0x1)
000223 f469      	BRNE _0xA0009
                 ; 0005 00A0                 // day la goi thoi gian
                 ; 0005 00A1                 t.Hour = received_package[3];
                +
000224 91e0 0180+LDS R30 , _received_package + ( 3 )
                 	__GETB1MN _received_package,3
000226 83ea      	STD  Y+2,R30
                 ; 0005 00A2                 t.Minute = received_package[4];
                +
000227 91e0 0181+LDS R30 , _received_package + ( 4 )
                 	__GETB1MN _received_package,4
000229 83e9      	STD  Y+1,R30
                 ; 0005 00A3                 t.Second = received_package[5];
                +
00022a 91e0 0182+LDS R30 , _received_package + ( 5 )
                 	__GETB1MN _received_package,5
00022c 83e8      	ST   Y,R30
                 ; 0005 00A4                 return_data_to_computer(0,1,received_package[3],received_package[4],received_package[5]);
00022d d150      	RCALL SUBOPT_0x9
                +
00022e 91e0 0180+LDS R30 , _received_package + ( 3 )
                 	__GETB1MN _received_package,3
000230 d146      	RCALL SUBOPT_0x8
                 ; 0005 00A5             }
                 ; 0005 00A6         }
                 _0xA0009:
                 ; 0005 00A7     } else {
                 _0xA0007:
                 ; 0005 00A8         // thuc hien cau truy van nhan duoc tren slave
                 ; 0005 00A9         if (package_size == 4) {
                 ; 0005 00AA             if (received_package[2] == 't') {
                 ; 0005 00AB                 //printf ("%c",a);
                 ; 0005 00AC                 temp = ds18b20_gettemp();
                 ; 0005 00AD                 //printf("%d", (int)temp);
                 ; 0005 00AE                 //printf ("%d",temp);
                 ; 0005 00AF                 return_data_to_master(0, 0, 0,(unsigned char) ((int) temp), (unsigned char)((int) (10 * (temp - (int) te ...
                 ; 0005 00B0 
                 ; 0005 00B1             }
                 ; 0005 00B2             if (received_package[2] == 'h') {
                 ; 0005 00B3                 t = myGetTimeFromDS1307ver2();
                 ; 0005 00B4                 //printf(" Gio hien tai la %d:%d:%d\n\r", (unsigned char) (t.Hour + t.Mode * t.AP * 12), (unsigned char) ...
                 ; 0005 00B5                 return_data_to_master(0, 1, (t.Hour + t.Mode * t.AP * 12), t.Minute, t.Second);
                 ; 0005 00B6             }
                 ; 0005 00B7 
                 ; 0005 00B8         }
                 ; 0005 00B9     }
                 ; 0005 00BA     package_size = 0;
000231 24cc      	CLR  R12
000232 24dd      	CLR  R13
                 ; 0005 00BB }
000233 9629      	ADIW R28,9
000234 9508      	RET
                 ; .FEND
                 ;
                 ;void send_query_to_slave() {
                 ; 0005 00BD void send_query_to_slave() {
                 _send_query_to_slave:
                 ; .FSTART _send_query_to_slave
                 ; 0005 00BE //    hienthi(11);delay_ms(4000);
                 ; 0005 00BF     uart_char_tx(received_package[0]);
000235 91a0 017d 	LDS  R26,_received_package
000237 d12a      	RCALL SUBOPT_0x4
                 ; 0005 00C0     delay_ms(100); // cho cho master nhan va xu ly
                 ; 0005 00C1     uart_char_tx(received_package[1]);
                +
000238 91a0 017e+LDS R26 , _received_package + ( 1 )
                 	__GETB2MN _received_package,1
00023a d127      	RCALL SUBOPT_0x4
                 ; 0005 00C2     delay_ms(100);
                 ; 0005 00C3     uart_char_tx(received_package[2]);
                +
00023b 91a0 017f+LDS R26 , _received_package + ( 2 )
                 	__GETB2MN _received_package,2
00023d d124      	RCALL SUBOPT_0x4
                 ; 0005 00C4     delay_ms(100);
                 ; 0005 00C5     uart_char_tx(received_package[3]);
                +
00023e 91a0 0180+LDS R26 , _received_package + ( 3 )
                 	__GETB2MN _received_package,3
000240 d121      	RCALL SUBOPT_0x4
                 ; 0005 00C6     delay_ms(100);
                 ; 0005 00C7 }
000241 9508      	RET
                 ; .FEND
                 ;
                 ;// doc tung byte va luu vao goi tin theo dinh dang
                 ;
                 ;void process_received_data() {
                 ; 0005 00CB void process_received_data() {
                 _process_received_data:
                 ; .FSTART _process_received_data
                 ; 0005 00CC     if (IS_MASTER) {
                 ; 0005 00CD         // xu ly du lieu nhan duoc tren master
                 ; 0005 00CE         if (isComplete) {
000242 2c0a      	MOV  R0,R10
000243 280b      	OR   R0,R11
000244 f071      	BREQ _0xA000F
                 ; 0005 00CF             if (received_byte == '@') {
000245 e4e0      	LDI  R30,LOW(64)
000246 15e8      	CP   R30,R8
000247 f419      	BRNE _0xA0010
                 ; 0005 00D0                 //hienthi(33);delay_ms(4000);
                 ; 0005 00D1                 //printf("bat dau goi tin; ");
                 ; 0005 00D2                 isComplete = 0;
000248 24aa      	CLR  R10
000249 24bb      	CLR  R11
                 ; 0005 00D3                 received_package[package_size] = received_byte;
00024a d138      	RCALL SUBOPT_0xA
                 ; 0005 00D4                 package_size++;
                 ; 0005 00D5             }
                 ; 0005 00D6             if (received_byte == '$') {
                 _0xA0010:
00024b e2e4      	LDI  R30,LOW(36)
00024c 15e8      	CP   R30,R8
00024d f421      	BRNE _0xA0011
                 ; 0005 00D7                 // slave da xac nhan, xu ly tiep, gui cau truy van toi slave
                 ; 0005 00D8                 hienthi(11);delay_ms(4000);
00024e e0ab      	LDI  R26,LOW(11)
00024f e0b0      	LDI  R27,0
000250 d11d      	RCALL SUBOPT_0x6
                 ; 0005 00D9                 send_query_to_slave();
000251 dfe3      	RCALL _send_query_to_slave
                 ; 0005 00DA             }
                 ; 0005 00DB         } else {
                 _0xA0011:
000252 c007      	RJMP _0xA0012
                 _0xA000F:
                 ; 0005 00DC             received_package[package_size] = received_byte;
000253 d12f      	RCALL SUBOPT_0xA
                 ; 0005 00DD             package_size++;
                 ; 0005 00DE             //hienthi(package_size);delay_ms(4000);
                 ; 0005 00DF             if ((received_byte == '#') || (package_size > 9)) {
000254 e2e3      	LDI  R30,LOW(35)
000255 15e8      	CP   R30,R8
000256 f011      	BREQ _0xA0014
000257 d133      	RCALL SUBOPT_0xB
000258 f40c      	BRGE _0xA0013
                 _0xA0014:
                 ; 0005 00E0                 //printf("ket thuc goi tin; ");
                 ; 0005 00E1                 //hienthi(44);delay_ms(4000);
                 ; 0005 00E2                 isComplete = 1;
000259 d136      	RCALL SUBOPT_0xC
                 ; 0005 00E3                 execute_query();
                 ; 0005 00E4             }
                 ; 0005 00E5         }
                 _0xA0013:
                 _0xA0012:
                 ; 0005 00E6     } else {
                 ; 0005 00E7         // xu ly du lieu nhan duoc tren slave
                 ; 0005 00E8         if (isComplete) {
                 ; 0005 00E9             if (received_byte == '@') {
                 ; 0005 00EA                 //printf("bat dau goi tin; ");
                 ; 0005 00EB                 isComplete = 0;
                 ; 0005 00EC                 received_package[package_size] = received_byte;
                 ; 0005 00ED                 package_size++;
                 ; 0005 00EE             }
                 ; 0005 00EF         } else {
                 ; 0005 00F0             received_package[package_size] = received_byte;
                 ; 0005 00F1             package_size++;
                 ; 0005 00F2             if ((received_byte == '#') || (package_size > 9)) {
                 ; 0005 00F3                 //printf("ket thuc goi tin; ");
                 ; 0005 00F4                 isComplete = 1;
                 ; 0005 00F5                 execute_query();
                 ; 0005 00F6             }
                 ; 0005 00F7         }
                 ; 0005 00F8     }
                 ; 0005 00F9 }
00025a 9508      	RET
                 ; .FEND
                 ;
                 ;void send_confirm_to_master() {
                 ; 0005 00FB void send_confirm_to_master() {
                 _send_confirm_to_master:
                 ; .FSTART _send_confirm_to_master
                 ; 0005 00FC     uart_char_tx('$');
00025b e2a4      	LDI  R26,LOW(36)
00025c d0e3      	RCALL _uart_char_tx
                 ; 0005 00FD }
00025d 9508      	RET
                 ; .FEND
                 ;
                 ;void enable_slave() {
                 ; 0005 00FF void enable_slave() {
                 _enable_slave:
                 ; .FSTART _enable_slave
                 ; 0005 0100     slave_enable = 1;
00025e e0e1      	LDI  R30,LOW(1)
00025f e0f0      	LDI  R31,HIGH(1)
000260 93e0 0187 	STS  _slave_enable,R30
000262 93f0 0188 	STS  _slave_enable+1,R31
                 ; 0005 0101     UCSRA &= ~(1 << MPCM);
000264 9858      	CBI  0xB,0
                 ; 0005 0102 }
000265 9508      	RET
                 ; .FEND
                 ;
                 ;void disable_slave() {
                 ; 0005 0104 void disable_slave() {
                 _disable_slave:
                 ; .FSTART _disable_slave
                 ; 0005 0105     slave_enable = 0;
000266 e0e0      	LDI  R30,LOW(0)
000267 93e0 0187 	STS  _slave_enable,R30
000269 93e0 0188 	STS  _slave_enable+1,R30
                 ; 0005 0106     UCSRA |= (1 << MPCM);
00026b 9a58      	SBI  0xB,0
                 ; 0005 0107 }
00026c 9508      	RET
                 ; .FEND
                 ;
                 ;// xu ly ngat nhan du lieu
                 ;
                 ;interrupt [USART_RXC] void usart_rx_isr(void) {
                 ; 0005 010B interrupt [12] void usart_rx_isr(void) {
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00026d 920a      	ST   -Y,R0
00026e 921a      	ST   -Y,R1
00026f 92fa      	ST   -Y,R15
000270 936a      	ST   -Y,R22
000271 937a      	ST   -Y,R23
000272 938a      	ST   -Y,R24
000273 939a      	ST   -Y,R25
000274 93aa      	ST   -Y,R26
000275 93ba      	ST   -Y,R27
000276 93ea      	ST   -Y,R30
000277 93fa      	ST   -Y,R31
000278 b7ef      	IN   R30,SREG
000279 93ea      	ST   -Y,R30
                 ; 0005 010C     if (IS_MASTER) {
                 ; 0005 010D         // xu ly ngat nhan du lieu tren master
                 ; 0005 010E         received_byte = UDR;
00027a b08c      	IN   R8,12
                 ; 0005 010F         process_received_data();
00027b dfc6      	RCALL _process_received_data
                 ; 0005 0110     }
                 ; 0005 0111     else {
                 ; 0005 0112         //xu ly ngat nhan du lieu tren slave
                 ; 0005 0113         //printf("slave nhan dia chi");
                 ; 0005 0114 //        hienthi(received_byte);
                 ; 0005 0115 //        delay_ms(6000);
                 ; 0005 0116         received_byte = UDR;
                 ; 0005 0117         if (slave_enable) {
                 ; 0005 0118             //printf("xy ly nghat");
                 ; 0005 0119             process_received_data();
                 ; 0005 011A         } else {
                 ; 0005 011B             //printf("slave nhan dia chi");
                 ; 0005 011C             if (MY_ADDRESS == received_byte) {
                 ; 0005 011D                 enable_slave();
                 ; 0005 011E                 send_confirm_to_master();
                 ; 0005 011F             }
                 ; 0005 0120         }
                 ; 0005 0121     }
                 ; 0005 0122 }
00027c 91e9      	LD   R30,Y+
00027d bfef      	OUT  SREG,R30
00027e 91f9      	LD   R31,Y+
00027f 91e9      	LD   R30,Y+
000280 91b9      	LD   R27,Y+
000281 91a9      	LD   R26,Y+
000282 9199      	LD   R25,Y+
000283 9189      	LD   R24,Y+
000284 9179      	LD   R23,Y+
000285 9169      	LD   R22,Y+
000286 90f9      	LD   R15,Y+
000287 9019      	LD   R1,Y+
000288 9009      	LD   R0,Y+
000289 9518      	RETI
                 ; .FEND
                 ;
                 ;char mygetchar(void) {
                 ; 0005 0124 char mygetchar(void) {
                 ; 0005 0125     char data;
                 ; 0005 0126     if (rx_counter == 0) return 0;
                 ;	data -> R17
                 ; 0005 0127     data = rx_buffer[rx_rd_index];
                 ; 0005 0128     if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
                 ; 0005 0129     //#asm("cli")
                 ; 0005 012A     --rx_counter;
                 ; 0005 012B     //#asm("sei")
                 ; 0005 012C     return data;
                 ; 0005 012D }
                 ;
                 ;// Declare your global variables here
                 ;unsigned char my_variable;
                 ;
                 ;void main(void) {
                 ; 0005 0132 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0005 0133     // Declare your local variables here
                 ; 0005 0134     unsigned char *t = 0;
                 ; 0005 0135     unsigned char h, m, s, i;
                 ; 0005 0136     int x;
                 ; 0005 0137     Time time = {30, 15, 10, 5, 12, 5, 16, 1, 1}; // thoi gian hien tai
                 ; 0005 0138     // Input/Output Ports initialization
                 ; 0005 0139     // Port A initialization
                 ; 0005 013A     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0005 013B     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0005 013C     PORTA = 0x00;
00028a 972b      	SBIW R28,11
00028b e089      	LDI  R24,9
00028c e0a0      	LDI  R26,LOW(0)
00028d e0b0      	LDI  R27,HIGH(0)
00028e e7ea      	LDI  R30,LOW(_0xA0024*2)
00028f e0f0      	LDI  R31,HIGH(_0xA0024*2)
000290 d129      	RCALL __INITLOCB
                 ;	*t -> R16,R17
                 ;	h -> R19
                 ;	m -> R18
                 ;	s -> R21
                 ;	i -> R20
                 ;	x -> Y+9
                 ;	time -> Y+0
                +
000291 e000     +LDI R16 , LOW ( 0 )
000292 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000293 e0e0      	LDI  R30,LOW(0)
000294 bbeb      	OUT  0x1B,R30
                 ; 0005 013D     //    DDRA = 0x00;
                 ; 0005 013E     DDRA = 0xFF;
000295 efef      	LDI  R30,LOW(255)
000296 bbea      	OUT  0x1A,R30
                 ; 0005 013F 
                 ; 0005 0140     // Port B initialization
                 ; 0005 0141     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0005 0142     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0005 0143     PORTB = 0x00;
000297 e0e0      	LDI  R30,LOW(0)
000298 bbe8      	OUT  0x18,R30
                 ; 0005 0144     DDRB = 0x00;
000299 bbe7      	OUT  0x17,R30
                 ; 0005 0145 
                 ; 0005 0146     // Port C initialization
                 ; 0005 0147     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0005 0148     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0005 0149     PORTC = 0x00;
00029a bbe5      	OUT  0x15,R30
                 ; 0005 014A     //    DDRC = 0xFF;
                 ; 0005 014B     DDRC = 0x00;
00029b bbe4      	OUT  0x14,R30
                 ; 0005 014C 
                 ; 0005 014D     // Port D initialization
                 ; 0005 014E     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0005 014F     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0005 0150     PORTD = 0x00;
00029c bbe2      	OUT  0x12,R30
                 ; 0005 0151     DDRD = 0x00;
00029d bbe1      	OUT  0x11,R30
                 ; 0005 0152 
                 ; 0005 0153     // Timer/Counter 0 initialization
                 ; 0005 0154     // Clock source: System Clock
                 ; 0005 0155     // Clock value: Timer 0 Stopped
                 ; 0005 0156     // Mode: Normal top=0xFF
                 ; 0005 0157     // OC0 output: Disconnected
                 ; 0005 0158     TCCR0 = 0x00;
00029e bfe3      	OUT  0x33,R30
                 ; 0005 0159     TCNT0 = 0x00;
00029f bfe2      	OUT  0x32,R30
                 ; 0005 015A     OCR0 = 0x00;
0002a0 bfec      	OUT  0x3C,R30
                 ; 0005 015B 
                 ; 0005 015C     // Timer/Counter 1 initialization
                 ; 0005 015D     // Clock source: System Clock
                 ; 0005 015E     // Clock value: Timer1 Stopped
                 ; 0005 015F     // Mode: Normal top=0xFFFF
                 ; 0005 0160     // OC1A output: Discon.
                 ; 0005 0161     // OC1B output: Discon.
                 ; 0005 0162     // Noise Canceler: Off
                 ; 0005 0163     // Input Capture on Falling Edge
                 ; 0005 0164     // Timer1 Overflow Interrupt: Off
                 ; 0005 0165     // Input Capture Interrupt: Off
                 ; 0005 0166     // Compare A Match Interrupt: Off
                 ; 0005 0167     // Compare B Match Interrupt: Off
                 ; 0005 0168     TCCR1A = 0x00;
0002a1 bdef      	OUT  0x2F,R30
                 ; 0005 0169     TCCR1B = 0x00;
0002a2 bdee      	OUT  0x2E,R30
                 ; 0005 016A     TCNT1H = 0x00;
0002a3 bded      	OUT  0x2D,R30
                 ; 0005 016B     TCNT1L = 0x00;
0002a4 bdec      	OUT  0x2C,R30
                 ; 0005 016C     ICR1H = 0x00;
0002a5 bde7      	OUT  0x27,R30
                 ; 0005 016D     ICR1L = 0x00;
0002a6 bde6      	OUT  0x26,R30
                 ; 0005 016E     OCR1AH = 0x00;
0002a7 bdeb      	OUT  0x2B,R30
                 ; 0005 016F     OCR1AL = 0x00;
0002a8 bdea      	OUT  0x2A,R30
                 ; 0005 0170     OCR1BH = 0x00;
0002a9 bde9      	OUT  0x29,R30
                 ; 0005 0171     OCR1BL = 0x00;
0002aa bde8      	OUT  0x28,R30
                 ; 0005 0172 
                 ; 0005 0173     // Timer/Counter 2 initialization
                 ; 0005 0174     // Clock source: System Clock
                 ; 0005 0175     // Clock value: Timer2 Stopped
                 ; 0005 0176     // Mode: Normal top=0xFF
                 ; 0005 0177     // OC2 output: Disconnected
                 ; 0005 0178     ASSR = 0x00;
0002ab bde2      	OUT  0x22,R30
                 ; 0005 0179     TCCR2 = 0x00;
0002ac bde5      	OUT  0x25,R30
                 ; 0005 017A     TCNT2 = 0x00;
0002ad bde4      	OUT  0x24,R30
                 ; 0005 017B     OCR2 = 0x00;
0002ae bde3      	OUT  0x23,R30
                 ; 0005 017C 
                 ; 0005 017D     // External Interrupt(s) initialization
                 ; 0005 017E     // INT0: Off
                 ; 0005 017F     // INT1: Off
                 ; 0005 0180     // INT2: Off
                 ; 0005 0181     MCUCR = 0x00;
0002af bfe5      	OUT  0x35,R30
                 ; 0005 0182     MCUCSR = 0x00;
0002b0 bfe4      	OUT  0x34,R30
                 ; 0005 0183 
                 ; 0005 0184     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0005 0185     TIMSK = 0x00;
0002b1 bfe9      	OUT  0x39,R30
                 ; 0005 0186 
                 ; 0005 0187     // USART initialization
                 ; 0005 0188     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0005 0189     // USART Receiver: On
                 ; 0005 018A     // USART Transmitter: On
                 ; 0005 018B     // USART Mode: Asynchronous
                 ; 0005 018C     // USART Baud Rate: 9600
                 ; 0005 018D     UCSRA = 0x00;
0002b2 b9eb      	OUT  0xB,R30
                 ; 0005 018E     UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
0002b3 e8e6      	LDI  R30,LOW(134)
0002b4 bde0      	OUT  0x20,R30
                 ; 0005 018F     UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE) | (1 << UCSZ2);
0002b5 e9ec      	LDI  R30,LOW(156)
0002b6 b9ea      	OUT  0xA,R30
                 ; 0005 0190     UBRRH = 0x00;
0002b7 e0e0      	LDI  R30,LOW(0)
0002b8 bde0      	OUT  0x20,R30
                 ; 0005 0191     UBRRL = 0x19;
0002b9 e1e9      	LDI  R30,LOW(25)
0002ba b9e9      	OUT  0x9,R30
                 ; 0005 0192     if(!IS_MASTER) disable_slave();
                 ; 0005 0193 
                 ; 0005 0194 
                 ; 0005 0195     // Analog Comparator initialization
                 ; 0005 0196     // Analog Comparator: Off
                 ; 0005 0197     // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0005 0198     ACSR = 0x80;
0002bb e8e0      	LDI  R30,LOW(128)
0002bc b9e8      	OUT  0x8,R30
                 ; 0005 0199     SFIOR = 0x00;
0002bd e0e0      	LDI  R30,LOW(0)
0002be bfe0      	OUT  0x30,R30
                 ; 0005 019A 
                 ; 0005 019B     // ADC initialization
                 ; 0005 019C     // ADC disabled
                 ; 0005 019D     ADCSRA = 0x00;
0002bf b9e6      	OUT  0x6,R30
                 ; 0005 019E 
                 ; 0005 019F     // SPI initialization
                 ; 0005 01A0     // SPI disabled
                 ; 0005 01A1     SPCR = 0x00;
0002c0 b9ed      	OUT  0xD,R30
                 ; 0005 01A2 
                 ; 0005 01A3     // TWI initialization
                 ; 0005 01A4     // TWI disabled
                 ; 0005 01A5     TWCR = 0x00;
0002c1 bfe6      	OUT  0x36,R30
                 ; 0005 01A6 
                 ; 0005 01A7     // I2C Bus initialization
                 ; 0005 01A8     // I2C Port: PORTA
                 ; 0005 01A9     // I2C SDA bit: 1
                 ; 0005 01AA     // I2C SCL bit: 0
                 ; 0005 01AB     // Bit Rate: 100 kHz
                 ; 0005 01AC     // Note: I2C settings are specified in the
                 ; 0005 01AD     // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0005 01AE     //    i2c_init();
                 ; 0005 01AF 
                 ; 0005 01B0     // 1 Wire Bus initialization
                 ; 0005 01B1     // 1 Wire Data port: PORTB
                 ; 0005 01B2     // 1 Wire Data bit: 0
                 ; 0005 01B3     // Note: 1 Wire port settings are specified in the
                 ; 0005 01B4     // Project|Configure|C Compiler|Libraries|1 Wire menu.
                 ; 0005 01B5     //    w1_init();
                 ; 0005 01B6     //    ds18b20_init(t, 0, 0, DS18B20_9BIT_RES);
                 ; 0005 01B7     //    rtc_init(0, 0, 0);
                 ; 0005 01B8 
                 ; 0005 01B9     //    TWI_Init(); //khoi dong TWI dung cho myds1307rtc.h
                 ; 0005 01BA     I2C_Init(); //khoi dong TWI dung cho myds1307rtcver2.h
0002c2 dec9      	RCALL _I2C_Init
                 ; 0005 01BB 
                 ; 0005 01BC     // Global enable interrupts
                 ; 0005 01BD #asm("sei")
0002c3 9478      	sei
                 ; 0005 01BE 
                 ; 0005 01BF     while (1) {
                 _0xA0026:
                 ; 0005 01C0 
                 ; 0005 01C1         // nhiet do
                 ; 0005 01C2         int whole = 0, decimal = 0;
                 ; 0005 01C3 
                 ; 0005 01C4         // hien thi nhiet do su dung myds18b20ver1.h
                 ; 0005 01C5         //        therm_ReadTempC(NULL, &whole, &decimal);
                 ; 0005 01C6         //        hienthinhietdo(whole);
                 ; 0005 01C7 
                 ; 0005 01C8         // hien thi nhiet do su dung myds18b20ver2.h
                 ; 0005 01C9         temp = ds18b20_gettemp();
0002c4 9724      	SBIW R28,4
0002c5 d08d      	RCALL SUBOPT_0x1
                 ;	x -> Y+13
                 ;	time -> Y+4
                 ;	whole -> Y+2
                 ;	decimal -> Y+0
0002c6 de22      	RCALL _ds18b20_gettemp
0002c7 93e0 0179 	STS  _temp,R30
0002c9 93f0 017a 	STS  _temp+1,R31
0002cb 9360 017b 	STS  _temp+2,R22
0002cd 9370 017c 	STS  _temp+3,R23
                 ; 0005 01CA         hienthinhietdo(temp);
0002cf d19b      	RCALL __CFD1U
0002d0 2fae      	MOV  R26,R30
0002d1 d01b      	RCALL _hienthinhietdo
                 ; 0005 01CB 
                 ; 0005 01CC         delay_ms(1000);
0002d2 eea8      	LDI  R26,LOW(1000)
0002d3 e0b3      	LDI  R27,HIGH(1000)
0002d4 d29f      	RCALL _delay_ms
                 ; 0005 01CD 
                 ; 0005 01CE         //        temp = ds18b20_temperature(t);
                 ; 0005 01CF 
                 ; 0005 01D0         // lay thoi gian
                 ; 0005 01D1         //        mySetTimeForDS1307ver2(&time);
                 ; 0005 01D2         //        time = myGetTimeFromDS1307();
                 ; 0005 01D3 //        time = myGetTimeFromDS1307ver2();
                 ; 0005 01D4 //        hienthithoigian(time.Hour + time.Mode * time.AP * 12, time.Minute); // hien thi theo 24h
                 ; 0005 01D5         hienthi(10);
0002d5 e0aa      	LDI  R26,LOW(10)
0002d6 e0b0      	LDI  R27,0
0002d7 d026      	RCALL _hienthi
                 ; 0005 01D6         delay_ms(2000);
0002d8 eda0      	LDI  R26,LOW(2000)
0002d9 e0b7      	LDI  R27,HIGH(2000)
0002da d299      	RCALL _delay_ms
                 ; 0005 01D7 
                 ; 0005 01D8 //        uart_char_tx('@');
                 ; 0005 01D9 //        delay_ms(100);
                 ; 0005 01DA //        uart_char_tx('2');
                 ; 0005 01DB //        delay_ms(100);
                 ; 0005 01DC //        uart_char_tx('t');
                 ; 0005 01DD //        delay_ms(100);
                 ; 0005 01DE //        uart_char_tx('#');
                 ; 0005 01DF //        delay_ms(100);
                 ; 0005 01E0 
                 ; 0005 01E1         // kytu = mygetchar();
                 ; 0005 01E2         // if(kytu !=0) putchar(kytu);
                 ; 0005 01E3         // printf("%c", my_variable);
                 ; 0005 01E4         //printf("Nhiet do hien tai la");
                 ; 0005 01E5         //kytu = uart_getchar();
                 ; 0005 01E6         received_package[0] = '@';
0002db e4e0      	LDI  R30,LOW(64)
0002dc 93e0 017d 	STS  _received_package,R30
                 ; 0005 01E7         received_package[1]='2';
0002de e3e2      	LDI  R30,LOW(50)
                +
0002df 93e0 017e+STS _received_package + ( 1 ) , R30
                 	__PUTB1MN _received_package,1
                 ; 0005 01E8         received_package[2]='t';
0002e1 e7e4      	LDI  R30,LOW(116)
                +
0002e2 93e0 017f+STS _received_package + ( 2 ) , R30
                 	__PUTB1MN _received_package,2
                 ; 0005 01E9         received_package[3]='#';
0002e4 e2e3      	LDI  R30,LOW(35)
                +
0002e5 93e0 0180+STS _received_package + ( 3 ) , R30
                 	__PUTB1MN _received_package,3
                 ; 0005 01EA         uart_address_tx(received_package[1]);
                +
0002e7 91a0 017e+LDS R26 , _received_package + ( 1 )
                 	__GETB2MN _received_package,1
0002e9 d05b      	RCALL _uart_address_tx
                 ; 0005 01EB 
                 ; 0005 01EC 
                 ; 0005 01ED 
                 ; 0005 01EE     }
0002ea 9624      	ADIW R28,4
0002eb cfd8      	RJMP _0xA0026
                 ; 0005 01EF }
                 _0xA0029:
0002ec cfff      	RJMP _0xA0029
                 ; .FEND
                 ;
                 ;void hienthinhietdo(unsigned char temp) {
                 ; 0005 01F1 void hienthinhietdo(unsigned char temp) {
                 _hienthinhietdo:
                 ; .FSTART _hienthinhietdo
                 ; 0005 01F2     unsigned char a, b;
                 ; 0005 01F3     a = temp / 10;
0002ed 93aa      	ST   -Y,R26
0002ee 931a      	ST   -Y,R17
0002ef 930a      	ST   -Y,R16
                 ;	temp -> Y+2
                 ;	a -> R17
                 ;	b -> R16
0002f0 81aa      	LDD  R26,Y+2
0002f1 d080      	RCALL SUBOPT_0x7
0002f2 2f1e      	MOV  R17,R30
                 ; 0005 01F4     b = temp % 10;
0002f3 81aa      	LDD  R26,Y+2
0002f4 27bb      	CLR  R27
0002f5 e0ea      	LDI  R30,LOW(10)
0002f6 e0f0      	LDI  R31,HIGH(10)
0002f7 d109      	RCALL __MODW21
0002f8 2f0e      	MOV  R16,R30
                 ; 0005 01F5 
                 ; 0005 01F6 
                 ; 0005 01F7     quet(0xC6);
0002f9 eca6      	LDI  R26,LOW(198)
0002fa d02a      	RCALL _quet
                 ; 0005 01F8     quet(0x9C);
0002fb e9ac      	LDI  R26,LOW(156)
0002fc d097      	RCALL SUBOPT_0xD
                 ; 0005 01F9     quet(ma[b]);
                 ; 0005 01FA     quet(ma[a]);
                 ; 0005 01FB     day(); // push
                 ; 0005 01FC }
0002fd c03b      	RJMP _0x20A0003
                 ; .FEND
                 ;
                 ;void hienthithoigian(unsigned char hour, unsigned char minute) {
                 ; 0005 01FE void hienthithoigian(unsigned char hour, unsigned char minute) {
                 ; 0005 01FF     unsigned char a, b, c, d;
                 ; 0005 0200     a = hour / 10;
                 ;	hour -> Y+5
                 ;	minute -> Y+4
                 ;	a -> R17
                 ;	b -> R16
                 ;	c -> R19
                 ;	d -> R18
                 ; 0005 0201     b = hour % 10;
                 ; 0005 0202     c = minute / 10;
                 ; 0005 0203     d = minute % 10;
                 ; 0005 0204     quet(ma[d]);
                 ; 0005 0205     quet(ma[c]);
                 ; 0005 0206     quet(~(~ma[b] | 0x80));
                 ; 0005 0207     quet(ma[a]);
                 ; 0005 0208     day();
                 ; 0005 0209 }
                 ;
                 ;void hienthi(int x) {
                 ; 0005 020B void hienthi(int x) {
                 _hienthi:
                 ; .FSTART _hienthi
                 ; 0005 020C     unsigned char a, b, c, d;
                 ; 0005 020D     int i = 0;
                 ; 0005 020E     a = x / 1000;
0002fe 93ba      	ST   -Y,R27
0002ff 93aa      	ST   -Y,R26
000300 d0ab      	RCALL __SAVELOCR6
                 ;	x -> Y+6
                 ;	a -> R17
                 ;	b -> R16
                 ;	c -> R19
                 ;	d -> R18
                 ;	i -> R20,R21
                +
000301 e040     +LDI R20 , LOW ( 0 )
000302 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000303 d09e      	RCALL SUBOPT_0xE
000304 d0f7      	RCALL __DIVW21
000305 2f1e      	MOV  R17,R30
                 ; 0005 020F     b = (x % 1000) / 100;
000306 d09b      	RCALL SUBOPT_0xE
000307 d0f9      	RCALL __MODW21
000308 01df      	MOVW R26,R30
000309 e6e4      	LDI  R30,LOW(100)
00030a e0f0      	LDI  R31,HIGH(100)
00030b d0f0      	RCALL __DIVW21
00030c 2f0e      	MOV  R16,R30
                 ; 0005 0210     c = (x % 100) / 10;
00030d 81ae      	LDD  R26,Y+6
00030e 81bf      	LDD  R27,Y+6+1
00030f e6e4      	LDI  R30,LOW(100)
000310 e0f0      	LDI  R31,HIGH(100)
000311 d0ef      	RCALL __MODW21
000312 01df      	MOVW R26,R30
000313 e0ea      	LDI  R30,LOW(10)
000314 e0f0      	LDI  R31,HIGH(10)
000315 d0e6      	RCALL __DIVW21
000316 2f3e      	MOV  R19,R30
                 ; 0005 0211     d = (x % 10);
000317 81ae      	LDD  R26,Y+6
000318 81bf      	LDD  R27,Y+6+1
000319 e0ea      	LDI  R30,LOW(10)
00031a e0f0      	LDI  R31,HIGH(10)
00031b d0e5      	RCALL __MODW21
00031c 2f2e      	MOV  R18,R30
                 ; 0005 0212 
                 ; 0005 0213     quet(ma[d]);
00031d d089      	RCALL SUBOPT_0xF
00031e d006      	RCALL _quet
                 ; 0005 0214     quet(ma[c]);
00031f 2fe3      	MOV  R30,R19
000320 d086      	RCALL SUBOPT_0xF
000321 d072      	RCALL SUBOPT_0xD
                 ; 0005 0215     quet(ma[b]);
                 ; 0005 0216     quet(ma[a]);
                 ; 0005 0217 
                 ; 0005 0218 
                 ; 0005 0219 
                 ; 0005 021A 
                 ; 0005 021B     day();
                 ; 0005 021C }
000322 d090      	RCALL __LOADLOCR6
000323 9628      	ADIW R28,8
000324 9508      	RET
                 ; .FEND
                 ;
                 ;void quet(unsigned char x) {
                 ; 0005 021E void quet(unsigned char x) {
                 _quet:
                 ; .FSTART _quet
                 ; 0005 021F     unsigned char i, temp;
                 ; 0005 0220     for (i = 0; i < 8; i++) {
000325 93aa      	ST   -Y,R26
000326 931a      	ST   -Y,R17
000327 930a      	ST   -Y,R16
                 ;	x -> Y+2
                 ;	i -> R17
                 ;	temp -> R16
000328 e010      	LDI  R17,LOW(0)
                 _0xA002B:
000329 3018      	CPI  R17,8
00032a f470      	BRSH _0xA002C
                 ; 0005 0221         temp = x;
00032b 810a      	LDD  R16,Y+2
                 ; 0005 0222         temp = temp & 0x80;
00032c 7800      	ANDI R16,LOW(128)
                 ; 0005 0223         if (temp == 0x80) {
00032d 3800      	CPI  R16,128
00032e f411      	BRNE _0xA002D
                 ; 0005 0224             PORTA.1 = 1;
00032f 9ad9      	SBI  0x1B,1
                 ; 0005 0225         } else {
000330 c001      	RJMP _0xA0030
                 _0xA002D:
                 ; 0005 0226             PORTA.1 = 0;
000331 98d9      	CBI  0x1B,1
                 ; 0005 0227         }
                 _0xA0030:
                 ; 0005 0228         x = x * 2;
000332 81ea      	LDD  R30,Y+2
000333 0fee      	LSL  R30
000334 83ea      	STD  Y+2,R30
                 ; 0005 0229         PORTA.0 = 0;
000335 98d8      	CBI  0x1B,0
                 ; 0005 022A         PORTA.0 = 1;
000336 9ad8      	SBI  0x1B,0
                 ; 0005 022B     }
000337 5f1f      	SUBI R17,-1
000338 cff0      	RJMP _0xA002B
                 _0xA002C:
                 ; 0005 022C }
                 _0x20A0003:
000339 8119      	LDD  R17,Y+1
00033a 8108      	LDD  R16,Y+0
                 _0x20A0004:
00033b 9623      	ADIW R28,3
00033c 9508      	RET
                 ; .FEND
                 ;
                 ;void day() {
                 ; 0005 022E void day() {
                 _day:
                 ; .FSTART _day
                 ; 0005 022F     PORTA.2 = 0;
00033d 98da      	CBI  0x1B,2
                 ; 0005 0230     PORTA.2 = 1;
00033e 9ada      	SBI  0x1B,2
                 ; 0005 0231 }
00033f 9508      	RET
                 ; .FEND
                 ;
                 ;//chuong trinh con phat du lieu
                 ;
                 ;void uart_char_tx(unsigned char chr) {
                 ; 0005 0235 void uart_char_tx(unsigned char chr) {
                 _uart_char_tx:
                 ; .FSTART _uart_char_tx
                 ; 0005 0236     while (!(UCSRA & (1 << UDRE))); //cho den khi bit UDRE=1 moi thoat khoi while
000340 93aa      	ST   -Y,R26
                 ;	chr -> Y+0
                 _0xA003B:
000341 9b5d      	SBIS 0xB,5
000342 cffe      	RJMP _0xA003B
                 ; 0005 0237     UCSRB &= ~(1 << TXB8); //reset the 9th bit
000343 9850      	CBI  0xA,0
                 ; 0005 0238     UDR = chr;
000344 c004      	RJMP _0x20A0001
                 ; 0005 0239 }
                 ; .FEND
                 ;
                 ;//chuong trinh con phat dia chi
                 ;
                 ;void uart_address_tx(unsigned char chr) {
                 ; 0005 023D void uart_address_tx(unsigned char chr) {
                 _uart_address_tx:
                 ; .FSTART _uart_address_tx
                 ; 0005 023E     while (!(UCSRA & (1 << UDRE))); //cho den khi bit UDRE=1 moi thoat khoi while
000345 93aa      	ST   -Y,R26
                 ;	chr -> Y+0
                 _0xA003E:
000346 9b5d      	SBIS 0xB,5
000347 cffe      	RJMP _0xA003E
                 ; 0005 023F     UCSRB |= (1 << TXB8);
000348 9a50      	SBI  0xA,0
                 ; 0005 0240     UDR = chr;
                 _0x20A0001:
000349 81e8      	LD   R30,Y
00034a b9ec      	OUT  0xC,R30
                 ; 0005 0241 }
                 _0x20A0002:
00034b 9621      	ADIW R28,1
00034c 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;unsigned char uart_getchar() {
                 ; 0005 0244 unsigned char uart_getchar() {
                 ; 0005 0245     unsigned char a = '';
                 ; 0005 0246     a = UDR;
                 ;	a -> R17
                 ; 0005 0247     return a;
                 ; 0005 0248 }
                 ;
                 ;void getState(unsigned char a) {
                 ; 0005 024A void getState(unsigned char a) {
                 ; 0005 024B     switch (a) {
                 ;	a -> Y+0
                 ; 0005 024C         case 't':
                 ; 0005 024D             printf("Nhiet do hien tai la %f", temp);
                 ; 0005 024E             break;
                 ; 0005 024F         case 'h':
                 ; 0005 0250             printf("xin chao");
                 ; 0005 0251             break;
                 ; 0005 0252     }
                 ; 0005 0253 }
                 ;
                 ;//interrupt [USART_RXC] void rx_isr(){ //ngat nhan khi bit RXC =1
                 ;//  kytu = UDR;
                 ;//}
                 ;
                 ;
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _registry_ds1307:
000160           	.BYTE 0x7
                 _rx_buffer:
000167           	.BYTE 0x8
                 _ma:
00016f           	.BYTE 0xA
                 _temp:
000179           	.BYTE 0x4
                 _received_package:
00017d           	.BYTE 0xA
                 _slave_enable:
000187           	.BYTE 0x2
                 __seed_G100:
000189           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
00034d 98c0      	CBI  0x18,0
00034e 9ab8      	SBI  0x17,0
                +
00034f e081     +LDI R24 , LOW ( 1 )
                +__DELAY_USB_LOOP :
000350 958a     +DEC R24
000351 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 1
000352 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000353 e0e0      	LDI  R30,LOW(0)
000354 83e8      	ST   Y,R30
000355 83e9      	STD  Y+1,R30
000356 83ea      	STD  Y+2,R30
000357 83eb      	STD  Y+3,R30
000358 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
000359 ede0      	LDI  R30,LOW(208)
00035a 93ea      	ST   -Y,R30
00035b e0a2      	LDI  R26,LOW(2)
00035c ce58      	RJMP _I2C_ReadRegister
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00035d 81e8      	LD   R30,Y
00035e b9e3      	OUT  0x3,R30
00035f e8e4      	LDI  R30,LOW(132)
000360 bfe6      	OUT  0x36,R30
000361 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:34 WORDS
                 SUBOPT_0x4:
000362 dfdd      	RCALL _uart_char_tx
000363 e6a4      	LDI  R26,LOW(100)
000364 e0b0      	LDI  R27,0
000365 c20e      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:26 WORDS
                 SUBOPT_0x5:
000366 27bb      	CLR  R27
000367 df96      	RCALL _hienthi
000368 eda0      	LDI  R26,LOW(2000)
000369 e0b7      	LDI  R27,HIGH(2000)
00036a d209      	RCALL _delay_ms
00036b e6a4      	LDI  R26,LOW(100)
00036c e0b0      	LDI  R27,0
00036d c206      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
00036e df8f      	RCALL _hienthi
00036f eaa0      	LDI  R26,LOW(4000)
000370 e0bf      	LDI  R27,HIGH(4000)
000371 c202      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000372 e0b0      	LDI  R27,0
000373 e0ea      	LDI  R30,LOW(10)
000374 e0f0      	LDI  R31,HIGH(10)
000375 d086      	RCALL __DIVW21
000376 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
000377 93ea      	ST   -Y,R30
                +
000378 91e0 0181+LDS R30 , _received_package + ( 4 )
                 	__GETB1MN _received_package,4
00037a 93ea      	ST   -Y,R30
                +
00037b 91a0 0182+LDS R26 , _received_package + ( 5 )
                 	__GETB2MN _received_package,5
00037d ce59      	RJMP _return_data_to_computer
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
00037e e0e0      	LDI  R30,LOW(0)
00037f 93ea      	ST   -Y,R30
000380 e0e1      	LDI  R30,LOW(1)
000381 93ea      	ST   -Y,R30
000382 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xA:
000383 01f6      	MOVW R30,R12
000384 58e3      	SUBI R30,LOW(-_received_package)
000385 4ffe      	SBCI R31,HIGH(-_received_package)
000386 8280      	ST   Z,R8
000387 01f6      	MOVW R30,R12
000388 9631      	ADIW R30,1
000389 016f      	MOVW R12,R30
00038a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00038b e0e9      	LDI  R30,LOW(9)
00038c e0f0      	LDI  R31,HIGH(9)
00038d 15ec      	CP   R30,R12
00038e 05fd      	CPC  R31,R13
00038f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000390 e0e1      	LDI  R30,LOW(1)
000391 e0f0      	LDI  R31,HIGH(1)
000392 015f      	MOVW R10,R30
000393 ce64      	RJMP _execute_query
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xD:
000394 df90      	RCALL _quet
000395 2fe0      	MOV  R30,R16
000396 e0f0      	LDI  R31,0
000397 59e1      	SUBI R30,LOW(-_ma)
000398 4ffe      	SBCI R31,HIGH(-_ma)
000399 81a0      	LD   R26,Z
00039a df8a      	RCALL _quet
00039b 2fe1      	MOV  R30,R17
00039c e0f0      	LDI  R31,0
00039d 59e1      	SUBI R30,LOW(-_ma)
00039e 4ffe      	SBCI R31,HIGH(-_ma)
00039f 81a0      	LD   R26,Z
0003a0 df84      	RCALL _quet
0003a1 cf9b      	RJMP _day
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0003a2 81ae      	LDD  R26,Y+6
0003a3 81bf      	LDD  R27,Y+6+1
0003a4 eee8      	LDI  R30,LOW(1000)
0003a5 e0f3      	LDI  R31,HIGH(1000)
0003a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
0003a7 e0f0      	LDI  R31,0
0003a8 59e1      	SUBI R30,LOW(-_ma)
0003a9 4ffe      	SBCI R31,HIGH(-_ma)
0003aa 81a0      	LD   R26,Z
0003ab 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0003ac 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003ad 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003ae 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003af 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003b0 931a      	ST   -Y,R17
0003b1 930a      	ST   -Y,R16
0003b2 9508      	RET
                 
                 __LOADLOCR6:
0003b3 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003b4 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003b5 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003b6 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003b7 8119      	LDD  R17,Y+1
0003b8 8108      	LD   R16,Y
0003b9 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0003ba 0fac      	ADD  R26,R28
0003bb 1fbd      	ADC  R27,R29
                 __INITLOC0:
0003bc 9005      	LPM  R0,Z+
0003bd 920d      	ST   X+,R0
0003be 958a      	DEC  R24
0003bf f7e1      	BRNE __INITLOC0
0003c0 9508      	RET
                 
                 __ANEGW1:
0003c1 95f1      	NEG  R31
0003c2 95e1      	NEG  R30
0003c3 40f0      	SBCI R31,0
0003c4 9508      	RET
                 
                 __ANEGD1:
0003c5 95f0      	COM  R31
0003c6 9560      	COM  R22
0003c7 9570      	COM  R23
0003c8 95e1      	NEG  R30
0003c9 4fff      	SBCI R31,-1
0003ca 4f6f      	SBCI R22,-1
0003cb 4f7f      	SBCI R23,-1
0003cc 9508      	RET
                 
                 __CWD1:
0003cd 2f6f      	MOV  R22,R31
0003ce 0f66      	ADD  R22,R22
0003cf 0b66      	SBC  R22,R22
0003d0 2f76      	MOV  R23,R22
0003d1 9508      	RET
                 
                 __CWD2:
0003d2 2f8b      	MOV  R24,R27
0003d3 0f88      	ADD  R24,R24
0003d4 0b88      	SBC  R24,R24
0003d5 2f98      	MOV  R25,R24
0003d6 9508      	RET
                 
                 __EQB12:
0003d7 17ea      	CP   R30,R26
0003d8 e0e1      	LDI  R30,1
0003d9 f009      	BREQ __EQB12T
0003da 27ee      	CLR  R30
                 __EQB12T:
0003db 9508      	RET
                 
                 __NEB12:
0003dc 17ea      	CP   R30,R26
0003dd e0e1      	LDI  R30,1
0003de f409      	BRNE __NEB12T
0003df 27ee      	CLR  R30
                 __NEB12T:
0003e0 9508      	RET
                 
                 __MULW12U:
0003e1 9ffa      	MUL  R31,R26
0003e2 2df0      	MOV  R31,R0
0003e3 9feb      	MUL  R30,R27
0003e4 0df0      	ADD  R31,R0
0003e5 9fea      	MUL  R30,R26
0003e6 2de0      	MOV  R30,R0
0003e7 0df1      	ADD  R31,R1
0003e8 9508      	RET
                 
                 __DIVW21U:
0003e9 2400      	CLR  R0
0003ea 2411      	CLR  R1
0003eb e190      	LDI  R25,16
                 __DIVW21U1:
0003ec 0faa      	LSL  R26
0003ed 1fbb      	ROL  R27
0003ee 1c00      	ROL  R0
0003ef 1c11      	ROL  R1
0003f0 1a0e      	SUB  R0,R30
0003f1 0a1f      	SBC  R1,R31
0003f2 f418      	BRCC __DIVW21U2
0003f3 0e0e      	ADD  R0,R30
0003f4 1e1f      	ADC  R1,R31
0003f5 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003f6 60a1      	SBR  R26,1
                 __DIVW21U3:
0003f7 959a      	DEC  R25
0003f8 f799      	BRNE __DIVW21U1
0003f9 01fd      	MOVW R30,R26
0003fa 01d0      	MOVW R26,R0
0003fb 9508      	RET
                 
                 __DIVW21:
0003fc d012      	RCALL __CHKSIGNW
0003fd dfeb      	RCALL __DIVW21U
0003fe f40e      	BRTC __DIVW211
0003ff dfc1      	RCALL __ANEGW1
                 __DIVW211:
000400 9508      	RET
                 
                 __MODW21:
000401 94e8      	CLT
000402 ffb7      	SBRS R27,7
000403 c004      	RJMP __MODW211
000404 95b1      	NEG  R27
000405 95a1      	NEG  R26
000406 40b0      	SBCI R27,0
000407 9468      	SET
                 __MODW211:
000408 fdf7      	SBRC R31,7
000409 dfb7      	RCALL __ANEGW1
00040a dfde      	RCALL __DIVW21U
00040b 01fd      	MOVW R30,R26
00040c f40e      	BRTC __MODW212
00040d dfb3      	RCALL __ANEGW1
                 __MODW212:
00040e 9508      	RET
                 
                 __CHKSIGNW:
00040f 94e8      	CLT
000410 fff7      	SBRS R31,7
000411 c002      	RJMP __CHKSW1
000412 dfae      	RCALL __ANEGW1
000413 9468      	SET
                 __CHKSW1:
000414 ffb7      	SBRS R27,7
000415 c006      	RJMP __CHKSW2
000416 95b1      	NEG  R27
000417 95a1      	NEG  R26
000418 40b0      	SBCI R27,0
000419 f800      	BLD  R0,0
00041a 9403      	INC  R0
00041b fa00      	BST  R0,0
                 __CHKSW2:
00041c 9508      	RET
                 
                 __PUTDP1:
00041d 93ed      	ST   X+,R30
00041e 93fd      	ST   X+,R31
00041f 936d      	ST   X+,R22
000420 937c      	ST   X,R23
000421 9508      	RET
                 
                 __CDF2U:
000422 9468      	SET
000423 c001      	RJMP __CDF2U0
                 __CDF2:
000424 94e8      	CLT
                 __CDF2U0:
000425 d001      	RCALL __SWAPD12
000426 d07e      	RCALL __CDF1U0
                 
                 __SWAPD12:
000427 2e18      	MOV  R1,R24
000428 2f86      	MOV  R24,R22
000429 2d61      	MOV  R22,R1
00042a 2e19      	MOV  R1,R25
00042b 2f97      	MOV  R25,R23
00042c 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
00042d 2e1b      	MOV  R1,R27
00042e 2fbf      	MOV  R27,R31
00042f 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000430 2e1a      	MOV  R1,R26
000431 2fae      	MOV  R26,R30
000432 2de1      	MOV  R30,R1
000433 9508      	RET
                 
                 __COPYMML:
000434 2799      	CLR  R25
                 __COPYMM:
000435 93ef      	PUSH R30
000436 93ff      	PUSH R31
                 __COPYMM0:
000437 9161      	LD   R22,Z+
000438 936d      	ST   X+,R22
000439 9701      	SBIW R24,1
00043a f7e1      	BRNE __COPYMM0
00043b 91ff      	POP  R31
00043c 91ef      	POP  R30
00043d 9508      	RET
                 
                 __ROUND_REPACK:
00043e 2355      	TST  R21
00043f f442      	BRPL __REPACK
000440 3850      	CPI  R21,0x80
000441 f411      	BRNE __ROUND_REPACK0
000442 ffe0      	SBRS R30,0
000443 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000444 9631      	ADIW R30,1
000445 1f69      	ADC  R22,R25
000446 1f79      	ADC  R23,R25
000447 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000448 e850      	LDI  R21,0x80
000449 2757      	EOR  R21,R23
00044a f411      	BRNE __REPACK0
00044b 935f      	PUSH R21
00044c c0c8      	RJMP __ZERORES
                 __REPACK0:
00044d 3f5f      	CPI  R21,0xFF
00044e f031      	BREQ __REPACK1
00044f 0f66      	LSL  R22
000450 0c00      	LSL  R0
000451 9557      	ROR  R21
000452 9567      	ROR  R22
000453 2f75      	MOV  R23,R21
000454 9508      	RET
                 __REPACK1:
000455 935f      	PUSH R21
000456 2000      	TST  R0
000457 f00a      	BRMI __REPACK2
000458 c0c7      	RJMP __MAXRES
                 __REPACK2:
000459 c0c0      	RJMP __MINRES
                 
                 __UNPACK:
00045a e850      	LDI  R21,0x80
00045b 2e19      	MOV  R1,R25
00045c 2215      	AND  R1,R21
00045d 0f88      	LSL  R24
00045e 1f99      	ROL  R25
00045f 2795      	EOR  R25,R21
000460 0f55      	LSL  R21
000461 9587      	ROR  R24
                 
                 __UNPACK1:
000462 e850      	LDI  R21,0x80
000463 2e07      	MOV  R0,R23
000464 2205      	AND  R0,R21
000465 0f66      	LSL  R22
000466 1f77      	ROL  R23
000467 2775      	EOR  R23,R21
000468 0f55      	LSL  R21
000469 9567      	ROR  R22
00046a 9508      	RET
                 
                 __CFD1U:
00046b 9468      	SET
00046c c001      	RJMP __CFD1U0
                 __CFD1:
00046d 94e8      	CLT
                 __CFD1U0:
00046e 935f      	PUSH R21
00046f dff2      	RCALL __UNPACK1
000470 3870      	CPI  R23,0x80
000471 f018      	BRLO __CFD10
000472 3f7f      	CPI  R23,0xFF
000473 f408      	BRCC __CFD10
000474 c0a0      	RJMP __ZERORES
                 __CFD10:
000475 e156      	LDI  R21,22
000476 1b57      	SUB  R21,R23
000477 f4aa      	BRPL __CFD11
000478 9551      	NEG  R21
000479 3058      	CPI  R21,8
00047a f40e      	BRTC __CFD19
00047b 3059      	CPI  R21,9
                 __CFD19:
00047c f030      	BRLO __CFD17
00047d efef      	SER  R30
00047e efff      	SER  R31
00047f ef6f      	SER  R22
000480 e77f      	LDI  R23,0x7F
000481 f977      	BLD  R23,7
000482 c01a      	RJMP __CFD15
                 __CFD17:
000483 2777      	CLR  R23
000484 2355      	TST  R21
000485 f0b9      	BREQ __CFD15
                 __CFD18:
000486 0fee      	LSL  R30
000487 1fff      	ROL  R31
000488 1f66      	ROL  R22
000489 1f77      	ROL  R23
00048a 955a      	DEC  R21
00048b f7d1      	BRNE __CFD18
00048c c010      	RJMP __CFD15
                 __CFD11:
00048d 2777      	CLR  R23
                 __CFD12:
00048e 3058      	CPI  R21,8
00048f f028      	BRLO __CFD13
000490 2fef      	MOV  R30,R31
000491 2ff6      	MOV  R31,R22
000492 2f67      	MOV  R22,R23
000493 5058      	SUBI R21,8
000494 cff9      	RJMP __CFD12
                 __CFD13:
000495 2355      	TST  R21
000496 f031      	BREQ __CFD15
                 __CFD14:
000497 9576      	LSR  R23
000498 9567      	ROR  R22
000499 95f7      	ROR  R31
00049a 95e7      	ROR  R30
00049b 955a      	DEC  R21
00049c f7d1      	BRNE __CFD14
                 __CFD15:
00049d 2000      	TST  R0
00049e f40a      	BRPL __CFD16
00049f df25      	RCALL __ANEGD1
                 __CFD16:
0004a0 915f      	POP  R21
0004a1 9508      	RET
                 
                 __CDF1U:
0004a2 9468      	SET
0004a3 c001      	RJMP __CDF1U0
                 __CDF1:
0004a4 94e8      	CLT
                 __CDF1U0:
0004a5 9730      	SBIW R30,0
0004a6 4060      	SBCI R22,0
0004a7 4070      	SBCI R23,0
0004a8 f0b1      	BREQ __CDF10
0004a9 2400      	CLR  R0
0004aa f026      	BRTS __CDF11
0004ab 2377      	TST  R23
0004ac f412      	BRPL __CDF11
0004ad 9400      	COM  R0
0004ae df16      	RCALL __ANEGD1
                 __CDF11:
0004af 2e17      	MOV  R1,R23
0004b0 e17e      	LDI  R23,30
0004b1 2011      	TST  R1
                 __CDF12:
0004b2 f032      	BRMI __CDF13
0004b3 957a      	DEC  R23
0004b4 0fee      	LSL  R30
0004b5 1fff      	ROL  R31
0004b6 1f66      	ROL  R22
0004b7 1c11      	ROL  R1
0004b8 cff9      	RJMP __CDF12
                 __CDF13:
0004b9 2fef      	MOV  R30,R31
0004ba 2ff6      	MOV  R31,R22
0004bb 2d61      	MOV  R22,R1
0004bc 935f      	PUSH R21
0004bd df8a      	RCALL __REPACK
0004be 915f      	POP  R21
                 __CDF10:
0004bf 9508      	RET
                 
                 __SWAPACC:
0004c0 934f      	PUSH R20
0004c1 01af      	MOVW R20,R30
0004c2 01fd      	MOVW R30,R26
0004c3 01da      	MOVW R26,R20
0004c4 01ab      	MOVW R20,R22
0004c5 01bc      	MOVW R22,R24
0004c6 01ca      	MOVW R24,R20
0004c7 2d40      	MOV  R20,R0
0004c8 2c01      	MOV  R0,R1
0004c9 2e14      	MOV  R1,R20
0004ca 914f      	POP  R20
0004cb 9508      	RET
                 
                 __UADD12:
0004cc 0fea      	ADD  R30,R26
0004cd 1ffb      	ADC  R31,R27
0004ce 1f68      	ADC  R22,R24
0004cf 9508      	RET
                 
                 __NEGMAN1:
0004d0 95e0      	COM  R30
0004d1 95f0      	COM  R31
0004d2 9560      	COM  R22
0004d3 5fef      	SUBI R30,-1
0004d4 4fff      	SBCI R31,-1
0004d5 4f6f      	SBCI R22,-1
0004d6 9508      	RET
                 
                 __ADDF12:
0004d7 935f      	PUSH R21
0004d8 df81      	RCALL __UNPACK
0004d9 3890      	CPI  R25,0x80
0004da f139      	BREQ __ADDF129
                 
                 __ADDF120:
0004db 3870      	CPI  R23,0x80
0004dc f121      	BREQ __ADDF128
                 __ADDF121:
0004dd 2f57      	MOV  R21,R23
0004de 1b59      	SUB  R21,R25
0004df f12b      	BRVS __ADDF1211
0004e0 f412      	BRPL __ADDF122
0004e1 dfde      	RCALL __SWAPACC
0004e2 cffa      	RJMP __ADDF121
                 __ADDF122:
0004e3 3158      	CPI  R21,24
0004e4 f018      	BRLO __ADDF123
0004e5 27aa      	CLR  R26
0004e6 27bb      	CLR  R27
0004e7 2788      	CLR  R24
                 __ADDF123:
0004e8 3058      	CPI  R21,8
0004e9 f028      	BRLO __ADDF124
0004ea 2fab      	MOV  R26,R27
0004eb 2fb8      	MOV  R27,R24
0004ec 2788      	CLR  R24
0004ed 5058      	SUBI R21,8
0004ee cff9      	RJMP __ADDF123
                 __ADDF124:
0004ef 2355      	TST  R21
0004f0 f029      	BREQ __ADDF126
                 __ADDF125:
0004f1 9586      	LSR  R24
0004f2 95b7      	ROR  R27
0004f3 95a7      	ROR  R26
0004f4 955a      	DEC  R21
0004f5 f7d9      	BRNE __ADDF125
                 __ADDF126:
0004f6 2d50      	MOV  R21,R0
0004f7 2551      	EOR  R21,R1
0004f8 f072      	BRMI __ADDF127
0004f9 dfd2      	RCALL __UADD12
0004fa f438      	BRCC __ADDF129
0004fb 9567      	ROR  R22
0004fc 95f7      	ROR  R31
0004fd 95e7      	ROR  R30
0004fe 9573      	INC  R23
0004ff f413      	BRVC __ADDF129
000500 c01f      	RJMP __MAXRES
                 __ADDF128:
000501 dfbe      	RCALL __SWAPACC
                 __ADDF129:
000502 df45      	RCALL __REPACK
000503 915f      	POP  R21
000504 9508      	RET
                 __ADDF1211:
000505 f7d8      	BRCC __ADDF128
000506 cffb      	RJMP __ADDF129
                 __ADDF127:
000507 1bea      	SUB  R30,R26
000508 0bfb      	SBC  R31,R27
000509 0b68      	SBC  R22,R24
00050a f051      	BREQ __ZERORES
00050b f410      	BRCC __ADDF1210
00050c 9400      	COM  R0
00050d dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
00050e 2366      	TST  R22
00050f f392      	BRMI __ADDF129
000510 0fee      	LSL  R30
000511 1fff      	ROL  R31
000512 1f66      	ROL  R22
000513 957a      	DEC  R23
000514 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000515 27ee      	CLR  R30
000516 27ff      	CLR  R31
000517 01bf      	MOVW R22,R30
000518 915f      	POP  R21
000519 9508      	RET
                 
                 __MINRES:
00051a efef      	SER  R30
00051b efff      	SER  R31
00051c e76f      	LDI  R22,0x7F
00051d ef7f      	SER  R23
00051e 915f      	POP  R21
00051f 9508      	RET
                 
                 __MAXRES:
000520 efef      	SER  R30
000521 efff      	SER  R31
000522 e76f      	LDI  R22,0x7F
000523 e77f      	LDI  R23,0x7F
000524 915f      	POP  R21
000525 9508      	RET
                 
                 __MULF12:
000526 935f      	PUSH R21
000527 df32      	RCALL __UNPACK
000528 3870      	CPI  R23,0x80
000529 f359      	BREQ __ZERORES
00052a 3890      	CPI  R25,0x80
00052b f349      	BREQ __ZERORES
00052c 2401      	EOR  R0,R1
00052d 9408      	SEC
00052e 1f79      	ADC  R23,R25
00052f f423      	BRVC __MULF124
000530 f324      	BRLT __ZERORES
                 __MULF125:
000531 2000      	TST  R0
000532 f33a      	BRMI __MINRES
000533 cfec      	RJMP __MAXRES
                 __MULF124:
000534 920f      	PUSH R0
000535 931f      	PUSH R17
000536 932f      	PUSH R18
000537 933f      	PUSH R19
000538 934f      	PUSH R20
000539 2711      	CLR  R17
00053a 2722      	CLR  R18
00053b 2799      	CLR  R25
00053c 9f68      	MUL  R22,R24
00053d 01a0      	MOVW R20,R0
00053e 9f8f      	MUL  R24,R31
00053f 2d30      	MOV  R19,R0
000540 0d41      	ADD  R20,R1
000541 1f59      	ADC  R21,R25
000542 9f6b      	MUL  R22,R27
000543 0d30      	ADD  R19,R0
000544 1d41      	ADC  R20,R1
000545 1f59      	ADC  R21,R25
000546 9f8e      	MUL  R24,R30
000547 d027      	RCALL __MULF126
000548 9fbf      	MUL  R27,R31
000549 d025      	RCALL __MULF126
00054a 9f6a      	MUL  R22,R26
00054b d023      	RCALL __MULF126
00054c 9fbe      	MUL  R27,R30
00054d d01d      	RCALL __MULF127
00054e 9faf      	MUL  R26,R31
00054f d01b      	RCALL __MULF127
000550 9fae      	MUL  R26,R30
000551 0d11      	ADD  R17,R1
000552 1f29      	ADC  R18,R25
000553 1f39      	ADC  R19,R25
000554 1f49      	ADC  R20,R25
000555 1f59      	ADC  R21,R25
000556 2fe3      	MOV  R30,R19
000557 2ff4      	MOV  R31,R20
000558 2f65      	MOV  R22,R21
000559 2f52      	MOV  R21,R18
00055a 914f      	POP  R20
00055b 913f      	POP  R19
00055c 912f      	POP  R18
00055d 911f      	POP  R17
00055e 900f      	POP  R0
00055f 2366      	TST  R22
000560 f02a      	BRMI __MULF122
000561 0f55      	LSL  R21
000562 1fee      	ROL  R30
000563 1fff      	ROL  R31
000564 1f66      	ROL  R22
000565 c002      	RJMP __MULF123
                 __MULF122:
000566 9573      	INC  R23
000567 f24b      	BRVS __MULF125
                 __MULF123:
000568 ded5      	RCALL __ROUND_REPACK
000569 915f      	POP  R21
00056a 9508      	RET
                 
                 __MULF127:
00056b 0d10      	ADD  R17,R0
00056c 1d21      	ADC  R18,R1
00056d 1f39      	ADC  R19,R25
00056e c002      	RJMP __MULF128
                 __MULF126:
00056f 0d20      	ADD  R18,R0
000570 1d31      	ADC  R19,R1
                 __MULF128:
000571 1f49      	ADC  R20,R25
000572 1f59      	ADC  R21,R25
000573 9508      	RET
                 
                 _delay_ms:
000574 9610      	adiw r26,0
000575 f039      	breq __delay_ms1
                 __delay_ms0:
000576 95a8      	wdr
                +
000577 ee88     +LDI R24 , LOW ( 0x3E8 )
000578 e093     +LDI R25 , HIGH ( 0x3E8 )
                +__DELAY_USW_LOOP :
000579 9701     +SBIW R24 , 1
00057a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3E8
00057b 9711      	sbiw r26,1
00057c f7c9      	brne __delay_ms0
                 __delay_ms1:
00057d 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  42 r1 :  32 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   5 r9 :   0 r10:   3 r11:   2 r12:   8 r13:   4 r14:   0 r15:   2 
r16:  21 r17:  45 r18:  13 r19:  12 r20:  19 r21:  58 r22:  54 r23:  43 
r24:  52 r25:  33 r26: 137 r27:  48 r28:  19 r29:   2 r30: 324 r31:  79 
x  :   9 y  : 149 z  :  13 
Registers used: 27 out of 35 (77.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  20 add   :  14 
adiw  :  14 and   :   2 andi  :  21 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  24 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 
brlt  :   1 brmi  :   6 brne  :  28 brpl  :   5 brsh  :   1 brtc  :   3 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   1 call  :   0 
cbi   :  11 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  28 cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :   8 
cp    :   8 cpc   :   3 cpi   :  22 cpse  :   0 dec   :  13 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  11 inc   :   3 jmp   :  24 ld    :  27 ldd   :  42 ldi   : 174 
lds   :  16 lpm   :   8 lsl   :  12 lsr   :   4 mov   :  71 movw  :  27 
mul   :  12 muls  :   1 mulsu :   0 neg   :   8 nop   :   0 or    :   3 
ori   :   0 out   :  55 pop   :  17 push  :  16 rcall : 158 ret   :  58 
reti  :   1 rjmp  :  49 rol   :  16 ror   :  14 sbc   :   5 sbci  :  14 
sbi   :   7 sbic  :   1 sbis  :   2 sbiw  :  14 sbr   :   1 sbrc  :   2 
sbrs  :   4 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   9 
ses   :   0 set   :   5 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  71 std   :  23 sts   :  12 sub   :   4 subi  :  11 swap  :   3 
tst   :  11 wdr   :   1 
Instructions used: 76 out of 116 (65.5%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000afc   2692    120   2812   16384  17.2%
[.dseg] 0x000060 0x00018d      0     45     45    1024   4.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 14 warnings
