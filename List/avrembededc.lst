
AVRASM ver. 2.1.30  D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm Thu Jun 23 14:46:05 2016

D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1095): warning: Register r5 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1096): warning: Register r4 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1097): warning: Register r7 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1098): warning: Register r6 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1099): warning: Register r9 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1100): warning: Register r8 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1101): warning: Register r10 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1102): warning: Register r11 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1103): warning: Register r12 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1104): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.24 Evaluation
                 ;(C) Copyright 1998-2015 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _kytu=R6
                 	.DEF _b=R9
                 	.DEF _received_byte=R8
                 	.DEF _isComplete=R10
                 	.DEF _isComplete_msb=R11
                 	.DEF _package_size=R12
                 	.DEF _package_size_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 02ac 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0200      	.DB  0x0,0x0,0x0,0x2
000036 0001
000037 0000      	.DB  0x1,0x0,0x0,0x0
                 
                 _0xA0004:
000038 f9c0
000039 b0a4
00003a 9299
00003b f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
00003c 9080      	.DB  0x80,0x90
                 _0xA0024:
00003d 0f1e
00003e 050a
00003f 050c
000040 0110      	.DB  0x1E,0xF,0xA,0x5,0xC,0x5,0x10,0x1
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1155): warning: .cseg .db misalignment - padding zero byte
000041 0001      	.DB  0x1
                 _0xA0000:
000042 6568
000043 6568
000044 0068
000045 6625      	.DB  0x68,0x65,0x68,0x65,0x68,0x0,0x25,0x66
000046 4e00
000047 6968
000048 7465
000049 6420      	.DB  0x0,0x4E,0x68,0x69,0x65,0x74,0x20,0x64
00004a 206f
00004b 6968
00004c 6e65
00004d 7420      	.DB  0x6F,0x20,0x68,0x69,0x65,0x6E,0x20,0x74
00004e 6961
00004f 6c20
000050 2061
000051 6625      	.DB  0x61,0x69,0x20,0x6C,0x61,0x20,0x25,0x66
000052 7800
000053 6e69
000054 6320
000055 6168      	.DB  0x0,0x78,0x69,0x6E,0x20,0x63,0x68,0x61
000056 006f      	.DB  0x6F,0x0
                 _0x2000060:
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1164): warning: .cseg .db misalignment - padding zero byte
000057 0001      	.DB  0x1
                 _0x2000000:
000058 4e2d
000059 4e41
00005a 4900
00005b 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1167): warning: .cseg .db misalignment - padding zero byte
00005c 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00005d 0001      	.DW  0x01
00005e 0002      	.DW  0x02
00005f 0066      	.DW  __REG_BIT_VARS*2
                 
000060 0008      	.DW  0x08
000061 0006      	.DW  0x06
000062 0068      	.DW  __REG_VARS*2
                 
000063 000a      	.DW  0x0A
000064 016f      	.DW  _ma
000065 0070      	.DW  _0xA0004*2
                 
000066 0001      	.DW  0x01
000067 0189      	.DW  __seed_G100
000068 00ae      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
000069 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00006a 94f8      	CLI
00006b 27ee      	CLR  R30
00006c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00006d e0f1      	LDI  R31,1
00006e bffb      	OUT  GICR,R31
00006f bfeb      	OUT  GICR,R30
000070 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000071 e1f8      	LDI  R31,0x18
000072 bdf1      	OUT  WDTCR,R31
000073 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000074 e08d      	LDI  R24,(14-2)+1
000075 e0a2      	LDI  R26,2
000076 27bb      	CLR  R27
                 __CLEAR_REG:
000077 93ed      	ST   X+,R30
000078 958a      	DEC  R24
000079 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00007a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00007b e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00007c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00007d 93ed      	ST   X+,R30
00007e 9701      	SBIW R24,1
00007f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000080 ebea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000081 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000082 9185      	LPM  R24,Z+
000083 9195      	LPM  R25,Z+
000084 9700      	SBIW R24,0
000085 f061      	BREQ __GLOBAL_INI_END
000086 91a5      	LPM  R26,Z+
000087 91b5      	LPM  R27,Z+
000088 9005      	LPM  R0,Z+
000089 9015      	LPM  R1,Z+
00008a 01bf      	MOVW R22,R30
00008b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00008c 9005      	LPM  R0,Z+
00008d 920d      	ST   X+,R0
00008e 9701      	SBIW R24,1
00008f f7e1      	BRNE __GLOBAL_INI_LOOP
000090 01fb      	MOVW R30,R22
000091 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000092 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000093 bfed      	OUT  SPL,R30
000094 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000095 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000096 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000097 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000098 940c 02c9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <myds18b20ver1.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// the following arrays specify the addresses of *my* ds18b20 devices
                 ;// substitute the address of your devices before using.
                 ;
                 ;//byte rom0[] = {0x28, 0xE1, 0x21, 0xA3, 0x02, 0x00, 0x00, 0x5B};
                 ;//byte rom1[] = {0x28, 0x1B, 0x21, 0x30, 0x05, 0x00, 0x00, 0xF5};
                 ;
                 ;byte therm_Reset() {
                 ; 0000 0009 byte therm_Reset() {
                 
                 	.CSEG
                 ; 0000 000A     byte i;
                 ; 0000 000B     THERM_OUTPUT(); // set pin as output
                 ;	i -> R17
                 ; 0000 000C     THERM_LOW(); // pull pin low for 480uS
                 ; 0000 000D     delay_us(480);
                 ; 0000 000E     THERM_INPUT(); // set pin as input
                 ; 0000 000F     delay_us(60); // wait for 60uS
                 ; 0000 0010     i = THERM_READ(); // get pin value
                 ; 0000 0011     delay_us(420); // wait for rest of 480uS period
                 ; 0000 0012     return i;
                 ; 0000 0013 }
                 ;
                 ;void therm_WriteBit(byte _bit) {
                 ; 0000 0015 void therm_WriteBit(byte _bit) {
                 ; 0000 0016     THERM_OUTPUT(); // set pin as output
                 ;	_bit -> Y+0
                 ; 0000 0017     THERM_LOW(); // pull pin low for 1uS
                 ; 0000 0018     delay_us(1);
                 ; 0000 0019     if (_bit) THERM_INPUT(); // to write 1, float pin
                 ; 0000 001A     delay_us(60);
                 ; 0000 001B     THERM_INPUT(); // wait 60uS & release pin
                 ; 0000 001C }
                 ;
                 ;byte therm_ReadBit() {
                 ; 0000 001E byte therm_ReadBit() {
                 ; 0000 001F     byte _bit = 0;
                 ; 0000 0020     THERM_OUTPUT(); // set pin as output
                 ;	_bit -> R17
                 ; 0000 0021     THERM_LOW(); // pull pin low for 1uS
                 ; 0000 0022     delay_us(1);
                 ; 0000 0023     THERM_INPUT(); // release pin & wait 14 uS
                 ; 0000 0024     delay_us(14);
                 ; 0000 0025     if (THERM_READ()) _bit = 1; // read pin value
                 ; 0000 0026     delay_us(45); // wait rest of 60uS period
                 ; 0000 0027     return _bit;
                 ; 0000 0028 }
                 ;
                 ;void therm_WriteByte(byte data) {
                 ; 0000 002A void therm_WriteByte(byte data) {
                 ; 0000 002B     byte i = 8;
                 ; 0000 002C     while (i--) // for 8 bits:
                 ;	data -> Y+1
                 ;	i -> R17
                 ; 0000 002D     {
                 ; 0000 002E         therm_WriteBit(data & 1); // send least significant bit
                 ; 0000 002F         data >>= 1; // shift all bits right
                 ; 0000 0030     }
                 ; 0000 0031 }
                 ;
                 ;byte therm_ReadByte() {
                 ; 0000 0033 byte therm_ReadByte() {
                 ; 0000 0034     byte i = 8, data = 0;
                 ; 0000 0035     while (i--) // for 8 bits:
                 ;	i -> R17
                 ;	data -> R16
                 ; 0000 0036     {
                 ; 0000 0037         data >>= 1; // shift all bits right
                 ; 0000 0038         data |= (therm_ReadBit() << 7); // get next bit (LSB first)
                 ; 0000 0039     }
                 ; 0000 003A     return data;
                 ; 0000 003B }
                 ;
                 ;//void therm_MatchRom(byte rom[]) {
                 ;//    byte i;
                 ;//    therm_WriteByte(THERM_MATCHROM);
                 ;//    for (i = 0; i < 8; i++)
                 ;//        therm_WriteByte(rom[i]);
                 ;//}
                 ;
                 ;void therm_ReadTempRaw(byte id[], byte *t0, byte *t1)
                 ; 0000 0045 // Returns the two temperature bytes from the scratchpad
                 ; 0000 0046 {
                 ; 0000 0047 //    therm_Reset(); // skip ROM & start temp conversion
                 ; 0000 0048 
                 ; 0000 0049     //    if (id) therm_MatchRom(id);
                 ; 0000 004A     //    else therm_WriteByte(THERM_SKIPROM);
                 ; 0000 004B     //    therm_WriteByte(THERM_CONVERTTEMP);
                 ; 0000 004C     //    while (!therm_ReadBit()); // wait until conversion completed
                 ; 0000 004D     //    therm_Reset(); // read first two bytes from scratchpad
                 ; 0000 004E     //    if (id) therm_MatchRom(id);
                 ; 0000 004F     //    else therm_WriteByte(THERM_SKIPROM);
                 ; 0000 0050 
                 ; 0000 0051     therm_Reset(); // skip ROM & start temp conversion
                 ;	id -> Y+4
                 ;	*t0 -> Y+2
                 ;	*t1 -> Y+0
                 ; 0000 0052     therm_WriteByte(THERM_SKIPROM);
                 ; 0000 0053     therm_WriteByte(THERM_CONVERTTEMP);
                 ; 0000 0054     while (!therm_ReadBit()); // wait until conversion completed
                 ; 0000 0055 
                 ; 0000 0056     therm_Reset(); // read first two bytes from scratchpad
                 ; 0000 0057     therm_WriteByte(THERM_SKIPROM);
                 ; 0000 0058 
                 ; 0000 0059     therm_WriteByte(THERM_READSCRATCH);
                 ; 0000 005A     *t0 = therm_ReadByte(); // first byte
                 ; 0000 005B     *t1 = therm_ReadByte(); // second byte
                 ; 0000 005C }
                 ;
                 ;void therm_ReadTempC(byte id[], int *whole, int *decimal)
                 ; 0000 005F // returns temperature in Celsius as WW.DDDD, where W=whole & D=decimal
                 ; 0000 0060 {
                 ; 0000 0061     byte t0, t1;
                 ; 0000 0062     therm_ReadTempRaw(id, &t0, &t1); // get temperature values
                 ;	id -> Y+6
                 ;	*whole -> Y+4
                 ;	*decimal -> Y+2
                 ;	t0 -> R17
                 ;	t1 -> R16
                 ; 0000 0063     *whole = (t1 & 0x07) << 4; // grab lower 3 bits of t1
                 ; 0000 0064     *whole |= t0 >> 4; // and upper 4 bits of t0
                 ; 0000 0065     *decimal = t0 & 0x0F; // decimals in lower 4 bits of t0
                 ; 0000 0066     *decimal *= 625; // conversion factor for 12-bit resolution
                 ; 0000 0067 }
                 ;
                 ;void therm_ReadTempF(byte id[], int *whole, int *decimal)
                 ; 0000 006A // returns temperature in Fahrenheit as WW.D, where W=whole & D=decimal
                 ; 0000 006B {
                 ; 0000 006C     byte t0, t1;
                 ; 0000 006D     int t16, t2, f10;
                 ; 0000 006E     therm_ReadTempRaw(id, &t0, &t1); // get temperature values
                 ;	id -> Y+12
                 ;	*whole -> Y+10
                 ;	*decimal -> Y+8
                 ;	t0 -> R17
                 ;	t1 -> R16
                 ;	t16 -> R18,R19
                 ;	t2 -> R20,R21
                 ;	f10 -> Y+6
                 ; 0000 006F     t16 = (t1 << 8) + t0; // result is temp*16, in celcius
                 ; 0000 0070     t2 = t16 / 8; // get t*2, with fractional part lost
                 ; 0000 0071     f10 = t16 + t2 + 320; // F=1.8C+32, so 10F = 18C+320 = 16C + 2C + 320
                 ; 0000 0072     *whole = f10 / 10; // get whole part
                 ; 0000 0073     *decimal = f10 % 10; // get fractional part
                 ; 0000 0074 }
                 ;
                 ;//inline __attribute__((gnu_inline)) void quickDelay(int delay)
                 ;//// this routine will pause 0.25uS per delay unit
                 ;//// for testing only; use _us_Delay() routine for >1uS delays
                 ;//{
                 ;//    while (delay--) // uses sbiw to subtract 1 from 16bit word
                 ;//        asm volatile("nop"); // nop, sbiw, brne = 4 cycles = 0.25 uS
                 ;//}
                 ;
                 ;// ---------------------------------------------------------------------------
                 ;// ROM READER PROGRAM
                 ;
                 ;byte RomReaderProgram()
                 ; 0000 0082 // Read the ID of the attached Dallas 18B20 device
                 ; 0000 0083 // Note: only ONE device should be on the bus.
                 ; 0000 0084 {
                 ; 0000 0085     byte i;
                 ; 0000 0086     byte data;
                 ; 0000 0087     //    LCD_String("ID (ROM) Reader:");
                 ; 0000 0088 //    while (1) {
                 ; 0000 0089         //        LCD_Line(1);
                 ; 0000 008A         // write 64-bit ROM code on first LCD line
                 ; 0000 008B         therm_Reset();
                 ;	i -> R17
                 ;	data -> R16
                 ; 0000 008C         therm_WriteByte(THERM_READROM);
                 ; 0000 008D //        for (i = 0; i < 8; i++) {
                 ; 0000 008E             data = therm_ReadByte();
                 ; 0000 008F             //            LCD_HexByte(data);
                 ; 0000 0090 //        }
                 ; 0000 0091         //        msDelay(1000); // do a read every second
                 ; 0000 0092 //    }
                 ; 0000 0093         return data;
                 ; 0000 0094 }
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#include <myds18b20ver2.h>
                 ;
                 ;/*
                 ; * ds18b20 init
                 ; */
                 ;uint8_t ds18b20_reset(void) {
                 ; 0001 000A uint8_t ds18b20_reset(void) {
                 
                 	.CSEG
                 _ds18b20_reset:
                 ; .FSTART _ds18b20_reset
                 ; 0001 000B 	uint8_t i;
                 ; 0001 000C 
                 ; 0001 000D 	//low for 480us
                 ; 0001 000E 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
00009a 931a      	ST   -Y,R17
                 ;	i -> R17
00009b 98c0      	CBI  0x18,0
                 ; 0001 000F 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
00009c 9ab8      	SBI  0x17,0
                 ; 0001 0010 	delay_us(480);
                +
00009d ee80     +LDI R24 , LOW ( 480 )
00009e e091     +LDI R25 , HIGH ( 480 )
                +__DELAY_USW_LOOP :
00009f 9701     +SBIW R24 , 1
0000a0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 480
                 ; 0001 0011 
                 ; 0001 0012 	//release line and wait for 60uS
                 ; 0001 0013 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
0000a1 98b8      	CBI  0x17,0
                 ; 0001 0014 	delay_us(60);
                +
0000a2 e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
0000a3 958a     +DEC R24
0000a4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0001 0015 
                 ; 0001 0016 	//get value and wait 420us
                 ; 0001 0017 	i = (DS18B20_PIN & (1<<DS18B20_DQ));
0000a5 b3e6      	IN   R30,0x16
0000a6 70e1      	ANDI R30,LOW(0x1)
0000a7 2f1e      	MOV  R17,R30
                 ; 0001 0018 	delay_us(420);
                +
0000a8 ea84     +LDI R24 , LOW ( 420 )
0000a9 e091     +LDI R25 , HIGH ( 420 )
                +__DELAY_USW_LOOP :
0000aa 9701     +SBIW R24 , 1
0000ab f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 420
                 ; 0001 0019 
                 ; 0001 001A 	//return the read value, 0=ok, 1=error
                 ; 0001 001B 	return i;
0000ac c018      	RJMP _0x20A0004
                 ; 0001 001C }
                 ; .FEND
                 ;
                 ;/*
                 ; * write one bit
                 ; */
                 ;void ds18b20_writebit(uint8_t _bit){
                 ; 0001 0021 void ds18b20_writebit(uint8_t _bit){
                 _ds18b20_writebit:
                 ; .FSTART _ds18b20_writebit
                 ; 0001 0022 	//low for 1uS
                 ; 0001 0023 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
0000ad 93aa      	ST   -Y,R26
                 ;	_bit -> Y+0
0000ae d434      	RCALL SUBOPT_0x0
                 ; 0001 0024 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
                 ; 0001 0025 	delay_us(1);
                 ; 0001 0026 
                 ; 0001 0027 	//if we want to write 1, release the line (if not will keep low)
                 ; 0001 0028 	if(_bit)
0000af 81e8      	LD   R30,Y
0000b0 30e0      	CPI  R30,0
0000b1 f009      	BREQ _0x20003
                 ; 0001 0029 		DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
0000b2 98b8      	CBI  0x17,0
                 ; 0001 002A 
                 ; 0001 002B 	//wait 60uS and release the line
                 ; 0001 002C 	delay_us(60);
                 _0x20003:
                +
0000b3 e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
0000b4 958a     +DEC R24
0000b5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0001 002D 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
0000b6 98b8      	CBI  0x17,0
                 ; 0001 002E }
0000b7 940c 037d 	JMP  _0x20A0002
                 ; .FEND
                 ;
                 ;/*
                 ; * read one bit
                 ; */
                 ;uint8_t ds18b20_readbit(void){
                 ; 0001 0033 uint8_t ds18b20_readbit(void){
                 _ds18b20_readbit:
                 ; .FSTART _ds18b20_readbit
                 ; 0001 0034 	uint8_t _bit=0;
                 ; 0001 0035 
                 ; 0001 0036 	//low for 1uS
                 ; 0001 0037 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
0000b9 931a      	ST   -Y,R17
                 ;	_bit -> R17
0000ba e010      	LDI  R17,0
0000bb d427      	RCALL SUBOPT_0x0
                 ; 0001 0038 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
                 ; 0001 0039 	delay_us(1);
                 ; 0001 003A 
                 ; 0001 003B 	//release line and wait for 14uS
                 ; 0001 003C 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
0000bc 98b8      	CBI  0x17,0
                 ; 0001 003D 	delay_us(14);
                +
0000bd e183     +LDI R24 , LOW ( 19 )
                +__DELAY_USB_LOOP :
0000be 958a     +DEC R24
0000bf f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 19
                 ; 0001 003E 
                 ; 0001 003F 	//read the value
                 ; 0001 0040 	if(DS18B20_PIN & (1<<DS18B20_DQ))
0000c0 99b0      	SBIC 0x16,0
                 ; 0001 0041 		_bit=1;
0000c1 e011      	LDI  R17,LOW(1)
                 ; 0001 0042 
                 ; 0001 0043 	//wait 45uS and return read value
                 ; 0001 0044 	delay_us(45);
                +
0000c2 e38c     +LDI R24 , LOW ( 60 )
                +__DELAY_USB_LOOP :
0000c3 958a     +DEC R24
0000c4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 60
                 ; 0001 0045 	return _bit;
                 _0x20A0004:
0000c5 2fe1      	MOV  R30,R17
0000c6 9119      	LD   R17,Y+
0000c7 9508      	RET
                 ; 0001 0046 }
                 ; .FEND
                 ;
                 ;/*
                 ; * write one byte
                 ; */
                 ;void ds18b20_writebyte(uint8_t _byte){
                 ; 0001 004B void ds18b20_writebyte(uint8_t _byte){
                 _ds18b20_writebyte:
                 ; .FSTART _ds18b20_writebyte
                 ; 0001 004C 	uint8_t i=8;
                 ; 0001 004D 	while(i--){
0000c8 93aa      	ST   -Y,R26
0000c9 931a      	ST   -Y,R17
                 ;	_byte -> Y+1
                 ;	i -> R17
0000ca e018      	LDI  R17,8
                 _0x20005:
0000cb 2fe1      	MOV  R30,R17
0000cc 5011      	SUBI R17,1
0000cd 30e0      	CPI  R30,0
0000ce f041      	BREQ _0x20007
                 ; 0001 004E 		ds18b20_writebit(_byte&1);
0000cf 81e9      	LDD  R30,Y+1
0000d0 70e1      	ANDI R30,LOW(0x1)
0000d1 2fae      	MOV  R26,R30
0000d2 dfda      	RCALL _ds18b20_writebit
                 ; 0001 004F 		_byte >>= 1;
0000d3 81e9      	LDD  R30,Y+1
0000d4 95e6      	LSR  R30
0000d5 83e9      	STD  Y+1,R30
                 ; 0001 0050 	}
0000d6 cff4      	RJMP _0x20005
                 _0x20007:
                 ; 0001 0051 }
0000d7 8118      	LDD  R17,Y+0
0000d8 9622      	ADIW R28,2
0000d9 9508      	RET
                 ; .FEND
                 ;
                 ;/*
                 ; * read one byte
                 ; */
                 ;uint8_t ds18b20_readbyte(void){
                 ; 0001 0056 uint8_t ds18b20_readbyte(void){
                 _ds18b20_readbyte:
                 ; .FSTART _ds18b20_readbyte
                 ; 0001 0057 	uint8_t i=8, n=0;
                 ; 0001 0058 	while(i--){
0000da 931a      	ST   -Y,R17
0000db 930a      	ST   -Y,R16
                 ;	i -> R17
                 ;	n -> R16
0000dc e018      	LDI  R17,8
0000dd e000      	LDI  R16,0
                 _0x20008:
0000de 2fe1      	MOV  R30,R17
0000df 5011      	SUBI R17,1
0000e0 30e0      	CPI  R30,0
0000e1 f039      	BREQ _0x2000A
                 ; 0001 0059 		n >>= 1;
0000e2 9506      	LSR  R16
                 ; 0001 005A 		n |= (ds18b20_readbit()<<7);
0000e3 dfd5      	RCALL _ds18b20_readbit
0000e4 95e7      	ROR  R30
0000e5 e0e0      	LDI  R30,0
0000e6 95e7      	ROR  R30
0000e7 2b0e      	OR   R16,R30
                 ; 0001 005B 	}
0000e8 cff5      	RJMP _0x20008
                 _0x2000A:
                 ; 0001 005C 	return n;
0000e9 2fe0      	MOV  R30,R16
0000ea 9109      	LD   R16,Y+
0000eb 9119      	LD   R17,Y+
0000ec 9508      	RET
                 ; 0001 005D }
                 ; .FEND
                 ;
                 ;/*
                 ; * get temperature in celsius
                 ; */
                 ;double ds18b20_gettemp(void) {
                 ; 0001 0062 double ds18b20_gettemp(void) {
                 _ds18b20_gettemp:
                 ; .FSTART _ds18b20_gettemp
                 ; 0001 0063 	uint8_t temperature[2];
                 ; 0001 0064 	int8_t digit;
                 ; 0001 0065 	uint16_t decimal;
                 ; 0001 0066 	double retd = 0;
                 ; 0001 0067 
                 ; 0001 0068 	ds18b20_reset(); //reset
0000ed 9726      	SBIW R28,6
0000ee d3fa      	RCALL SUBOPT_0x1
0000ef d48b      	RCALL __SAVELOCR4
                 ;	temperature -> Y+8
                 ;	digit -> R17
                 ;	decimal -> R18,R19
                 ;	retd -> Y+4
0000f0 dfa9      	RCALL _ds18b20_reset
                 ; 0001 0069 	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
0000f1 ecac      	LDI  R26,LOW(204)
0000f2 dfd5      	RCALL _ds18b20_writebyte
                 ; 0001 006A 	ds18b20_writebyte(DS18B20_CMD_CONVERTTEMP); //start temperature conversion
0000f3 e4a4      	LDI  R26,LOW(68)
0000f4 dfd3      	RCALL _ds18b20_writebyte
                 ; 0001 006B 
                 ; 0001 006C 	while(!ds18b20_readbit()); //wait until conversion is complete
                 _0x2000B:
0000f5 dfc3      	RCALL _ds18b20_readbit
0000f6 30e0      	CPI  R30,0
0000f7 f3e9      	BREQ _0x2000B
                 ; 0001 006D 
                 ; 0001 006E 	ds18b20_reset(); //reset
0000f8 dfa1      	RCALL _ds18b20_reset
                 ; 0001 006F 	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
0000f9 ecac      	LDI  R26,LOW(204)
0000fa dfcd      	RCALL _ds18b20_writebyte
                 ; 0001 0070 	ds18b20_writebyte(DS18B20_CMD_RSCRATCHPAD); //read scratchpad
0000fb ebae      	LDI  R26,LOW(190)
0000fc dfcb      	RCALL _ds18b20_writebyte
                 ; 0001 0071 
                 ; 0001 0072 	//read 2 byte from scratchpad
                 ; 0001 0073 	temperature[0] = ds18b20_readbyte();
0000fd dfdc      	RCALL _ds18b20_readbyte
0000fe 87e8      	STD  Y+8,R30
                 ; 0001 0074 	temperature[1] = ds18b20_readbyte();
0000ff dfda      	RCALL _ds18b20_readbyte
000100 87e9      	STD  Y+9,R30
                 ; 0001 0075 
                 ; 0001 0076 	ds18b20_reset(); //reset
000101 df98      	RCALL _ds18b20_reset
                 ; 0001 0077 
                 ; 0001 0078 	//store temperature integer digits
                 ; 0001 0079 	digit = temperature[0]>>4;
000102 85e8      	LDD  R30,Y+8
000103 95e2      	SWAP R30
000104 70ef      	ANDI R30,0xF
000105 2f1e      	MOV  R17,R30
                 ; 0001 007A 	digit |= (temperature[1]&0x7)<<4;
000106 85e9      	LDD  R30,Y+9
000107 70e7      	ANDI R30,LOW(0x7)
000108 95e2      	SWAP R30
000109 7fe0      	ANDI R30,0xF0
00010a 2b1e      	OR   R17,R30
                 ; 0001 007B 
                 ; 0001 007C 	//store temperature decimal digits
                 ; 0001 007D 	decimal = temperature[0]&0xf;
00010b 85e8      	LDD  R30,Y+8
00010c e0f0      	LDI  R31,0
00010d 70ef      	ANDI R30,LOW(0xF)
00010e 70f0      	ANDI R31,HIGH(0xF)
00010f 019f      	MOVW R18,R30
                 ; 0001 007E 	decimal *= DS18B20_DECIMALSTEPS;
000110 e7a1      	LDI  R26,LOW(625)
000111 e0b2      	LDI  R27,HIGH(625)
000112 d49f      	RCALL __MULW12U
000113 019f      	MOVW R18,R30
                 ; 0001 007F 
                 ; 0001 0080 	//compose the double temperature value and return it
                 ; 0001 0081 	retd = digit + decimal * 0.0001;
000114 2fe1      	MOV  R30,R17
000115 e0f0      	LDI  R31,0
000116 fde7      	SBRC R30,7
000117 efff      	SER  R31
000118 93ff      	PUSH R31
000119 93ef      	PUSH R30
00011a 01f9      	MOVW R30,R18
00011b 2766      	CLR  R22
00011c 2777      	CLR  R23
00011d d564      	RCALL __CDF1
                +
00011e e1a7     +LDI R26 , LOW ( 0x38D1B717 )
00011f ebb7     +LDI R27 , HIGH ( 0x38D1B717 )
000120 ed81     +LDI R24 , BYTE3 ( 0x38D1B717 )
000121 e398     +LDI R25 , BYTE4 ( 0x38D1B717 )
                 	__GETD2N 0x38D1B717
000122 d5e8      	RCALL __MULF12
000123 91af      	POP  R26
000124 91bf      	POP  R27
000125 d47d      	RCALL __CWD2
000126 d4db      	RCALL __CDF2
000127 d594      	RCALL __ADDF12
                +
000128 83ec     +STD Y + 4 , R30
000129 83fd     +STD Y + 4 + 1 , R31
00012a 836e     +STD Y + 4 + 2 , R22
00012b 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0001 0082 
                 ; 0001 0083 	return retd;
00012c d455      	RCALL __LOADLOCR4
00012d 962a      	ADIW R28,10
00012e 9508      	RET
                 ; 0001 0084 }
                 ; .FEND
                 ;#include <myds1307rtc.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;//Khoi dong TWI
                 ;unsigned char registry_ds1307[7]; // mang de luu tam cac gia tri doc duoc tu thanh ghi cua ds1307
                 ;
                 ;void TWI_Init(void) {
                 ; 0002 0006 void TWI_Init(void) {
                 
                 	.CSEG
                 ; 0002 0007     TWSR = 0x00; //Prescaler=1
                 ; 0002 0008     TWBR = _100K;
                 ; 0002 0009     TWCR = (1 << TWINT) | (1 << TWEN);
                 ; 0002 000A }
                 ;
                 ;///chon dia chi thanh ghi can thao tac, dummy write
                 ;//Addr: dia thi thanh ghi can ghi
                 ;
                 ;unsigned char TWI_DS1307_wadr(unsigned char Addr) {
                 ; 0002 000F unsigned char TWI_DS1307_wadr(unsigned char Addr) {
                 ; 0002 0010 
                 ; 0002 0011     TWCR = TWI_START; //goi START condition
                 ;	Addr -> Y+0
                 ; 0002 0012     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 0013     if ((TWSR & 0xF8) != 0x08) return TWSR; //neu goi Start co loi thi thoat
                 ; 0002 0014 
                 ; 0002 0015     TWDR = (DS1307_SLA << 1) + TWI_W; //dia chi DS va bit W
                 ; 0002 0016     TWCR = TWI_Clear_TWINT; //xoa TWINT, bat dau goi SLA
                 ; 0002 0017     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 0018     if ((TWSR & 0xF8) != 0x18) return TWSR; //device address send error, escape anyway
                 ; 0002 0019 
                 ; 0002 001A     TWDR = Addr; //goi dia chi thanh ghi can ghi vao
                 ; 0002 001B     TWCR = TWI_Clear_TWINT; //start send address by cleaning TWINT
                 ; 0002 001C     while ((TWCR & 0x80) == 0x00); //check and wait for TWINT bit=1
                 ; 0002 001D     if ((TWSR & 0xF8) != 0x28) return TWSR; //neu du lieu goi ko thanh cong thi thoat
                 ; 0002 001E 
                 ; 0002 001F     TWCR = TWI_STOP; //STOP condition
                 ; 0002 0020     return 0;
                 ; 0002 0021 }
                 ;
                 ;//ghi 1 mang dat vao DS
                 ;//Addr: dia thi thanh ghi can ghi
                 ;//Data[]: mang du lieu
                 ;//len: so luong byte can ghi
                 ;
                 ;unsigned char TWI_DS1307_wblock(unsigned char Addr, unsigned char Data[], unsigned char len) {
                 ; 0002 0028 unsigned char TWI_DS1307_wblock(unsigned char Addr, unsigned char Data[], unsigned char len) {
                 ; 0002 0029     unsigned char i = 0;
                 ; 0002 002A     TWCR = TWI_START; //goi START condition
                 ;	Addr -> Y+4
                 ;	Data -> Y+2
                 ;	len -> Y+1
                 ;	i -> R17
                 ; 0002 002B     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 002C     if ((TWSR & 0xF8) != 0x08) return TWSR; //neu goi Start co loi thi thoat
                 ; 0002 002D 
                 ; 0002 002E     TWDR = (DS1307_SLA << 1) + TWI_W; //dia chi DS va bit W
                 ; 0002 002F     TWCR = TWI_Clear_TWINT; //xoa TWINT de bat dau goi
                 ; 0002 0030     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 0031     if ((TWSR & 0xF8) != 0x18) return TWSR; //neu co loi truyen SLA, thoat
                 ; 0002 0032 
                 ; 0002 0033     TWDR = Addr; //goi dia chi thanh ghi can ghi vao
                 ; 0002 0034     TWCR = TWI_Clear_TWINT; //xoa TWINT de bat dau goi
                 ; 0002 0035     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 0036     if ((TWSR & 0xF8) != 0x28) return TWSR;
                 ; 0002 0037 
                 ; 0002 0038     for (i = 0; i < len; i++) {
                 ; 0002 0039         TWDR = Data[i]; //chuan bi xuat du lieu
                 ; 0002 003A         TWCR = TWI_Clear_TWINT; //xoa TWINT, bat dau send
                 ; 0002 003B         while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 003C         if ((TWSR & 0xF8) != 0x28) return TWSR; //neu status ko phai la 0x28 thi return
                 ; 0002 003D     }
                 ; 0002 003E 
                 ; 0002 003F     TWCR = TWI_STOP; //STOP condition
                 ; 0002 0040     return 0;
                 ; 0002 0041 }
                 ;
                 ;//doc 1 mang tu DS
                 ;
                 ;unsigned char TWI_DS1307_rblock(unsigned char Data[], unsigned char len) {
                 ; 0002 0045 unsigned char TWI_DS1307_rblock(unsigned char Data[], unsigned char len) {
                 ; 0002 0046     unsigned char i;
                 ; 0002 0047 
                 ; 0002 0048     TWCR = TWI_START; // Start--------------------------------------------------------------------
                 ;	Data -> Y+2
                 ;	len -> Y+1
                 ;	i -> R17
                 ; 0002 0049     while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x08)); //cho TWINT bit=1 va goi START thanh cong
                 ; 0002 004A 
                 ; 0002 004B     TWDR = (DS1307_SLA << 1) + TWI_R; //goi dia chi SLA +READ
                 ; 0002 004C     TWCR = TWI_Clear_TWINT; //bat dau, xoa TWINT
                 ; 0002 004D     while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x40)); //cho TWINT bit=1	va goi SLA thanh cong
                 ; 0002 004E 
                 ; 0002 004F     //nhan len-1 bytes dau tien---------------------
                 ; 0002 0050     for (i = 0; i < len - 1; i++) {
                 ; 0002 0051         TWCR = TWI_Read_ACK; //xoa TWINT,se goi ACK sau khi nhan moi byte
                 ; 0002 0052         while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x50)); //cho TWINT bit=1 hoac nhan duoc ACK
                 ; 0002 0053         Data[i] = TWDR; //doc du lieu vao mang Data
                 ; 0002 0054     }
                 ; 0002 0055     //nhan byte cuoi
                 ; 0002 0056     TWCR = TWI_Clear_TWINT; //xoa TWINT de nhan byte cuoi, sau do set NOT ACK
                 ; 0002 0057     while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x58)); //cho TWIN=1 hoac trang thai not ack
                 ; 0002 0058     Data[len - 1] = TWDR;
                 ; 0002 0059 
                 ; 0002 005A     TWCR = TWI_STOP; //STOP condition
                 ; 0002 005B     return 0;
                 ; 0002 005C }
                 ;
                 ;//----------------------------------------------------------------------------
                 ;// xay dung lai cac ham ma khong dung thu vien
                 ;
                 ;// doi BCD sang thap phan va nguoc lai------------
                 ;
                 ;unsigned char BCD2Dec(unsigned char BCD) {
                 ; 0002 0063 unsigned char BCD2Dec(unsigned char BCD) {
                 ; 0002 0064     unsigned char L, H;
                 ; 0002 0065     L = BCD & 0x0F;
                 ;	BCD -> Y+2
                 ;	L -> R17
                 ;	H -> R16
                 ; 0002 0066     H = (BCD >> 4)*10;
                 ; 0002 0067     return (H + L);
                 ; 0002 0068 }
                 ;
                 ;unsigned char Dec2BCD(unsigned char Dec) {
                 ; 0002 006A unsigned char Dec2BCD(unsigned char Dec) {
                 ; 0002 006B     unsigned char L, H;
                 ; 0002 006C     L = Dec % 10;
                 ;	Dec -> Y+2
                 ;	L -> R17
                 ;	H -> R16
                 ; 0002 006D     H = (Dec / 10) << 4;
                 ; 0002 006E     return (H + L);
                 ; 0002 006F }
                 ;
                 ;Time myGetTimeFromDS1307() {
                 ; 0002 0071 Time myGetTimeFromDS1307() {
                 ; 0002 0072     Time time;
                 ; 0002 0073     time.Hour = 10;
                 ;	time -> Y+0
                 ; 0002 0074     time.Minute = 15;
                 ; 0002 0075     //    return time;
                 ; 0002 0076     TWI_DS1307_wadr(0x00); //set dia chi ve 0
                 ; 0002 0077     delay_ms(1); //cho DS1307 xu li
                 ; 0002 0078     TWI_DS1307_rblock(registry_ds1307, 7); //doc ca khoi thoi gian (7 bytes)
                 ; 0002 0079 
                 ; 0002 007A     time.Second = BCD2Dec(registry_ds1307[0] & 0x7F);
                 ; 0002 007B     time.Minute = BCD2Dec(registry_ds1307[1]);
                 ; 0002 007C     // mode lay tu bit 6 ( =0 la 24h; =1 la 12h)
                 ; 0002 007D     // mode = 0 la 24h, =1 la 12h
                 ; 0002 007E     time.Mode = ((registry_ds1307[2] & 0x40) != 0);
                 ; 0002 007F     // AM hay PM lay tu bit 5
                 ; 0002 0080     time.AP = ((registry_ds1307[2] & 0x20) != 0);
                 ; 0002 0081     if (time.Mode != 0) time.Hour = BCD2Dec(registry_ds1307[2] & 0x1F); //mode 12h
                 ; 0002 0082     else time.Hour = BCD2Dec(registry_ds1307[2] & 0x3F); //mode 24h
                 ; 0002 0083     time.Date = BCD2Dec(registry_ds1307[4]);
                 ; 0002 0084     time.Month = BCD2Dec(registry_ds1307[5]);
                 ; 0002 0085     time.Year = BCD2Dec(registry_ds1307[6]);
                 ; 0002 0086     return time;
                 ; 0002 0087 }
                 ;
                 ;void mySetTimeForDS1307(Time * t) {
                 ; 0002 0089 void mySetTimeForDS1307(Time * t) {
                 ; 0002 008A     registry_ds1307[0] = Dec2BCD(t->Second);
                 ;	*t -> Y+0
                 ; 0002 008B 
                 ; 0002 008C     registry_ds1307[1] = Dec2BCD(t->Minute);
                 ; 0002 008D     if (t->Mode != 0) // che do hien thi 12h
                 ; 0002 008E         // bit 7 = 0; bit 6 =1;(che do 12h), 0: che do 24h
                 ; 0002 008F         //; bit 5 =0 -> AM, 1->PM
                 ; 0002 0090         //5bit con lai la ma BCD cua gio
                 ; 0002 0091         registry_ds1307[2] = Dec2BCD(t->Hour) | (t->Mode << 6) | (t->AP << 5); //mode 12h
                 ; 0002 0092 
                 ; 0002 0093     else
                 ; 0002 0094         // bit 7 = 0; bit 6 =0;(che do 24h) ;
                 ; 0002 0095         registry_ds1307[2] = Dec2BCD(t->Hour); //mode 24h
                 ; 0002 0096 
                 ; 0002 0097     registry_ds1307[4] = Dec2BCD(t->Date);
                 ; 0002 0098     registry_ds1307[5] = Dec2BCD(t->Month);
                 ; 0002 0099     registry_ds1307[6] = Dec2BCD(t->Year);
                 ; 0002 009A 
                 ; 0002 009B 
                 ; 0002 009C     TWI_DS1307_wblock(0x00, registry_ds1307, 7); //doc ca khoi thoi gian (7 bytes)
                 ; 0002 009D     delay_ms(1); //cho DS1307 xu li
                 ; 0002 009E }
                 ;// ---------------------------------------------------------------------------
                 ;// I2C (TWI) ROUTINES
                 ;//
                 ;// On the AVRmega series, PA4 is the data line (SDA) and PA5 is the clock (SCL
                 ;// The standard clock rate is 100 KHz, and set by I2C_Init. It depends on the AVR osc. freq.
                 ;#include <myds1307rtcver2.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;
                 ;
                 ;//void DS1307_GetTime(byte *hours, byte *minutes, byte *seconds)
                 ;//// returns hours, minutes, and seconds in BCD format
                 ;//{
                 ;//    *hours = I2C_ReadRegister(DS1307, HOURS_REGISTER);
                 ;//    *minutes = I2C_ReadRegister(DS1307, MINUTES_REGISTER);
                 ;//    *seconds = I2C_ReadRegister(DS1307, SECONDS_REGISTER);
                 ;//    if (*hours & 0x40) // 12hr mode:
                 ;//        *hours &= 0x1F; // use bottom 5 bits (pm bit = temp & 0x20)
                 ;//    else *hours &= 0x3F; // 24hr mode: use bottom 6 bits
                 ;//}
                 ;//
                 ;//void DS1307_GetDate(byte *months, byte *days, byte *years)
                 ;//// returns months, days, and years in BCD format
                 ;//{
                 ;//    *months = I2C_ReadRegister(DS1307, MONTHS_REGISTER);
                 ;//    *days = I2C_ReadRegister(DS1307, DAYS_REGISTER);
                 ;//    *years = I2C_ReadRegister(DS1307, YEARS_REGISTER);
                 ;//}
                 ;//
                 ;//void SetTimeDate()
                 ;//// simple, hard-coded way to set the date.
                 ;//{
                 ;//    I2C_WriteRegister(DS1307, MONTHS_REGISTER, 0x08);
                 ;//    I2C_WriteRegister(DS1307, DAYS_REGISTER, 0x31);
                 ;//    I2C_WriteRegister(DS1307, YEARS_REGISTER, 0x13);
                 ;//    I2C_WriteRegister(DS1307, HOURS_REGISTER, 0x08 + 0x40); // add 0x40 for PM
                 ;//    I2C_WriteRegister(DS1307, MINUTES_REGISTER, 0x51);
                 ;//    I2C_WriteRegister(DS1307, SECONDS_REGISTER, 0x00);
                 ;//}
                 ;
                 ;
                 ;unsigned char BCD2Decver2(unsigned char BCD) {
                 ; 0003 002A unsigned char BCD2Decver2(unsigned char BCD) {
                 
                 	.CSEG
                 _BCD2Decver2:
                 ; .FSTART _BCD2Decver2
                 ; 0003 002B     unsigned char L, H;
                 ; 0003 002C     L = BCD & 0x0F;
00012f 93aa      	ST   -Y,R26
000130 931a      	ST   -Y,R17
000131 930a      	ST   -Y,R16
                 ;	BCD -> Y+2
                 ;	L -> R17
                 ;	H -> R16
000132 81ea      	LDD  R30,Y+2
000133 70ef      	ANDI R30,LOW(0xF)
000134 2f1e      	MOV  R17,R30
                 ; 0003 002D     H = (BCD >> 4)*10;
000135 81ea      	LDD  R30,Y+2
000136 95e2      	SWAP R30
000137 70ef      	ANDI R30,0xF
000138 e0aa      	LDI  R26,LOW(10)
000139 02ea      	MULS R30,R26
00013a 2d00      	MOV  R16,R0
                 ; 0003 002E     return (H + L);
00013b 2fe1      	MOV  R30,R17
00013c 0fe0      	ADD  R30,R16
00013d 8119      	LDD  R17,Y+1
00013e 8108      	LDD  R16,Y+0
00013f 940c 038a 	JMP  _0x20A0001
                 ; 0003 002F }
                 ; .FEND
                 ;
                 ;unsigned char Dec2BCDver2(unsigned char Dec) {
                 ; 0003 0031 unsigned char Dec2BCDver2(unsigned char Dec) {
                 ; 0003 0032     unsigned char L, H;
                 ; 0003 0033     L = Dec % 10;
                 ;	Dec -> Y+2
                 ;	L -> R17
                 ;	H -> R16
                 ; 0003 0034     H = (Dec / 10) << 4;
                 ; 0003 0035     return (H + L);
                 ; 0003 0036 }
                 ;
                 ;Time myGetTimeFromDS1307ver2() {
                 ; 0003 0038 Time myGetTimeFromDS1307ver2() {
                 _myGetTimeFromDS1307ver2:
                 ; .FSTART _myGetTimeFromDS1307ver2
                 ; 0003 0039     Time time;
                 ; 0003 003A     time.Hour = 10;
000141 9762      	SBIW R28,18
                 ;	time -> Y+0
000142 e0ea      	LDI  R30,LOW(10)
000143 83ea      	STD  Y+2,R30
                 ; 0003 003B     time.Minute = 15;
000144 e0ef      	LDI  R30,LOW(15)
000145 83e9      	STD  Y+1,R30
                 ; 0003 003C     //    return time;
                 ; 0003 003D 
                 ; 0003 003E     time.Second = BCD2Decver2(I2C_ReadRegister(DS1307, SECONDS_REGISTER) & 0x7F);
000146 ede0      	LDI  R30,LOW(208)
000147 93ea      	ST   -Y,R30
000148 e0a0      	LDI  R26,LOW(0)
000149 d074      	RCALL _I2C_ReadRegister
00014a 77ef      	ANDI R30,0x7F
00014b 2fae      	MOV  R26,R30
00014c dfe2      	RCALL _BCD2Decver2
00014d 83e8      	ST   Y,R30
                 ; 0003 003F     time.Minute = BCD2Decver2(I2C_ReadRegister(DS1307, MINUTES_REGISTER));
00014e ede0      	LDI  R30,LOW(208)
00014f 93ea      	ST   -Y,R30
000150 e0a1      	LDI  R26,LOW(1)
000151 d06c      	RCALL _I2C_ReadRegister
000152 2fae      	MOV  R26,R30
000153 dfdb      	RCALL _BCD2Decver2
000154 83e9      	STD  Y+1,R30
                 ; 0003 0040     // mode lay tu bit 6 ( =0 la 24h; =1 la 12h)
                 ; 0003 0041     // mode = 0 la 24h, =1 la 12h
                 ; 0003 0042     time.Mode = ((I2C_ReadRegister(DS1307, HOURS_REGISTER) & 0x40) != 0);
000155 d399      	RCALL SUBOPT_0x2
000156 74e0      	ANDI R30,LOW(0x40)
000157 e0a0      	LDI  R26,LOW(0)
000158 d454      	RCALL __NEB12
000159 83ef      	STD  Y+7,R30
                 ; 0003 0043     // AM hay PM lay tu bit 5
                 ; 0003 0044     time.AP = ((I2C_ReadRegister(DS1307, HOURS_REGISTER) & 0x20) != 0);
00015a d394      	RCALL SUBOPT_0x2
00015b 72e0      	ANDI R30,LOW(0x20)
00015c e0a0      	LDI  R26,LOW(0)
00015d d44f      	RCALL __NEB12
00015e 87e8      	STD  Y+8,R30
                 ; 0003 0045     if (time.Mode != 0) time.Hour = BCD2Decver2(I2C_ReadRegister(DS1307, HOURS_REGISTER) & 0x1F); //mode 12h
00015f 81ef      	LDD  R30,Y+7
000160 30e0      	CPI  R30,0
000161 f019      	BREQ _0x60003
000162 d38c      	RCALL SUBOPT_0x2
000163 71ef      	ANDI R30,LOW(0x1F)
000164 c002      	RJMP _0x60007
                 ; 0003 0046     else time.Hour = BCD2Decver2(I2C_ReadRegister(DS1307, HOURS_REGISTER) & 0x3F); //mode 24h
                 _0x60003:
000165 d389      	RCALL SUBOPT_0x2
000166 73ef      	ANDI R30,LOW(0x3F)
                 _0x60007:
000167 2fae      	MOV  R26,R30
000168 dfc6      	RCALL _BCD2Decver2
000169 83ea      	STD  Y+2,R30
                 ; 0003 0047     time.Day = BCD2Decver2(I2C_ReadRegister(DS1307, DAYOFWK_REGISTER));
00016a ede0      	LDI  R30,LOW(208)
00016b 93ea      	ST   -Y,R30
00016c e0a3      	LDI  R26,LOW(3)
00016d d050      	RCALL _I2C_ReadRegister
00016e 2fae      	MOV  R26,R30
00016f dfbf      	RCALL _BCD2Decver2
000170 83eb      	STD  Y+3,R30
                 ; 0003 0048     time.Date = BCD2Decver2(I2C_ReadRegister(DS1307, DAYS_REGISTER));
000171 ede0      	LDI  R30,LOW(208)
000172 93ea      	ST   -Y,R30
000173 e0a4      	LDI  R26,LOW(4)
000174 d049      	RCALL _I2C_ReadRegister
000175 2fae      	MOV  R26,R30
000176 dfb8      	RCALL _BCD2Decver2
000177 83ec      	STD  Y+4,R30
                 ; 0003 0049     time.Month = BCD2Decver2(I2C_ReadRegister(DS1307, MONTHS_REGISTER));
000178 ede0      	LDI  R30,LOW(208)
000179 93ea      	ST   -Y,R30
00017a e0a5      	LDI  R26,LOW(5)
00017b d042      	RCALL _I2C_ReadRegister
00017c 2fae      	MOV  R26,R30
00017d dfb1      	RCALL _BCD2Decver2
00017e 83ed      	STD  Y+5,R30
                 ; 0003 004A     time.Year = BCD2Decver2(I2C_ReadRegister(DS1307, YEARS_REGISTER));
00017f ede0      	LDI  R30,LOW(208)
000180 93ea      	ST   -Y,R30
000181 e0a6      	LDI  R26,LOW(6)
000182 d03b      	RCALL _I2C_ReadRegister
000183 2fae      	MOV  R26,R30
000184 dfaa      	RCALL _BCD2Decver2
000185 83ee      	STD  Y+6,R30
                 ; 0003 004B     return time;
000186 01fe      	MOVW R30,R28
000187 01de      	MOVW R26,R28
000188 9619      	ADIW R26,9
000189 e089      	LDI  R24,9
00018a d487      	RCALL __COPYMML
00018b 01fe      	MOVW R30,R28
00018c 9639      	ADIW R30,9
00018d e089      	LDI  R24,9
00018e b61f      	IN   R1,SREG
00018f 94f8      	CLI
000190 9662      	ADIW R28,18
000191 9508      	RET
                 ; 0003 004C }
                 ; .FEND
                 ;
                 ;void mySetTimeForDS1307ver2(Time * t) {
                 ; 0003 004E void mySetTimeForDS1307ver2(Time * t) {
                 ; 0003 004F     I2C_WriteRegister(DS1307, SECONDS_REGISTER, Dec2BCDver2(t->Second));
                 ;	*t -> Y+0
                 ; 0003 0050 
                 ; 0003 0051     I2C_WriteRegister(DS1307, MINUTES_REGISTER,  Dec2BCDver2(t->Minute));
                 ; 0003 0052     if (t->Mode != 0) // che do hien thi 12h
                 ; 0003 0053         // bit 7 = 0; bit 6 =1;(che do 12h), 0: che do 24h
                 ; 0003 0054         //; bit 5 =0 -> AM, 1->PM
                 ; 0003 0055         //5bit con lai la ma BCD cua gio
                 ; 0003 0056         I2C_WriteRegister(DS1307, HOURS_REGISTER, Dec2BCDver2(t->Hour) | (t->Mode << 6) | (t->AP << 5)); //mode 12h
                 ; 0003 0057 
                 ; 0003 0058     else
                 ; 0003 0059         // bit 7 = 0; bit 6 =0;(che do 24h) ;
                 ; 0003 005A         I2C_WriteRegister(DS1307, HOURS_REGISTER, Dec2BCDver2(t->Hour)); //mode 24h
                 ; 0003 005B 
                 ; 0003 005C     I2C_WriteRegister(DS1307, DAYOFWK_REGISTER, Dec2BCDver2(t->Day));
                 ; 0003 005D     I2C_WriteRegister(DS1307, DAYS_REGISTER, Dec2BCDver2(t->Date));
                 ; 0003 005E     I2C_WriteRegister(DS1307, MONTHS_REGISTER, Dec2BCDver2(t->Month));
                 ; 0003 005F     I2C_WriteRegister(DS1307, YEARS_REGISTER, Dec2BCDver2(t->Year));
                 ; 0003 0060 }
                 ;#include <myi2c.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void I2C_Init()
                 ; 0004 0004 // port mac dinh SCL va SDA cua atmega
                 ; 0004 0005 // at 16 MHz, the SCL frequency will be 16/(16+2(TWBR)), assuming prescalar of 0.
                 ; 0004 0006 // so for 100KHz SCL, TWBR = ((F_CPU/F_SCL)-16)/2 = ((16/0.1)-16)/2 = 144/2 = 72.
                 ; 0004 0007 {
                 
                 	.CSEG
                 _I2C_Init:
                 ; .FSTART _I2C_Init
                 ; 0004 0008     TWSR = 0; // set prescalar to zero
000192 e0e0      	LDI  R30,LOW(0)
000193 b9e1      	OUT  0x1,R30
                 ; 0004 0009     TWBR = ((F_CPU / F_SCL) - 16) / 2; // set SCL frequency in TWI bit register
000194 e0ec      	LDI  R30,LOW(12)
000195 b9e0      	OUT  0x0,R30
                 ; 0004 000A }
000196 9508      	RET
                 ; .FEND
                 ;
                 ;byte I2C_Detect(byte addr)
                 ; 0004 000D // look for device at specified address; return 1=found, 0=not found
                 ; 0004 000E {
                 _I2C_Detect:
                 ; .FSTART _I2C_Detect
                 ; 0004 000F     TWCR = TW_START; // send start condition
000197 93aa      	ST   -Y,R26
                 ;	addr -> Y+0
000198 eae4      	LDI  R30,LOW(164)
000199 bfe6      	OUT  0x36,R30
                 ; 0004 0010     while (!TW_READY); // wait
                 _0x80003:
00019a b7e6      	IN   R30,0x36
00019b 78e0      	ANDI R30,LOW(0x80)
00019c f3e9      	BREQ _0x80003
                 ; 0004 0011     TWDR = addr; // load device's bus address
00019d d355      	RCALL SUBOPT_0x3
                 ; 0004 0012     TWCR = TW_SEND; // and send it
                 ; 0004 0013     while (!TW_READY); // wait
                 _0x80006:
00019e b7e6      	IN   R30,0x36
00019f 78e0      	ANDI R30,LOW(0x80)
0001a0 f3e9      	BREQ _0x80006
                 ; 0004 0014     return (TW_STATUS == 0x18); // return 1 if found; 0 otherwise
0001a1 b1e1      	IN   R30,0x1
0001a2 7fe8      	ANDI R30,LOW(0xF8)
0001a3 e1a8      	LDI  R26,LOW(24)
0001a4 d403      	RCALL __EQB12
0001a5 940c 037d 	JMP  _0x20A0002
                 ; 0004 0015 }
                 ; .FEND
                 ;
                 ;byte I2C_FindDevice(byte start)
                 ; 0004 0018 // returns with address of first device found; 0=not found
                 ; 0004 0019 {
                 ; 0004 001A     byte addr;
                 ; 0004 001B     for ( addr = start; addr < 0xFF; addr++) // search all 256 addresses
                 ;	start -> Y+1
                 ;	addr -> R17
                 ; 0004 001C     {
                 ; 0004 001D         if (I2C_Detect(addr)) // I2C detected?
                 ; 0004 001E             return addr; // leave as soon as one is found
                 ; 0004 001F     }
                 ; 0004 0020     return 0; // none detected, so return 0.
                 ; 0004 0021 }
                 ;
                 ;void I2C_Start(byte slaveAddr) {
                 ; 0004 0023 void I2C_Start(byte slaveAddr) {
                 _I2C_Start:
                 ; .FSTART _I2C_Start
                 ; 0004 0024     I2C_Detect(slaveAddr);
0001a7 93aa      	ST   -Y,R26
                 ;	slaveAddr -> Y+0
0001a8 81a8      	LD   R26,Y
0001a9 dfed      	RCALL _I2C_Detect
                 ; 0004 0025 }
0001aa 940c 037d 	JMP  _0x20A0002
                 ; .FEND
                 ;
                 ;byte I2C_Write(byte data) // sends a data byte to slave
                 ; 0004 0028 {
                 _I2C_Write:
                 ; .FSTART _I2C_Write
                 ; 0004 0029     TWDR = data; // load data to be sent
0001ac 93aa      	ST   -Y,R26
                 ;	data -> Y+0
0001ad d345      	RCALL SUBOPT_0x3
                 ; 0004 002A     TWCR = TW_SEND; // and send it
                 ; 0004 002B     while (!TW_READY); // wait
                 _0x8000D:
0001ae b7e6      	IN   R30,0x36
0001af 78e0      	ANDI R30,LOW(0x80)
0001b0 f3e9      	BREQ _0x8000D
                 ; 0004 002C     return (TW_STATUS != 0x28);
0001b1 b1e1      	IN   R30,0x1
0001b2 7fe8      	ANDI R30,LOW(0xF8)
0001b3 e2a8      	LDI  R26,LOW(40)
0001b4 d3f8      	RCALL __NEB12
0001b5 940c 037d 	JMP  _0x20A0002
                 ; 0004 002D }
                 ; .FEND
                 ;
                 ;byte I2C_ReadACK() // reads a data byte from slave
                 ; 0004 0030 {
                 ; 0004 0031     TWCR = TW_ACK; // ack = will read more data
                 ; 0004 0032     while (!TW_READY); // wait
                 ; 0004 0033     return TWDR;
                 ; 0004 0034     //return (TW_STATUS!=0x28);
                 ; 0004 0035 }
                 ;
                 ;byte I2C_ReadNACK() // reads a data byte from slave
                 ; 0004 0038 {
                 _I2C_ReadNACK:
                 ; .FSTART _I2C_ReadNACK
                 ; 0004 0039     TWCR = TW_NACK; // nack = not reading more data
0001b7 e8e4      	LDI  R30,LOW(132)
0001b8 bfe6      	OUT  0x36,R30
                 ; 0004 003A     while (!TW_READY); // wait
                 _0x80013:
0001b9 b7e6      	IN   R30,0x36
0001ba 78e0      	ANDI R30,LOW(0x80)
0001bb f3e9      	BREQ _0x80013
                 ; 0004 003B     return TWDR;
0001bc b1e3      	IN   R30,0x3
0001bd 9508      	RET
                 ; 0004 003C     //return (TW_STATUS!=0x28);
                 ; 0004 003D }
                 ; .FEND
                 ;
                 ;void I2C_WriteByte(byte busAddr, byte data) {
                 ; 0004 003F void I2C_WriteByte(byte busAddr, byte data) {
                 ; 0004 0040     I2C_Start(busAddr); // send bus address
                 ;	busAddr -> Y+1
                 ;	data -> Y+0
                 ; 0004 0041     I2C_Write(data); // then send the data byte
                 ; 0004 0042     I2C_Stop();
                 ; 0004 0043 }
                 ;
                 ;void I2C_WriteRegister(byte busAddr, byte deviceRegister, byte data) {
                 ; 0004 0045 void I2C_WriteRegister(byte busAddr, byte deviceRegister, byte data) {
                 ; 0004 0046     I2C_Start(busAddr); // send bus address
                 ;	busAddr -> Y+2
                 ;	deviceRegister -> Y+1
                 ;	data -> Y+0
                 ; 0004 0047     I2C_Write(deviceRegister); // first byte = device register address
                 ; 0004 0048     I2C_Write(data); // second byte = data for device register
                 ; 0004 0049     I2C_Stop();
                 ; 0004 004A }
                 ;
                 ;byte I2C_ReadRegister(byte busAddr, byte deviceRegister) {
                 ; 0004 004C byte I2C_ReadRegister(byte busAddr, byte deviceRegister) {
                 _I2C_ReadRegister:
                 ; .FSTART _I2C_ReadRegister
                 ; 0004 004D     byte data = 0;
                 ; 0004 004E     I2C_Start(busAddr); // send device address
0001be 93aa      	ST   -Y,R26
0001bf 931a      	ST   -Y,R17
                 ;	busAddr -> Y+2
                 ;	deviceRegister -> Y+1
                 ;	data -> R17
0001c0 e010      	LDI  R17,0
0001c1 81aa      	LDD  R26,Y+2
0001c2 dfe4      	RCALL _I2C_Start
                 ; 0004 004F     I2C_Write(deviceRegister); // set register pointer
0001c3 81a9      	LDD  R26,Y+1
0001c4 dfe7      	RCALL _I2C_Write
                 ; 0004 0050     I2C_Start(busAddr + READ); // restart as a read operation
0001c5 81aa      	LDD  R26,Y+2
0001c6 5faf      	SUBI R26,-LOW(1)
0001c7 dfdf      	RCALL _I2C_Start
                 ; 0004 0051     data = I2C_ReadNACK(); // read the register data
0001c8 dfee      	RCALL _I2C_ReadNACK
0001c9 2f1e      	MOV  R17,R30
                 ; 0004 0052     I2C_Stop(); // stop
0001ca e9e4      	LDI  R30,LOW(148)
0001cb bfe6      	OUT  0x36,R30
                 ; 0004 0053     return data;
0001cc 2fe1      	MOV  R30,R17
0001cd 8118      	LDD  R17,Y+0
0001ce 940c 038a 	JMP  _0x20A0001
                 ; 0004 0054 }
                 ; .FEND
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.6 Evaluation
                 ;Automatic Program Generator
                 ;ï¿½ Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 4.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ; *****************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;//#include <myds1307rtc.h>
                 ;#include <myds1307rtcver2.h>
                 ;
                 ;
                 ;//#include <myds18b20ver1.h>
                 ;#include <myds18b20ver2.h>
                 ;
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <io.h>
                 ;#include <interrupt.h>
                 ;	flags -> R17
                 
                 	.CSEG
                 ;
                 ;#define IS_MASTER 1
                 ;#define MY_ADDRESS '2'
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;#if RX_BUFFER_SIZE<256
                 ;unsigned char rx_wr_index, rx_rd_index, rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index, rx_rd_index, rx_counter;
                 ;#endif
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;// USART Receiver interrupt service routine
                 ;
                 ;
                 ;// Declare your global variables here
                 ;unsigned char ma[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
                 
                 	.DSEG
                 ;void quet(unsigned char x);
                 ;void day();
                 ;void hienthi(int x);
                 ;
                 ;void hienthinhietdo(unsigned char temp);
                 ;void hienthithoigian(unsigned char hour, unsigned char minute);
                 ;
                 ;void uart_char_tx(unsigned char chr);
                 ;void uart_address_tx(unsigned char chr);
                 ;unsigned char uart_getchar();
                 ;void getState(unsigned char);
                 ;void process_received_data();
                 ;
                 ;float temp;
                 ;unsigned char kytu = '';
                 ;unsigned char b = 2;
                 ;unsigned char received_byte = '';
                 ;unsigned char received_package[10];
                 ;int isComplete = 1;
                 ;int package_size = 0;
                 ;int slave_enable = 0;
                 ;
                 ;byte ttemp0; // first byte
                 ;byte ttemp1;
                 ;
                 ;void execute_query();
                 ;void send_confirm_to_master();
                 ;void disable_slave();
                 ;void ensable_slave();
                 ;// thuc thi cau lenh doc tu goi tin (package))
                 ;
                 ;void return_data_to_master(unsigned char d1, unsigned char d2, unsigned char d3, unsigned char d4, unsigned char d5) {
                 ; 0005 005A void return_data_to_master(unsigned char d1, unsigned char d2, unsigned char d3, unsigned char d4, unsigned char d5) {
                 
                 	.CSEG
                 _return_data_to_master:
                 ; .FSTART _return_data_to_master
                 ; 0005 005B     uart_char_tx('@');
0001d0 93aa      	ST   -Y,R26
                 ;	d1 -> Y+4
                 ;	d2 -> Y+3
                 ;	d3 -> Y+2
                 ;	d4 -> Y+1
                 ;	d5 -> Y+0
0001d1 e4a0      	LDI  R26,LOW(64)
0001d2 d325      	RCALL SUBOPT_0x4
                 ; 0005 005C     delay_ms(100);
                 ; 0005 005D     uart_char_tx(d1); //printf("%d",d1);
0001d3 81ac      	LDD  R26,Y+4
0001d4 d323      	RCALL SUBOPT_0x4
                 ; 0005 005E     delay_ms(100);
                 ; 0005 005F     uart_char_tx(d2);//printf("%d",d2);
0001d5 81ab      	LDD  R26,Y+3
0001d6 d321      	RCALL SUBOPT_0x4
                 ; 0005 0060     delay_ms(100);
                 ; 0005 0061     uart_char_tx(d3);//printf("%d",d3);
0001d7 81aa      	LDD  R26,Y+2
0001d8 d31f      	RCALL SUBOPT_0x4
                 ; 0005 0062     delay_ms(100);
                 ; 0005 0063     uart_char_tx(d4);//printf("%d",d4);
0001d9 81a9      	LDD  R26,Y+1
0001da d31d      	RCALL SUBOPT_0x4
                 ; 0005 0064     delay_ms(100);
                 ; 0005 0065     uart_char_tx(d5);//printf("%d",d5);
0001db 81a8      	LD   R26,Y
0001dc d31b      	RCALL SUBOPT_0x4
                 ; 0005 0066     delay_ms(100);
                 ; 0005 0067     uart_char_tx('#');
0001dd e2a3      	LDI  R26,LOW(35)
0001de d319      	RCALL SUBOPT_0x4
                 ; 0005 0068     delay_ms(100);
                 ; 0005 0069     disable_slave();
0001df d0c5      	RCALL _disable_slave
                 ; 0005 006A }
0001e0 c02a      	RJMP _0x20A0003
                 ; .FEND
                 ;
                 ;void return_data_to_computer(unsigned char d1, unsigned char d2, unsigned char d3, unsigned char d4, unsigned char d5){
                 ; 0005 006C void return_data_to_computer(unsigned char d1, unsigned char d2, unsigned char d3, unsigned char d4, unsigned char d5){
                 _return_data_to_computer:
                 ; .FSTART _return_data_to_computer
                 ; 0005 006D     hienthi(111);delay_ms(3000);
0001e1 93aa      	ST   -Y,R26
                 ;	d1 -> Y+4
                 ;	d2 -> Y+3
                 ;	d3 -> Y+2
                 ;	d4 -> Y+1
                 ;	d5 -> Y+0
0001e2 e6af      	LDI  R26,LOW(111)
0001e3 e0b0      	LDI  R27,0
0001e4 d144      	RCALL _hienthi
0001e5 eba8      	LDI  R26,LOW(3000)
0001e6 e0bb      	LDI  R27,HIGH(3000)
0001e7 d571      	RCALL _delay_ms
                 ; 0005 006E     uart_char_tx('&');
0001e8 e2a6      	LDI  R26,LOW(38)
0001e9 d180      	RCALL _uart_char_tx
                 ; 0005 006F     //delay_ms(100);
                 ; 0005 0070     // cong them 1 de tranh null, khi computer nhan duoc thi tru di 1
                 ; 0005 0071     uart_char_tx(d1+1);hienthi(d1);delay_ms(2000);
0001ea 81ac      	LDD  R26,Y+4
0001eb 5faf      	SUBI R26,-LOW(1)
0001ec d17d      	RCALL _uart_char_tx
0001ed 81ac      	LDD  R26,Y+4
0001ee d30d      	RCALL SUBOPT_0x5
                 ; 0005 0072     //delay_ms(100);
                 ; 0005 0073     uart_char_tx(d2+1);hienthi(d2);delay_ms(2000);
0001ef 81ab      	LDD  R26,Y+3
0001f0 5faf      	SUBI R26,-LOW(1)
0001f1 d178      	RCALL _uart_char_tx
0001f2 81ab      	LDD  R26,Y+3
0001f3 d308      	RCALL SUBOPT_0x5
                 ; 0005 0074     delay_ms(100);
0001f4 e6a4      	LDI  R26,LOW(100)
0001f5 e0b0      	LDI  R27,0
0001f6 d562      	RCALL _delay_ms
                 ; 0005 0075     uart_char_tx(d3+1);hienthi(d3);delay_ms(2000);
0001f7 81aa      	LDD  R26,Y+2
0001f8 5faf      	SUBI R26,-LOW(1)
0001f9 d170      	RCALL _uart_char_tx
0001fa 81aa      	LDD  R26,Y+2
0001fb d300      	RCALL SUBOPT_0x5
                 ; 0005 0076     delay_ms(100);
0001fc e6a4      	LDI  R26,LOW(100)
0001fd e0b0      	LDI  R27,0
0001fe d55a      	RCALL _delay_ms
                 ; 0005 0077     uart_char_tx(d4+1);hienthi(d4);delay_ms(2000);
0001ff 81a9      	LDD  R26,Y+1
000200 5faf      	SUBI R26,-LOW(1)
000201 d168      	RCALL _uart_char_tx
000202 81a9      	LDD  R26,Y+1
000203 d2f8      	RCALL SUBOPT_0x5
                 ; 0005 0078     //delay_ms(100);
                 ; 0005 0079     uart_char_tx(d5+1);hienthi(d5);delay_ms(2000);
000204 81a8      	LD   R26,Y
000205 5faf      	SUBI R26,-LOW(1)
000206 d163      	RCALL _uart_char_tx
000207 81a8      	LD   R26,Y
000208 d2f3      	RCALL SUBOPT_0x5
                 ; 0005 007A     //delay_ms(100);
                 ; 0005 007B     uart_char_tx('#');
000209 e2a3      	LDI  R26,LOW(35)
00020a d2ed      	RCALL SUBOPT_0x4
                 ; 0005 007C     delay_ms(100);
                 ; 0005 007D 
                 ; 0005 007E }
                 _0x20A0003:
00020b 9625      	ADIW R28,5
00020c 9508      	RET
                 ; .FEND
                 ;
                 ;void execute_query() {
                 ; 0005 0080 void execute_query() {
                 _execute_query:
                 ; .FSTART _execute_query
                 ; 0005 0081     Time t;
                 ; 0005 0082 
                 ; 0005 0083     if (IS_MASTER) {
00020d 9729      	SBIW R28,9
                 ;	t -> Y+0
                 ; 0005 0084         hienthi(package_size); delay_ms(4000);
00020e 01d6      	MOVW R26,R12
00020f d2f1      	RCALL SUBOPT_0x6
                 ; 0005 0085         // thuc hien cau truy van nhan duoc tren master
                 ; 0005 0086         if (package_size == 4) { // co the nhan biet bang byte dau tien khac 0
000210 e0e4      	LDI  R30,LOW(4)
000211 e0f0      	LDI  R31,HIGH(4)
000212 15ec      	CP   R30,R12
000213 05fd      	CPC  R31,R13
000214 f571      	BRNE _0xA0006
                 ; 0005 0087             // gui dia chi cho slave, sau do cho xac nhan tu slave
                 ; 0005 0088             //hienthi(99);delay_ms(5000);
                 ; 0005 0089             uart_address_tx(received_package[1]);
                +
000215 91a0 017e+LDS R26 , _received_package + ( 1 )
                 	__GETB2MN _received_package,1
000217 d159      	RCALL _uart_address_tx
                 ; 0005 008A             printf("heheh");
                +
000218 e8e4     +LDI R30 , LOW ( 2 * _0xA0000 + ( 0 ) )
000219 e0f0     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 0 ) )
                 	__POINTW1FN _0xA0000,0
00021a 93fa      	ST   -Y,R31
00021b 93ea      	ST   -Y,R30
00021c e080      	LDI  R24,0
00021d d28a      	RCALL _printf
00021e 9622      	ADIW R28,2
                 ; 0005 008B                 temp = ds18b20_gettemp();
00021f d2e5      	RCALL SUBOPT_0x7
                 ; 0005 008C                 printf("%f", temp);
                +
000220 e8ea     +LDI R30 , LOW ( 2 * _0xA0000 + ( 6 ) )
000221 e0f0     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 6 ) )
                 	__POINTW1FN _0xA0000,6
000222 93fa      	ST   -Y,R31
000223 93ea      	ST   -Y,R30
000224 d2ea      	RCALL SUBOPT_0x8
000225 d3d5      	RCALL __PUTPARD1
000226 e084      	LDI  R24,4
000227 d280      	RCALL _printf
000228 9626      	ADIW R28,6
                 ; 0005 008D                 //printf ("%d",temp);
                 ; 0005 008E                 return_data_to_computer(0, 0, 0,(unsigned char) ((int) temp), (unsigned char)((int) (10 * (temp - (int)  ...
000229 d2ee      	RCALL SUBOPT_0x9
00022a d2e4      	RCALL SUBOPT_0x8
00022b d41f      	RCALL __CFD1
00022c 93ea      	ST   -Y,R30
00022d d2e1      	RCALL SUBOPT_0x8
00022e d41c      	RCALL __CFD1
00022f 91a0 0179 	LDS  R26,_temp
000231 91b0 017a 	LDS  R27,_temp+1
000233 9180 017b 	LDS  R24,_temp+2
000235 9190 017c 	LDS  R25,_temp+3
000237 d366      	RCALL __CWD1
000238 d449      	RCALL __CDF1
000239 d3cb      	RCALL __SWAPD12
00023a d47a      	RCALL __SUBF12
                +
00023b e0a0     +LDI R26 , LOW ( 0x41200000 )
00023c e0b0     +LDI R27 , HIGH ( 0x41200000 )
00023d e280     +LDI R24 , BYTE3 ( 0x41200000 )
00023e e491     +LDI R25 , BYTE4 ( 0x41200000 )
                 	__GETD2N 0x41200000
00023f d4cb      	RCALL __MULF12
000240 d40a      	RCALL __CFD1
000241 2fae      	MOV  R26,R30
000242 df9e      	RCALL _return_data_to_computer
                 ; 0005 008F 
                 ; 0005 0090             //            if (received_package[2] == 't') {
                 ; 0005 0091             //                //printf ("%c",a);
                 ; 0005 0092             //                temp = ds18b20_gettemp();
                 ; 0005 0093             //                uart_char_tx('T');
                 ; 0005 0094             //                printf(" Nhiet do hien tai la %d oC\n\r", (unsigned char) temp);
                 ; 0005 0095             //
                 ; 0005 0096             //            }
                 ; 0005 0097             //            if (received_package[2] == 'h') {
                 ; 0005 0098             //                t = myGetTimeFromDS1307ver2();
                 ; 0005 0099             //                printf(" Gio hien tai la %d:%d:%d\n\r", (unsigned char) (t.Hour + t.Mode * t.AP * 12), (un ...
                 ; 0005 009A             //
                 ; 0005 009B             //            }
                 ; 0005 009C 
                 ; 0005 009D         }
                 ; 0005 009E         if(package_size == 7) { // co the nhan biet goi tin data bang byte dau tien luon =0
                 _0xA0006:
000243 e0e7      	LDI  R30,LOW(7)
000244 e0f0      	LDI  R31,HIGH(7)
000245 15ec      	CP   R30,R12
000246 05fd      	CPC  R31,R13
000247 f541      	BRNE _0xA0007
                 ; 0005 009F             // day la goi tin data
                 ; 0005 00A0             // nhan biet nhiet do hay thoi gian dua vao byte so 3 = 0 hay khac 0
                 ; 0005 00A1             hienthi(55);delay_ms(4000);
000248 e3a7      	LDI  R26,LOW(55)
000249 e0b0      	LDI  R27,0
00024a d2b6      	RCALL SUBOPT_0x6
                 ; 0005 00A2             if(received_package[2] ==0){
                +
00024b 91e0 017f+LDS R30 , _received_package + ( 2 )
                 	__GETB1MN _received_package,2
00024d 30e0      	CPI  R30,0
00024e f479      	BRNE _0xA0008
                 ; 0005 00A3                 // day la goi nhiet do
                 ; 0005 00A4                 temp = received_package[4]+received_package[5]/10;
                +
00024f 9160 0181+LDS R22 , _received_package + ( 4 )
                 	__GETBRMN 22,_received_package,4
000251 2777      	CLR  R23
                +
000252 91a0 0182+LDS R26 , _received_package + ( 5 )
                 	__GETB2MN _received_package,5
000254 d2c8      	RCALL SUBOPT_0xA
000255 0fe6      	ADD  R30,R22
000256 1ff7      	ADC  R31,R23
000257 e7a9      	LDI  R26,LOW(_temp)
000258 e0b1      	LDI  R27,HIGH(_temp)
000259 d344      	RCALL __CWD1
00025a d427      	RCALL __CDF1
00025b d396      	RCALL __PUTDP1
                 ; 0005 00A5                 return_data_to_computer(0, 0, 0,received_package[4],received_package[5]);
00025c d2bb      	RCALL SUBOPT_0x9
00025d d2c4      	RCALL SUBOPT_0xB
                 ; 0005 00A6             }
                 ; 0005 00A7             if(received_package[2] == 1){
                 _0xA0008:
                +
00025e 91a0 017f+LDS R26 , _received_package + ( 2 )
                 	__GETB2MN _received_package,2
000260 30a1      	CPI  R26,LOW(0x1)
000261 f471      	BRNE _0xA0009
                 ; 0005 00A8                 // day la goi thoi gian
                 ; 0005 00A9                 t.Hour = received_package[3];
                +
000262 91e0 0180+LDS R30 , _received_package + ( 3 )
                 	__GETB1MN _received_package,3
000264 83ea      	STD  Y+2,R30
                 ; 0005 00AA                 t.Minute = received_package[4];
                +
000265 91e0 0181+LDS R30 , _received_package + ( 4 )
                 	__GETB1MN _received_package,4
000267 83e9      	STD  Y+1,R30
                 ; 0005 00AB                 t.Second = received_package[5];
                +
000268 91e0 0182+LDS R30 , _received_package + ( 5 )
                 	__GETB1MN _received_package,5
00026a 83e8      	ST   Y,R30
                 ; 0005 00AC                 return_data_to_computer(0,1,received_package[3],received_package[4],received_package[5]);
00026b d2bc      	RCALL SUBOPT_0xC
                +
00026c 91e0 0180+LDS R30 , _received_package + ( 3 )
                 	__GETB1MN _received_package,3
00026e 93ea      	ST   -Y,R30
00026f d2b2      	RCALL SUBOPT_0xB
                 ; 0005 00AD             }
                 ; 0005 00AE         }
                 _0xA0009:
                 ; 0005 00AF     } else {
                 _0xA0007:
                 ; 0005 00B0         // thuc hien cau truy van nhan duoc tren slave
                 ; 0005 00B1         if (package_size == 4) {
                 ; 0005 00B2             if (received_package[2] == 't') {
                 ; 0005 00B3                 //printf ("%c",a);
                 ; 0005 00B4                 temp = ds18b20_gettemp();
                 ; 0005 00B5                 //printf("%d", (int)temp);
                 ; 0005 00B6                 //printf ("%d",temp);
                 ; 0005 00B7                 return_data_to_master(0, 0, 0,(unsigned char) ((int) temp), (unsigned char)((int) (10 * (temp - (int) te ...
                 ; 0005 00B8 
                 ; 0005 00B9             }
                 ; 0005 00BA             if (received_package[2] == 'h') {
                 ; 0005 00BB                 t = myGetTimeFromDS1307ver2();
                 ; 0005 00BC                 //printf(" Gio hien tai la %d:%d:%d\n\r", (unsigned char) (t.Hour + t.Mode * t.AP * 12), (unsigned char) ...
                 ; 0005 00BD                 return_data_to_master(0, 1, (t.Hour + t.Mode * t.AP * 12), t.Minute, t.Second);
                 ; 0005 00BE             }
                 ; 0005 00BF 
                 ; 0005 00C0         }
                 ; 0005 00C1     }
                 ; 0005 00C2     package_size = 0;
000270 24cc      	CLR  R12
000271 24dd      	CLR  R13
                 ; 0005 00C3 }
000272 9629      	ADIW R28,9
000273 9508      	RET
                 ; .FEND
                 ;
                 ;void send_query_to_slave() {
                 ; 0005 00C5 void send_query_to_slave() {
                 _send_query_to_slave:
                 ; .FSTART _send_query_to_slave
                 ; 0005 00C6 //    hienthi(11);delay_ms(4000);
                 ; 0005 00C7     uart_char_tx(received_package[0]);
000274 91a0 017d 	LDS  R26,_received_package
000276 d281      	RCALL SUBOPT_0x4
                 ; 0005 00C8     delay_ms(100); // cho cho master nhan va xu ly
                 ; 0005 00C9     uart_char_tx(received_package[1]);
                +
000277 91a0 017e+LDS R26 , _received_package + ( 1 )
                 	__GETB2MN _received_package,1
000279 d27e      	RCALL SUBOPT_0x4
                 ; 0005 00CA     delay_ms(100);
                 ; 0005 00CB     uart_char_tx(received_package[2]);
                +
00027a 91a0 017f+LDS R26 , _received_package + ( 2 )
                 	__GETB2MN _received_package,2
00027c d27b      	RCALL SUBOPT_0x4
                 ; 0005 00CC     delay_ms(100);
                 ; 0005 00CD     uart_char_tx(received_package[3]);
                +
00027d 91a0 0180+LDS R26 , _received_package + ( 3 )
                 	__GETB2MN _received_package,3
00027f d278      	RCALL SUBOPT_0x4
                 ; 0005 00CE     delay_ms(100);
                 ; 0005 00CF }
000280 9508      	RET
                 ; .FEND
                 ;
                 ;// doc tung byte va luu vao goi tin theo dinh dang
                 ;
                 ;void process_received_data() {
                 ; 0005 00D3 void process_received_data() {
                 _process_received_data:
                 ; .FSTART _process_received_data
                 ; 0005 00D4     if (IS_MASTER) {
                 ; 0005 00D5         // xu ly du lieu nhan duoc tren master
                 ; 0005 00D6         if (isComplete) {
000281 2c0a      	MOV  R0,R10
000282 280b      	OR   R0,R11
000283 f071      	BREQ _0xA000F
                 ; 0005 00D7             if (received_byte == '@') {
000284 e4e0      	LDI  R30,LOW(64)
000285 15e8      	CP   R30,R8
000286 f419      	BRNE _0xA0010
                 ; 0005 00D8                 //hienthi(33);delay_ms(4000);
                 ; 0005 00D9                 //printf("bat dau goi tin; ");
                 ; 0005 00DA                 isComplete = 0;
000287 24aa      	CLR  R10
000288 24bb      	CLR  R11
                 ; 0005 00DB                 received_package[package_size] = received_byte;
000289 d2a3      	RCALL SUBOPT_0xD
                 ; 0005 00DC                 package_size++;
                 ; 0005 00DD             }
                 ; 0005 00DE             if (received_byte == '$') {
                 _0xA0010:
00028a e2e4      	LDI  R30,LOW(36)
00028b 15e8      	CP   R30,R8
00028c f421      	BRNE _0xA0011
                 ; 0005 00DF                 // slave da xac nhan, xu ly tiep, gui cau truy van toi slave
                 ; 0005 00E0                 hienthi(11);delay_ms(4000);
00028d e0ab      	LDI  R26,LOW(11)
00028e e0b0      	LDI  R27,0
00028f d271      	RCALL SUBOPT_0x6
                 ; 0005 00E1                 send_query_to_slave();
000290 dfe3      	RCALL _send_query_to_slave
                 ; 0005 00E2             }
                 ; 0005 00E3         } else {
                 _0xA0011:
000291 c007      	RJMP _0xA0012
                 _0xA000F:
                 ; 0005 00E4             received_package[package_size] = received_byte;
000292 d29a      	RCALL SUBOPT_0xD
                 ; 0005 00E5             package_size++;
                 ; 0005 00E6             //hienthi(package_size);delay_ms(4000);
                 ; 0005 00E7             if ((received_byte == '#') || (package_size > 9)) {
000293 e2e3      	LDI  R30,LOW(35)
000294 15e8      	CP   R30,R8
000295 f011      	BREQ _0xA0014
000296 d29e      	RCALL SUBOPT_0xE
000297 f40c      	BRGE _0xA0013
                 _0xA0014:
                 ; 0005 00E8                 //printf("ket thuc goi tin; ");
                 ; 0005 00E9                 //hienthi(44);delay_ms(4000);
                 ; 0005 00EA                 isComplete = 1;
000298 d2a1      	RCALL SUBOPT_0xF
                 ; 0005 00EB                 execute_query();
                 ; 0005 00EC             }
                 ; 0005 00ED         }
                 _0xA0013:
                 _0xA0012:
                 ; 0005 00EE     } else {
                 ; 0005 00EF         // xu ly du lieu nhan duoc tren slave
                 ; 0005 00F0         if (isComplete) {
                 ; 0005 00F1             if (received_byte == '@') {
                 ; 0005 00F2                 //printf("bat dau goi tin; ");
                 ; 0005 00F3                 isComplete = 0;
                 ; 0005 00F4                 received_package[package_size] = received_byte;
                 ; 0005 00F5                 package_size++;
                 ; 0005 00F6             }
                 ; 0005 00F7         } else {
                 ; 0005 00F8             received_package[package_size] = received_byte;
                 ; 0005 00F9             package_size++;
                 ; 0005 00FA             if ((received_byte == '#') || (package_size > 9)) {
                 ; 0005 00FB                 //printf("ket thuc goi tin; ");
                 ; 0005 00FC                 isComplete = 1;
                 ; 0005 00FD                 execute_query();
                 ; 0005 00FE             }
                 ; 0005 00FF         }
                 ; 0005 0100     }
                 ; 0005 0101 }
000299 9508      	RET
                 ; .FEND
                 ;
                 ;void send_confirm_to_master() {
                 ; 0005 0103 void send_confirm_to_master() {
                 _send_confirm_to_master:
                 ; .FSTART _send_confirm_to_master
                 ; 0005 0104     uart_char_tx('$');
00029a e2a4      	LDI  R26,LOW(36)
00029b d0ce      	RCALL _uart_char_tx
                 ; 0005 0105 }
00029c 9508      	RET
                 ; .FEND
                 ;
                 ;void enable_slave() {
                 ; 0005 0107 void enable_slave() {
                 _enable_slave:
                 ; .FSTART _enable_slave
                 ; 0005 0108     slave_enable = 1;
00029d e0e1      	LDI  R30,LOW(1)
00029e e0f0      	LDI  R31,HIGH(1)
00029f 93e0 0187 	STS  _slave_enable,R30
0002a1 93f0 0188 	STS  _slave_enable+1,R31
                 ; 0005 0109     UCSRA &= ~(1 << MPCM);
0002a3 9858      	CBI  0xB,0
                 ; 0005 010A }
0002a4 9508      	RET
                 ; .FEND
                 ;
                 ;void disable_slave() {
                 ; 0005 010C void disable_slave() {
                 _disable_slave:
                 ; .FSTART _disable_slave
                 ; 0005 010D     slave_enable = 0;
0002a5 e0e0      	LDI  R30,LOW(0)
0002a6 93e0 0187 	STS  _slave_enable,R30
0002a8 93e0 0188 	STS  _slave_enable+1,R30
                 ; 0005 010E     UCSRA |= (1 << MPCM);
0002aa 9a58      	SBI  0xB,0
                 ; 0005 010F }
0002ab 9508      	RET
                 ; .FEND
                 ;
                 ;// xu ly ngat nhan du lieu
                 ;
                 ;interrupt [USART_RXC] void usart_rx_isr(void) {
                 ; 0005 0113 interrupt [12] void usart_rx_isr(void) {
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
0002ac 920a      	ST   -Y,R0
0002ad 921a      	ST   -Y,R1
0002ae 92fa      	ST   -Y,R15
0002af 936a      	ST   -Y,R22
0002b0 937a      	ST   -Y,R23
0002b1 938a      	ST   -Y,R24
0002b2 939a      	ST   -Y,R25
0002b3 93aa      	ST   -Y,R26
0002b4 93ba      	ST   -Y,R27
0002b5 93ea      	ST   -Y,R30
0002b6 93fa      	ST   -Y,R31
0002b7 b7ef      	IN   R30,SREG
0002b8 93ea      	ST   -Y,R30
                 ; 0005 0114     if (IS_MASTER) {
                 ; 0005 0115         // xu ly ngat nhan du lieu tren master
                 ; 0005 0116         received_byte = UDR;
0002b9 b08c      	IN   R8,12
                 ; 0005 0117         process_received_data();
0002ba dfc6      	RCALL _process_received_data
                 ; 0005 0118     }
                 ; 0005 0119     else {
                 ; 0005 011A         //xu ly ngat nhan du lieu tren slave
                 ; 0005 011B         //printf("slave nhan dia chi");
                 ; 0005 011C //        hienthi(received_byte);
                 ; 0005 011D //        delay_ms(6000);
                 ; 0005 011E         received_byte = UDR;
                 ; 0005 011F         if (slave_enable) {
                 ; 0005 0120             //printf("xy ly nghat");
                 ; 0005 0121             process_received_data();
                 ; 0005 0122         } else {
                 ; 0005 0123             //printf("slave nhan dia chi");
                 ; 0005 0124             if (MY_ADDRESS == received_byte) {
                 ; 0005 0125                 enable_slave();
                 ; 0005 0126                 send_confirm_to_master();
                 ; 0005 0127             }
                 ; 0005 0128         }
                 ; 0005 0129     }
                 ; 0005 012A }
0002bb 91e9      	LD   R30,Y+
0002bc bfef      	OUT  SREG,R30
0002bd 91f9      	LD   R31,Y+
0002be 91e9      	LD   R30,Y+
0002bf 91b9      	LD   R27,Y+
0002c0 91a9      	LD   R26,Y+
0002c1 9199      	LD   R25,Y+
0002c2 9189      	LD   R24,Y+
0002c3 9179      	LD   R23,Y+
0002c4 9169      	LD   R22,Y+
0002c5 90f9      	LD   R15,Y+
0002c6 9019      	LD   R1,Y+
0002c7 9009      	LD   R0,Y+
0002c8 9518      	RETI
                 ; .FEND
                 ;
                 ;char mygetchar(void) {
                 ; 0005 012C char mygetchar(void) {
                 ; 0005 012D     char data;
                 ; 0005 012E     if (rx_counter == 0) return 0;
                 ;	data -> R17
                 ; 0005 012F     data = rx_buffer[rx_rd_index];
                 ; 0005 0130     if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
                 ; 0005 0131     //#asm("cli")
                 ; 0005 0132     --rx_counter;
                 ; 0005 0133     //#asm("sei")
                 ; 0005 0134     return data;
                 ; 0005 0135 }
                 ;
                 ;// Declare your global variables here
                 ;unsigned char my_variable;
                 ;
                 ;void main(void) {
                 ; 0005 013A void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0005 013B     // Declare your local variables here
                 ; 0005 013C     unsigned char *t = 0;
                 ; 0005 013D     unsigned char h, m, s, i;
                 ; 0005 013E     int x;
                 ; 0005 013F     Time time = {30, 15, 10, 5, 12, 5, 16, 1, 1}; // thoi gian hien tai
                 ; 0005 0140     // Input/Output Ports initialization
                 ; 0005 0141     // Port A initialization
                 ; 0005 0142     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0005 0143     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0005 0144     PORTA = 0x00;
0002c9 972b      	SBIW R28,11
0002ca e089      	LDI  R24,9
0002cb e0a0      	LDI  R26,LOW(0)
0002cc e0b0      	LDI  R27,HIGH(0)
0002cd e7ea      	LDI  R30,LOW(_0xA0024*2)
0002ce e0f0      	LDI  R31,HIGH(_0xA0024*2)
0002cf d2b7      	RCALL __INITLOCB
                 ;	*t -> R16,R17
                 ;	h -> R19
                 ;	m -> R18
                 ;	s -> R21
                 ;	i -> R20
                 ;	x -> Y+9
                 ;	time -> Y+0
                +
0002d0 e000     +LDI R16 , LOW ( 0 )
0002d1 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0002d2 e0e0      	LDI  R30,LOW(0)
0002d3 bbeb      	OUT  0x1B,R30
                 ; 0005 0145     //    DDRA = 0x00;
                 ; 0005 0146     DDRA = 0xFF;
0002d4 efef      	LDI  R30,LOW(255)
0002d5 bbea      	OUT  0x1A,R30
                 ; 0005 0147 
                 ; 0005 0148     // Port B initialization
                 ; 0005 0149     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0005 014A     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0005 014B     PORTB = 0x00;
0002d6 e0e0      	LDI  R30,LOW(0)
0002d7 bbe8      	OUT  0x18,R30
                 ; 0005 014C     DDRB = 0x00;
0002d8 bbe7      	OUT  0x17,R30
                 ; 0005 014D 
                 ; 0005 014E     // Port C initialization
                 ; 0005 014F     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0005 0150     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0005 0151     PORTC = 0x00;
0002d9 bbe5      	OUT  0x15,R30
                 ; 0005 0152     //    DDRC = 0xFF;
                 ; 0005 0153     DDRC = 0x00;
0002da bbe4      	OUT  0x14,R30
                 ; 0005 0154 
                 ; 0005 0155     // Port D initialization
                 ; 0005 0156     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0005 0157     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0005 0158     PORTD = 0x00;
0002db bbe2      	OUT  0x12,R30
                 ; 0005 0159     DDRD = 0x00;
0002dc bbe1      	OUT  0x11,R30
                 ; 0005 015A 
                 ; 0005 015B     // Timer/Counter 0 initialization
                 ; 0005 015C     // Clock source: System Clock
                 ; 0005 015D     // Clock value: Timer 0 Stopped
                 ; 0005 015E     // Mode: Normal top=0xFF
                 ; 0005 015F     // OC0 output: Disconnected
                 ; 0005 0160     TCCR0 = 0x00;
0002dd bfe3      	OUT  0x33,R30
                 ; 0005 0161     TCNT0 = 0x00;
0002de bfe2      	OUT  0x32,R30
                 ; 0005 0162     OCR0 = 0x00;
0002df bfec      	OUT  0x3C,R30
                 ; 0005 0163 
                 ; 0005 0164     // Timer/Counter 1 initialization
                 ; 0005 0165     // Clock source: System Clock
                 ; 0005 0166     // Clock value: Timer1 Stopped
                 ; 0005 0167     // Mode: Normal top=0xFFFF
                 ; 0005 0168     // OC1A output: Discon.
                 ; 0005 0169     // OC1B output: Discon.
                 ; 0005 016A     // Noise Canceler: Off
                 ; 0005 016B     // Input Capture on Falling Edge
                 ; 0005 016C     // Timer1 Overflow Interrupt: Off
                 ; 0005 016D     // Input Capture Interrupt: Off
                 ; 0005 016E     // Compare A Match Interrupt: Off
                 ; 0005 016F     // Compare B Match Interrupt: Off
                 ; 0005 0170     TCCR1A = 0x00;
0002e0 bdef      	OUT  0x2F,R30
                 ; 0005 0171     TCCR1B = 0x00;
0002e1 bdee      	OUT  0x2E,R30
                 ; 0005 0172     TCNT1H = 0x00;
0002e2 bded      	OUT  0x2D,R30
                 ; 0005 0173     TCNT1L = 0x00;
0002e3 bdec      	OUT  0x2C,R30
                 ; 0005 0174     ICR1H = 0x00;
0002e4 bde7      	OUT  0x27,R30
                 ; 0005 0175     ICR1L = 0x00;
0002e5 bde6      	OUT  0x26,R30
                 ; 0005 0176     OCR1AH = 0x00;
0002e6 bdeb      	OUT  0x2B,R30
                 ; 0005 0177     OCR1AL = 0x00;
0002e7 bdea      	OUT  0x2A,R30
                 ; 0005 0178     OCR1BH = 0x00;
0002e8 bde9      	OUT  0x29,R30
                 ; 0005 0179     OCR1BL = 0x00;
0002e9 bde8      	OUT  0x28,R30
                 ; 0005 017A 
                 ; 0005 017B     // Timer/Counter 2 initialization
                 ; 0005 017C     // Clock source: System Clock
                 ; 0005 017D     // Clock value: Timer2 Stopped
                 ; 0005 017E     // Mode: Normal top=0xFF
                 ; 0005 017F     // OC2 output: Disconnected
                 ; 0005 0180     ASSR = 0x00;
0002ea bde2      	OUT  0x22,R30
                 ; 0005 0181     TCCR2 = 0x00;
0002eb bde5      	OUT  0x25,R30
                 ; 0005 0182     TCNT2 = 0x00;
0002ec bde4      	OUT  0x24,R30
                 ; 0005 0183     OCR2 = 0x00;
0002ed bde3      	OUT  0x23,R30
                 ; 0005 0184 
                 ; 0005 0185     // External Interrupt(s) initialization
                 ; 0005 0186     // INT0: Off
                 ; 0005 0187     // INT1: Off
                 ; 0005 0188     // INT2: Off
                 ; 0005 0189     MCUCR = 0x00;
0002ee bfe5      	OUT  0x35,R30
                 ; 0005 018A     MCUCSR = 0x00;
0002ef bfe4      	OUT  0x34,R30
                 ; 0005 018B 
                 ; 0005 018C     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0005 018D     TIMSK = 0x00;
0002f0 bfe9      	OUT  0x39,R30
                 ; 0005 018E 
                 ; 0005 018F     // USART initialization
                 ; 0005 0190     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0005 0191     // USART Receiver: On
                 ; 0005 0192     // USART Transmitter: On
                 ; 0005 0193     // USART Mode: Asynchronous
                 ; 0005 0194     // USART Baud Rate: 9600
                 ; 0005 0195     UCSRA = 0x00;
0002f1 b9eb      	OUT  0xB,R30
                 ; 0005 0196     UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
0002f2 e8e6      	LDI  R30,LOW(134)
0002f3 bde0      	OUT  0x20,R30
                 ; 0005 0197     UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE) | (1 << UCSZ2);
0002f4 e9ec      	LDI  R30,LOW(156)
0002f5 b9ea      	OUT  0xA,R30
                 ; 0005 0198     UBRRH = 0x00;
0002f6 e0e0      	LDI  R30,LOW(0)
0002f7 bde0      	OUT  0x20,R30
                 ; 0005 0199     UBRRL = 0x19;
0002f8 e1e9      	LDI  R30,LOW(25)
0002f9 b9e9      	OUT  0x9,R30
                 ; 0005 019A     if(!IS_MASTER) disable_slave();
                 ; 0005 019B 
                 ; 0005 019C 
                 ; 0005 019D     // Analog Comparator initialization
                 ; 0005 019E     // Analog Comparator: Off
                 ; 0005 019F     // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0005 01A0     ACSR = 0x80;
0002fa e8e0      	LDI  R30,LOW(128)
0002fb b9e8      	OUT  0x8,R30
                 ; 0005 01A1     SFIOR = 0x00;
0002fc e0e0      	LDI  R30,LOW(0)
0002fd bfe0      	OUT  0x30,R30
                 ; 0005 01A2 
                 ; 0005 01A3     // ADC initialization
                 ; 0005 01A4     // ADC disabled
                 ; 0005 01A5     ADCSRA = 0x00;
0002fe b9e6      	OUT  0x6,R30
                 ; 0005 01A6 
                 ; 0005 01A7     // SPI initialization
                 ; 0005 01A8     // SPI disabled
                 ; 0005 01A9     SPCR = 0x00;
0002ff b9ed      	OUT  0xD,R30
                 ; 0005 01AA 
                 ; 0005 01AB     // TWI initialization
                 ; 0005 01AC     // TWI disabled
                 ; 0005 01AD     TWCR = 0x00;
000300 bfe6      	OUT  0x36,R30
                 ; 0005 01AE 
                 ; 0005 01AF     // I2C Bus initialization
                 ; 0005 01B0     // I2C Port: PORTA
                 ; 0005 01B1     // I2C SDA bit: 1
                 ; 0005 01B2     // I2C SCL bit: 0
                 ; 0005 01B3     // Bit Rate: 100 kHz
                 ; 0005 01B4     // Note: I2C settings are specified in the
                 ; 0005 01B5     // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0005 01B6     //    i2c_init();
                 ; 0005 01B7 
                 ; 0005 01B8     // 1 Wire Bus initialization
                 ; 0005 01B9     // 1 Wire Data port: PORTB
                 ; 0005 01BA     // 1 Wire Data bit: 0
                 ; 0005 01BB     // Note: 1 Wire port settings are specified in the
                 ; 0005 01BC     // Project|Configure|C Compiler|Libraries|1 Wire menu.
                 ; 0005 01BD     //    w1_init();
                 ; 0005 01BE     //    ds18b20_init(t, 0, 0, DS18B20_9BIT_RES);
                 ; 0005 01BF     //    rtc_init(0, 0, 0);
                 ; 0005 01C0 
                 ; 0005 01C1     //    TWI_Init(); //khoi dong TWI dung cho myds1307rtc.h
                 ; 0005 01C2     I2C_Init(); //khoi dong TWI dung cho myds1307rtcver2.h
000301 de90      	RCALL _I2C_Init
                 ; 0005 01C3 
                 ; 0005 01C4     // Global enable interrupts
                 ; 0005 01C5 #asm("sei")
000302 9478      	sei
                 ; 0005 01C6 
                 ; 0005 01C7     while (1) {
                 _0xA0026:
                 ; 0005 01C8 
                 ; 0005 01C9         // nhiet do
                 ; 0005 01CA         int whole = 0, decimal = 0;
                 ; 0005 01CB 
                 ; 0005 01CC         // hien thi nhiet do su dung myds18b20ver1.h
                 ; 0005 01CD         //        therm_ReadTempC(NULL, &whole, &decimal);
                 ; 0005 01CE         //        hienthinhietdo(whole);
                 ; 0005 01CF 
                 ; 0005 01D0         // hien thi nhiet do su dung myds18b20ver2.h
                 ; 0005 01D1         temp = ds18b20_gettemp();
000303 9724      	SBIW R28,4
000304 d1e4      	RCALL SUBOPT_0x1
                 ;	x -> Y+13
                 ;	time -> Y+4
                 ;	whole -> Y+2
                 ;	decimal -> Y+0
000305 d1ff      	RCALL SUBOPT_0x7
                 ; 0005 01D2         hienthinhietdo(temp);
000306 d208      	RCALL SUBOPT_0x8
000307 d341      	RCALL __CFD1U
000308 2fae      	MOV  R26,R30
000309 d00c      	RCALL _hienthinhietdo
                 ; 0005 01D3 
                 ; 0005 01D4         delay_ms(1000);
00030a eea8      	LDI  R26,LOW(1000)
00030b e0b3      	LDI  R27,HIGH(1000)
00030c d44c      	RCALL _delay_ms
                 ; 0005 01D5 
                 ; 0005 01D6         //        temp = ds18b20_temperature(t);
                 ; 0005 01D7 
                 ; 0005 01D8         // lay thoi gian
                 ; 0005 01D9         //        mySetTimeForDS1307ver2(&time);
                 ; 0005 01DA         //        time = myGetTimeFromDS1307();
                 ; 0005 01DB //        time = myGetTimeFromDS1307ver2();
                 ; 0005 01DC //        hienthithoigian(time.Hour + time.Mode * time.AP * 12, time.Minute); // hien thi theo 24h
                 ; 0005 01DD         hienthi(10);
00030d e0aa      	LDI  R26,LOW(10)
00030e e0b0      	LDI  R27,0
00030f d019      	RCALL _hienthi
                 ; 0005 01DE         delay_ms(2000);
000310 eda0      	LDI  R26,LOW(2000)
000311 e0b7      	LDI  R27,HIGH(2000)
000312 d446      	RCALL _delay_ms
                 ; 0005 01DF 
                 ; 0005 01E0 //        uart_char_tx('@');
                 ; 0005 01E1 //        delay_ms(100);
                 ; 0005 01E2 //        uart_char_tx('2');
                 ; 0005 01E3 //        delay_ms(100);
                 ; 0005 01E4 //        uart_char_tx('t');
                 ; 0005 01E5 //        delay_ms(100);
                 ; 0005 01E6 //        uart_char_tx('#');
                 ; 0005 01E7 //        delay_ms(100);
                 ; 0005 01E8 
                 ; 0005 01E9         // kytu = mygetchar();
                 ; 0005 01EA         // if(kytu !=0) putchar(kytu);
                 ; 0005 01EB         // printf("%c", my_variable);
                 ; 0005 01EC         //printf("Nhiet do hien tai la");
                 ; 0005 01ED         //kytu = uart_getchar();
                 ; 0005 01EE 
                 ; 0005 01EF //        received_package[0] = '@';
                 ; 0005 01F0 //        received_package[1]='2';
                 ; 0005 01F1 //        received_package[2]='t';
                 ; 0005 01F2 //        received_package[3]='#';
                 ; 0005 01F3 //        uart_address_tx(received_package[1]);
                 ; 0005 01F4 
                 ; 0005 01F5 
                 ; 0005 01F6 
                 ; 0005 01F7     }
000313 9624      	ADIW R28,4
000314 cfee      	RJMP _0xA0026
                 ; 0005 01F8 }
                 _0xA0029:
000315 cfff      	RJMP _0xA0029
                 ; .FEND
                 ;
                 ;void hienthinhietdo(unsigned char temp) {
                 ; 0005 01FA void hienthinhietdo(unsigned char temp) {
                 _hienthinhietdo:
                 ; .FSTART _hienthinhietdo
                 ; 0005 01FB     unsigned char a, b;
                 ; 0005 01FC     a = temp / 10;
000316 93aa      	ST   -Y,R26
000317 931a      	ST   -Y,R17
000318 930a      	ST   -Y,R16
                 ;	temp -> Y+2
                 ;	a -> R17
                 ;	b -> R16
000319 81aa      	LDD  R26,Y+2
00031a d202      	RCALL SUBOPT_0xA
00031b 2f1e      	MOV  R17,R30
                 ; 0005 01FD     b = temp % 10;
00031c 81aa      	LDD  R26,Y+2
00031d 27bb      	CLR  R27
00031e e0ea      	LDI  R30,LOW(10)
00031f e0f0      	LDI  R31,HIGH(10)
000320 d2b1      	RCALL __MODW21
000321 2f0e      	MOV  R16,R30
                 ; 0005 01FE 
                 ; 0005 01FF 
                 ; 0005 0200     quet(0xC6);
000322 eca6      	LDI  R26,LOW(198)
000323 d02c      	RCALL _quet
                 ; 0005 0201     quet(0x9C);
000324 e9ac      	LDI  R26,LOW(156)
000325 d218      	RCALL SUBOPT_0x10
                 ; 0005 0202     quet(ma[b]);
                 ; 0005 0203     quet(ma[a]);
                 ; 0005 0204     day(); // push
                 ; 0005 0205 }
000326 8119      	LDD  R17,Y+1
000327 8108      	LDD  R16,Y+0
000328 c061      	RJMP _0x20A0001
                 ; .FEND
                 ;
                 ;void hienthithoigian(unsigned char hour, unsigned char minute) {
                 ; 0005 0207 void hienthithoigian(unsigned char hour, unsigned char minute) {
                 ; 0005 0208     unsigned char a, b, c, d;
                 ; 0005 0209     a = hour / 10;
                 ;	hour -> Y+5
                 ;	minute -> Y+4
                 ;	a -> R17
                 ;	b -> R16
                 ;	c -> R19
                 ;	d -> R18
                 ; 0005 020A     b = hour % 10;
                 ; 0005 020B     c = minute / 10;
                 ; 0005 020C     d = minute % 10;
                 ; 0005 020D     quet(ma[d]);
                 ; 0005 020E     quet(ma[c]);
                 ; 0005 020F     quet(~(~ma[b] | 0x80));
                 ; 0005 0210     quet(ma[a]);
                 ; 0005 0211     day();
                 ; 0005 0212 }
                 ;
                 ;void hienthi(int x) {
                 ; 0005 0214 void hienthi(int x) {
                 _hienthi:
                 ; .FSTART _hienthi
                 ; 0005 0215     unsigned char a, b, c, d;
                 ; 0005 0216     int i = 0;
                 ; 0005 0217     a = x / 1000;
000329 93ba      	ST   -Y,R27
00032a 93aa      	ST   -Y,R26
00032b d24d      	RCALL __SAVELOCR6
                 ;	x -> Y+6
                 ;	a -> R17
                 ;	b -> R16
                 ;	c -> R19
                 ;	d -> R18
                 ;	i -> R20,R21
                +
00032c e040     +LDI R20 , LOW ( 0 )
00032d e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
00032e d21d      	RCALL SUBOPT_0x11
00032f d29d      	RCALL __DIVW21
000330 2f1e      	MOV  R17,R30
                 ; 0005 0218     b = (x % 1000) / 100;
000331 d21a      	RCALL SUBOPT_0x11
000332 d29f      	RCALL __MODW21
000333 01df      	MOVW R26,R30
000334 e6e4      	LDI  R30,LOW(100)
000335 e0f0      	LDI  R31,HIGH(100)
000336 d296      	RCALL __DIVW21
000337 2f0e      	MOV  R16,R30
                 ; 0005 0219     c = (x % 100) / 10;
000338 81ae      	LDD  R26,Y+6
000339 81bf      	LDD  R27,Y+6+1
00033a e6e4      	LDI  R30,LOW(100)
00033b e0f0      	LDI  R31,HIGH(100)
00033c d295      	RCALL __MODW21
00033d 01df      	MOVW R26,R30
00033e e0ea      	LDI  R30,LOW(10)
00033f e0f0      	LDI  R31,HIGH(10)
000340 d28c      	RCALL __DIVW21
000341 2f3e      	MOV  R19,R30
                 ; 0005 021A     d = (x % 10);
000342 81ae      	LDD  R26,Y+6
000343 81bf      	LDD  R27,Y+6+1
000344 e0ea      	LDI  R30,LOW(10)
000345 e0f0      	LDI  R31,HIGH(10)
000346 d28b      	RCALL __MODW21
000347 2f2e      	MOV  R18,R30
                 ; 0005 021B 
                 ; 0005 021C     quet(ma[d]);
000348 d208      	RCALL SUBOPT_0x12
000349 d006      	RCALL _quet
                 ; 0005 021D     quet(ma[c]);
00034a 2fe3      	MOV  R30,R19
00034b d205      	RCALL SUBOPT_0x12
00034c d1f1      	RCALL SUBOPT_0x10
                 ; 0005 021E     quet(ma[b]);
                 ; 0005 021F     quet(ma[a]);
                 ; 0005 0220 
                 ; 0005 0221 
                 ; 0005 0222 
                 ; 0005 0223 
                 ; 0005 0224     day();
                 ; 0005 0225 }
00034d d232      	RCALL __LOADLOCR6
00034e 9628      	ADIW R28,8
00034f 9508      	RET
                 ; .FEND
                 ;
                 ;void quet(unsigned char x) {
                 ; 0005 0227 void quet(unsigned char x) {
                 _quet:
                 ; .FSTART _quet
                 ; 0005 0228     unsigned char i, temp;
                 ; 0005 0229     for (i = 0; i < 8; i++) {
000350 93aa      	ST   -Y,R26
000351 931a      	ST   -Y,R17
000352 930a      	ST   -Y,R16
                 ;	x -> Y+2
                 ;	i -> R17
                 ;	temp -> R16
000353 e010      	LDI  R17,LOW(0)
                 _0xA002B:
000354 3018      	CPI  R17,8
000355 f470      	BRSH _0xA002C
                 ; 0005 022A         temp = x;
000356 810a      	LDD  R16,Y+2
                 ; 0005 022B         temp = temp & 0x80;
000357 7800      	ANDI R16,LOW(128)
                 ; 0005 022C         if (temp == 0x80) {
000358 3800      	CPI  R16,128
000359 f411      	BRNE _0xA002D
                 ; 0005 022D             PORTA.1 = 1;
00035a 9ad9      	SBI  0x1B,1
                 ; 0005 022E         } else {
00035b c001      	RJMP _0xA0030
                 _0xA002D:
                 ; 0005 022F             PORTA.1 = 0;
00035c 98d9      	CBI  0x1B,1
                 ; 0005 0230         }
                 _0xA0030:
                 ; 0005 0231         x = x * 2;
00035d 81ea      	LDD  R30,Y+2
00035e 0fee      	LSL  R30
00035f 83ea      	STD  Y+2,R30
                 ; 0005 0232         PORTA.0 = 0;
000360 98d8      	CBI  0x1B,0
                 ; 0005 0233         PORTA.0 = 1;
000361 9ad8      	SBI  0x1B,0
                 ; 0005 0234     }
000362 5f1f      	SUBI R17,-1
000363 cff0      	RJMP _0xA002B
                 _0xA002C:
                 ; 0005 0235 }
000364 8119      	LDD  R17,Y+1
000365 8108      	LDD  R16,Y+0
000366 c023      	RJMP _0x20A0001
                 ; .FEND
                 ;
                 ;void day() {
                 ; 0005 0237 void day() {
                 _day:
                 ; .FSTART _day
                 ; 0005 0238     PORTA.2 = 0;
000367 98da      	CBI  0x1B,2
                 ; 0005 0239     PORTA.2 = 1;
000368 9ada      	SBI  0x1B,2
                 ; 0005 023A }
000369 9508      	RET
                 ; .FEND
                 ;
                 ;//chuong trinh con phat du lieu
                 ;
                 ;void uart_char_tx(unsigned char chr) {
                 ; 0005 023E void uart_char_tx(unsigned char chr) {
                 _uart_char_tx:
                 ; .FSTART _uart_char_tx
                 ; 0005 023F     while (!(UCSRA & (1 << UDRE))); //cho den khi bit UDRE=1 moi thoat khoi while
00036a 93aa      	ST   -Y,R26
                 ;	chr -> Y+0
                 _0xA003B:
00036b 9b5d      	SBIS 0xB,5
00036c cffe      	RJMP _0xA003B
                 ; 0005 0240     UCSRB &= ~(1 << TXB8); //reset the 9th bit
00036d 9850      	CBI  0xA,0
                 ; 0005 0241     UDR = chr;
00036e 81e8      	LD   R30,Y
00036f b9ec      	OUT  0xC,R30
                 ; 0005 0242 }
000370 c00c      	RJMP _0x20A0002
                 ; .FEND
                 ;
                 ;//chuong trinh con phat dia chi
                 ;
                 ;void uart_address_tx(unsigned char chr) {
                 ; 0005 0246 void uart_address_tx(unsigned char chr) {
                 _uart_address_tx:
                 ; .FSTART _uart_address_tx
                 ; 0005 0247     while (!(UCSRA & (1 << UDRE))); //cho den khi bit UDRE=1 moi thoat khoi while
000371 93aa      	ST   -Y,R26
                 ;	chr -> Y+0
                 _0xA003E:
000372 9b5d      	SBIS 0xB,5
000373 cffe      	RJMP _0xA003E
                 ; 0005 0248     UCSRB |= (1 << TXB8);
000374 9a50      	SBI  0xA,0
                 ; 0005 0249     UDR = chr;
000375 81e8      	LD   R30,Y
000376 b9ec      	OUT  0xC,R30
                 ; 0005 024A }
000377 c005      	RJMP _0x20A0002
                 ; .FEND
                 ;
                 ;
                 ;unsigned char uart_getchar() {
                 ; 0005 024D unsigned char uart_getchar() {
                 ; 0005 024E     unsigned char a = '';
                 ; 0005 024F     a = UDR;
                 ;	a -> R17
                 ; 0005 0250     return a;
                 ; 0005 0251 }
                 ;
                 ;void getState(unsigned char a) {
                 ; 0005 0253 void getState(unsigned char a) {
                 ; 0005 0254     switch (a) {
                 ;	a -> Y+0
                 ; 0005 0255         case 't':
                 ; 0005 0256             printf("Nhiet do hien tai la %f", temp);
                 ; 0005 0257             break;
                 ; 0005 0258         case 'h':
                 ; 0005 0259             printf("xin chao");
                 ; 0005 025A             break;
                 ; 0005 025B     }
                 ; 0005 025C }
                 ;
                 ;//interrupt [USART_RXC] void rx_isr(){ //ngat nhan khi bit RXC =1
                 ;//  kytu = UDR;
                 ;//}
                 ;
                 ;
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
000378 93aa      	ST   -Y,R26
                 putchar0:
000379 9b5d           sbis usr,udre
00037a cffe           rjmp putchar0
00037b 81e8           ld   r30,y
00037c b9ec           out  udr,r30
                 _0x20A0002:
00037d 9621      	ADIW R28,1
00037e 9508      	RET
                 ; .FEND
                 _put_usart_G101:
                 ; .FSTART _put_usart_G101
00037f 93ba      	ST   -Y,R27
000380 93aa      	ST   -Y,R26
000381 81aa      	LDD  R26,Y+2
000382 dff5      	RCALL _putchar
000383 81a8      	LD   R26,Y
000384 81b9      	LDD  R27,Y+1
000385 91ed      	LD   R30,X+
000386 91fd      	LD   R31,X+
000387 9631      	ADIW R30,1
000388 93fe      	ST   -X,R31
000389 93ee      	ST   -X,R30
                 _0x20A0001:
00038a 9623      	ADIW R28,3
00038b 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
00038c 93ba      	ST   -Y,R27
00038d 93aa      	ST   -Y,R26
00038e 9726      	SBIW R28,6
00038f d1e9      	RCALL __SAVELOCR6
000390 e010      	LDI  R17,0
000391 85ac      	LDD  R26,Y+12
000392 85bd      	LDD  R27,Y+12+1
000393 e0e0      	LDI  R30,LOW(0)
000394 e0f0      	LDI  R31,HIGH(0)
000395 93ed      	ST   X+,R30
000396 93fc      	ST   X,R31
                 _0x2020016:
000397 89ea      	LDD  R30,Y+18
000398 89fb      	LDD  R31,Y+18+1
000399 9631      	ADIW R30,1
00039a 8bea      	STD  Y+18,R30
00039b 8bfb      	STD  Y+18+1,R31
00039c 9731      	SBIW R30,1
00039d 91e4      	LPM  R30,Z
00039e 2f2e      	MOV  R18,R30
00039f 30e0      	CPI  R30,0
0003a0 f409      	BRNE PC+2
0003a1 c100      	RJMP _0x2020018
0003a2 2fe1      	MOV  R30,R17
0003a3 30e0      	CPI  R30,0
0003a4 f431      	BRNE _0x202001C
0003a5 3225      	CPI  R18,37
0003a6 f411      	BRNE _0x202001D
0003a7 e011      	LDI  R17,LOW(1)
0003a8 c001      	RJMP _0x202001E
                 _0x202001D:
0003a9 d1ac      	RCALL SUBOPT_0x13
                 _0x202001E:
0003aa c0f6      	RJMP _0x202001B
                 _0x202001C:
0003ab 30e1      	CPI  R30,LOW(0x1)
0003ac f4a1      	BRNE _0x202001F
0003ad 3225      	CPI  R18,37
0003ae f411      	BRNE _0x2020020
0003af d1a6      	RCALL SUBOPT_0x13
0003b0 c0ef      	RJMP _0x20200CC
                 _0x2020020:
0003b1 e012      	LDI  R17,LOW(2)
0003b2 e040      	LDI  R20,LOW(0)
0003b3 e000      	LDI  R16,LOW(0)
0003b4 322d      	CPI  R18,45
0003b5 f411      	BRNE _0x2020021
0003b6 e001      	LDI  R16,LOW(1)
0003b7 c0e9      	RJMP _0x202001B
                 _0x2020021:
0003b8 322b      	CPI  R18,43
0003b9 f411      	BRNE _0x2020022
0003ba e24b      	LDI  R20,LOW(43)
0003bb c0e5      	RJMP _0x202001B
                 _0x2020022:
0003bc 3220      	CPI  R18,32
0003bd f411      	BRNE _0x2020023
0003be e240      	LDI  R20,LOW(32)
0003bf c0e1      	RJMP _0x202001B
                 _0x2020023:
0003c0 c002      	RJMP _0x2020024
                 _0x202001F:
0003c1 30e2      	CPI  R30,LOW(0x2)
0003c2 f439      	BRNE _0x2020025
                 _0x2020024:
0003c3 e050      	LDI  R21,LOW(0)
0003c4 e013      	LDI  R17,LOW(3)
0003c5 3320      	CPI  R18,48
0003c6 f411      	BRNE _0x2020026
0003c7 6800      	ORI  R16,LOW(128)
0003c8 c0d8      	RJMP _0x202001B
                 _0x2020026:
0003c9 c003      	RJMP _0x2020027
                 _0x2020025:
0003ca 30e3      	CPI  R30,LOW(0x3)
0003cb f009      	BREQ PC+2
0003cc c0d4      	RJMP _0x202001B
                 _0x2020027:
0003cd 3320      	CPI  R18,48
0003ce f010      	BRLO _0x202002A
0003cf 332a      	CPI  R18,58
0003d0 f008      	BRLO _0x202002B
                 _0x202002A:
0003d1 c007      	RJMP _0x2020029
                 _0x202002B:
0003d2 e0aa      	LDI  R26,LOW(10)
0003d3 9f5a      	MUL  R21,R26
0003d4 2d50      	MOV  R21,R0
0003d5 2fe2      	MOV  R30,R18
0003d6 53e0      	SUBI R30,LOW(48)
0003d7 0f5e      	ADD  R21,R30
0003d8 c0c8      	RJMP _0x202001B
                 _0x2020029:
0003d9 2fe2      	MOV  R30,R18
0003da 36e3      	CPI  R30,LOW(0x63)
0003db f439      	BRNE _0x202002F
0003dc d180      	RCALL SUBOPT_0x14
0003dd 89e8      	LDD  R30,Y+16
0003de 89f9      	LDD  R31,Y+16+1
0003df 81a4      	LDD  R26,Z+4
0003e0 93aa      	ST   -Y,R26
0003e1 d181      	RCALL SUBOPT_0x15
0003e2 c0bd      	RJMP _0x2020030
                 _0x202002F:
0003e3 37e3      	CPI  R30,LOW(0x73)
0003e4 f429      	BRNE _0x2020032
0003e5 d177      	RCALL SUBOPT_0x14
0003e6 d182      	RCALL SUBOPT_0x16
0003e7 d0e2      	RCALL _strlen
0003e8 2f1e      	MOV  R17,R30
0003e9 c007      	RJMP _0x2020033
                 _0x2020032:
0003ea 37e0      	CPI  R30,LOW(0x70)
0003eb f449      	BRNE _0x2020035
0003ec d170      	RCALL SUBOPT_0x14
0003ed d17b      	RCALL SUBOPT_0x16
0003ee d0e7      	RCALL _strlenf
0003ef 2f1e      	MOV  R17,R30
0003f0 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0003f1 6002      	ORI  R16,LOW(2)
0003f2 770f      	ANDI R16,LOW(127)
0003f3 e030      	LDI  R19,LOW(0)
0003f4 c02f      	RJMP _0x2020036
                 _0x2020035:
0003f5 36e4      	CPI  R30,LOW(0x64)
0003f6 f011      	BREQ _0x2020039
0003f7 36e9      	CPI  R30,LOW(0x69)
0003f8 f411      	BRNE _0x202003A
                 _0x2020039:
0003f9 6004      	ORI  R16,LOW(4)
0003fa c002      	RJMP _0x202003B
                 _0x202003A:
0003fb 37e5      	CPI  R30,LOW(0x75)
0003fc f431      	BRNE _0x202003C
                 _0x202003B:
0003fd e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0003fe e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0003ff 83ee      	STD  Y+6,R30
000400 83ff      	STD  Y+6+1,R31
000401 e015      	LDI  R17,LOW(5)
000402 c00c      	RJMP _0x202003D
                 _0x202003C:
000403 35e8      	CPI  R30,LOW(0x58)
000404 f411      	BRNE _0x202003F
000405 6008      	ORI  R16,LOW(8)
000406 c003      	RJMP _0x2020040
                 _0x202003F:
000407 37e8      	CPI  R30,LOW(0x78)
000408 f009      	BREQ PC+2
000409 c096      	RJMP _0x2020071
                 _0x2020040:
00040a e5ee      	LDI  R30,LOW(_tbl16_G101*2)
00040b e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
00040c 83ee      	STD  Y+6,R30
00040d 83ff      	STD  Y+6+1,R31
00040e e014      	LDI  R17,LOW(4)
                 _0x202003D:
00040f ff02      	SBRS R16,2
000410 c011      	RJMP _0x2020042
000411 d14b      	RCALL SUBOPT_0x14
000412 d15f      	RCALL SUBOPT_0x17
000413 85ab      	LDD  R26,Y+11
000414 23aa      	TST  R26
000415 f432      	BRPL _0x2020043
000416 85ea      	LDD  R30,Y+10
000417 85fb      	LDD  R31,Y+10+1
000418 d179      	RCALL __ANEGW1
000419 87ea      	STD  Y+10,R30
00041a 87fb      	STD  Y+10+1,R31
00041b e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00041c 3040      	CPI  R20,0
00041d f011      	BREQ _0x2020044
00041e 5f1f      	SUBI R17,-LOW(1)
00041f c001      	RJMP _0x2020045
                 _0x2020044:
000420 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000421 c002      	RJMP _0x2020046
                 _0x2020042:
000422 d13a      	RCALL SUBOPT_0x14
000423 d14e      	RCALL SUBOPT_0x17
                 _0x2020046:
                 _0x2020036:
000424 fd00      	SBRC R16,0
000425 c010      	RJMP _0x2020047
                 _0x2020048:
000426 1715      	CP   R17,R21
000427 f470      	BRSH _0x202004A
000428 ff07      	SBRS R16,7
000429 c008      	RJMP _0x202004B
00042a ff02      	SBRS R16,2
00042b c004      	RJMP _0x202004C
00042c 7f0b      	ANDI R16,LOW(251)
00042d 2f24      	MOV  R18,R20
00042e 5011      	SUBI R17,LOW(1)
00042f c001      	RJMP _0x202004D
                 _0x202004C:
000430 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000431 c001      	RJMP _0x202004E
                 _0x202004B:
000432 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000433 d122      	RCALL SUBOPT_0x13
000434 5051      	SUBI R21,LOW(1)
000435 cff0      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000436 2f31      	MOV  R19,R17
000437 ff01      	SBRS R16,1
000438 c016      	RJMP _0x202004F
                 _0x2020050:
000439 3030      	CPI  R19,0
00043a f099      	BREQ _0x2020052
00043b ff03      	SBRS R16,3
00043c c006      	RJMP _0x2020053
00043d 81ee      	LDD  R30,Y+6
00043e 81ff      	LDD  R31,Y+6+1
00043f 9125      	LPM  R18,Z+
000440 83ee      	STD  Y+6,R30
000441 83ff      	STD  Y+6+1,R31
000442 c005      	RJMP _0x2020054
                 _0x2020053:
000443 81ae      	LDD  R26,Y+6
000444 81bf      	LDD  R27,Y+6+1
000445 912d      	LD   R18,X+
000446 83ae      	STD  Y+6,R26
000447 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000448 d10d      	RCALL SUBOPT_0x13
000449 3050      	CPI  R21,0
00044a f009      	BREQ _0x2020055
00044b 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00044c 5031      	SUBI R19,LOW(1)
00044d cfeb      	RJMP _0x2020050
                 _0x2020052:
00044e c048      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00044f e320      	LDI  R18,LOW(48)
000450 81ee      	LDD  R30,Y+6
000451 81ff      	LDD  R31,Y+6+1
000452 d1a4      	RCALL __GETW1PF
000453 87e8      	STD  Y+8,R30
000454 87f9      	STD  Y+8+1,R31
000455 81ee      	LDD  R30,Y+6
000456 81ff      	LDD  R31,Y+6+1
000457 9632      	ADIW R30,2
000458 83ee      	STD  Y+6,R30
000459 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00045a 85e8      	LDD  R30,Y+8
00045b 85f9      	LDD  R31,Y+8+1
00045c 85aa      	LDD  R26,Y+10
00045d 85bb      	LDD  R27,Y+10+1
00045e 17ae      	CP   R26,R30
00045f 07bf      	CPC  R27,R31
000460 f050      	BRLO _0x202005C
000461 5f2f      	SUBI R18,-LOW(1)
000462 85a8      	LDD  R26,Y+8
000463 85b9      	LDD  R27,Y+8+1
000464 85ea      	LDD  R30,Y+10
000465 85fb      	LDD  R31,Y+10+1
000466 1bea      	SUB  R30,R26
000467 0bfb      	SBC  R31,R27
000468 87ea      	STD  Y+10,R30
000469 87fb      	STD  Y+10+1,R31
00046a cfef      	RJMP _0x202005A
                 _0x202005C:
00046b 332a      	CPI  R18,58
00046c f028      	BRLO _0x202005D
00046d ff03      	SBRS R16,3
00046e c002      	RJMP _0x202005E
00046f 5f29      	SUBI R18,-LOW(7)
000470 c001      	RJMP _0x202005F
                 _0x202005E:
000471 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000472 fd04      	SBRC R16,4
000473 c019      	RJMP _0x2020061
000474 3321      	CPI  R18,49
000475 f420      	BRSH _0x2020063
000476 85a8      	LDD  R26,Y+8
000477 85b9      	LDD  R27,Y+8+1
000478 9711      	SBIW R26,1
000479 f409      	BRNE _0x2020062
                 _0x2020063:
00047a c009      	RJMP _0x20200CD
                 _0x2020062:
00047b 1753      	CP   R21,R19
00047c f010      	BRLO _0x2020067
00047d ff00      	SBRS R16,0
00047e c001      	RJMP _0x2020068
                 _0x2020067:
00047f c011      	RJMP _0x2020066
                 _0x2020068:
000480 e220      	LDI  R18,LOW(32)
000481 ff07      	SBRS R16,7
000482 c00a      	RJMP _0x2020069
000483 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000484 6100      	ORI  R16,LOW(16)
000485 ff02      	SBRS R16,2
000486 c006      	RJMP _0x202006A
000487 7f0b      	ANDI R16,LOW(251)
000488 934a      	ST   -Y,R20
000489 d0d9      	RCALL SUBOPT_0x15
00048a 3050      	CPI  R21,0
00048b f009      	BREQ _0x202006B
00048c 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
00048d d0c8      	RCALL SUBOPT_0x13
00048e 3050      	CPI  R21,0
00048f f009      	BREQ _0x202006C
000490 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000491 5031      	SUBI R19,LOW(1)
000492 85a8      	LDD  R26,Y+8
000493 85b9      	LDD  R27,Y+8+1
000494 9712      	SBIW R26,2
000495 f008      	BRLO _0x2020059
000496 cfb8      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000497 ff00      	SBRS R16,0
000498 c007      	RJMP _0x202006D
                 _0x202006E:
000499 3050      	CPI  R21,0
00049a f029      	BREQ _0x2020070
00049b 5051      	SUBI R21,LOW(1)
00049c e2e0      	LDI  R30,LOW(32)
00049d 93ea      	ST   -Y,R30
00049e d0c4      	RCALL SUBOPT_0x15
00049f cff9      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0004a0 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0004a1 cef5      	RJMP _0x2020016
                 _0x2020018:
0004a2 85ac      	LDD  R26,Y+12
0004a3 85bd      	LDD  R27,Y+12+1
0004a4 d149      	RCALL __GETW1P
0004a5 d0da      	RCALL __LOADLOCR6
0004a6 9664      	ADIW R28,20
0004a7 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
0004a8 92ff      	PUSH R15
0004a9 2ef8      	MOV  R15,R24
0004aa 9726      	SBIW R28,6
0004ab 931a      	ST   -Y,R17
0004ac 930a      	ST   -Y,R16
0004ad 01de      	MOVW R26,R28
0004ae 9614      	ADIW R26,4
0004af d0de      	RCALL __ADDW2R15
0004b0 018d      	MOVW R16,R26
0004b1 e0e0      	LDI  R30,LOW(0)
0004b2 83ec      	STD  Y+4,R30
0004b3 83ed      	STD  Y+4+1,R30
0004b4 83ee      	STD  Y+6,R30
0004b5 83ef      	STD  Y+6+1,R30
0004b6 01de      	MOVW R26,R28
0004b7 9618      	ADIW R26,8
0004b8 d0d5      	RCALL __ADDW2R15
0004b9 d134      	RCALL __GETW1P
0004ba 93fa      	ST   -Y,R31
0004bb 93ea      	ST   -Y,R30
0004bc 931a      	ST   -Y,R17
0004bd 930a      	ST   -Y,R16
0004be e7ef      	LDI  R30,LOW(_put_usart_G101)
0004bf e0f3      	LDI  R31,HIGH(_put_usart_G101)
0004c0 93fa      	ST   -Y,R31
0004c1 93ea      	ST   -Y,R30
0004c2 01de      	MOVW R26,R28
0004c3 9618      	ADIW R26,8
0004c4 dec7      	RCALL __print_G101
0004c5 8119      	LDD  R17,Y+1
0004c6 8108      	LDD  R16,Y+0
0004c7 9628      	ADIW R28,8
0004c8 90ff      	POP  R15
0004c9 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0004ca 93ba      	ST   -Y,R27
0004cb 93aa      	ST   -Y,R26
0004cc 91a9          ld   r26,y+
0004cd 91b9          ld   r27,y+
0004ce 27ee          clr  r30
0004cf 27ff          clr  r31
                 strlen0:
0004d0 916d          ld   r22,x+
0004d1 2366          tst  r22
0004d2 f011          breq strlen1
0004d3 9631          adiw r30,1
0004d4 cffb          rjmp strlen0
                 strlen1:
0004d5 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0004d6 93ba      	ST   -Y,R27
0004d7 93aa      	ST   -Y,R26
0004d8 27aa          clr  r26
0004d9 27bb          clr  r27
0004da 91e9          ld   r30,y+
0004db 91f9          ld   r31,y+
                 strlenf0:
0004dc 9005      	lpm  r0,z+
0004dd 2000          tst  r0
0004de f011          breq strlenf1
0004df 9611          adiw r26,1
0004e0 cffb          rjmp strlenf0
                 strlenf1:
0004e1 01fd          movw r30,r26
0004e2 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _registry_ds1307:
000160           	.BYTE 0x7
                 _rx_buffer:
000167           	.BYTE 0x8
                 _ma:
00016f           	.BYTE 0xA
                 _temp:
000179           	.BYTE 0x4
                 _received_package:
00017d           	.BYTE 0xA
                 _slave_enable:
000187           	.BYTE 0x2
                 __seed_G100:
000189           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
0004e3 98c0      	CBI  0x18,0
0004e4 9ab8      	SBI  0x17,0
                +
0004e5 e081     +LDI R24 , LOW ( 1 )
                +__DELAY_USB_LOOP :
0004e6 958a     +DEC R24
0004e7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 1
0004e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0004e9 e0e0      	LDI  R30,LOW(0)
0004ea 83e8      	ST   Y,R30
0004eb 83e9      	STD  Y+1,R30
0004ec 83ea      	STD  Y+2,R30
0004ed 83eb      	STD  Y+3,R30
0004ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
0004ef ede0      	LDI  R30,LOW(208)
0004f0 93ea      	ST   -Y,R30
0004f1 e0a2      	LDI  R26,LOW(2)
0004f2 cccb      	RJMP _I2C_ReadRegister
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0004f3 81e8      	LD   R30,Y
0004f4 b9e3      	OUT  0x3,R30
0004f5 e8e4      	LDI  R30,LOW(132)
0004f6 bfe6      	OUT  0x36,R30
0004f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x4:
0004f8 de71      	RCALL _uart_char_tx
0004f9 e6a4      	LDI  R26,LOW(100)
0004fa e0b0      	LDI  R27,0
0004fb c25d      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x5:
0004fc 27bb      	CLR  R27
0004fd de2b      	RCALL _hienthi
0004fe eda0      	LDI  R26,LOW(2000)
0004ff e0b7      	LDI  R27,HIGH(2000)
000500 c258      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
000501 de27      	RCALL _hienthi
000502 eaa0      	LDI  R26,LOW(4000)
000503 e0bf      	LDI  R27,HIGH(4000)
000504 c254      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7:
000505 dbe7      	RCALL _ds18b20_gettemp
000506 93e0 0179 	STS  _temp,R30
000508 93f0 017a 	STS  _temp+1,R31
00050a 9360 017b 	STS  _temp+2,R22
00050c 9370 017c 	STS  _temp+3,R23
00050e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x8:
00050f 91e0 0179 	LDS  R30,_temp
000511 91f0 017a 	LDS  R31,_temp+1
000513 9160 017b 	LDS  R22,_temp+2
000515 9170 017c 	LDS  R23,_temp+3
000517 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
000518 e0e0      	LDI  R30,LOW(0)
000519 93ea      	ST   -Y,R30
00051a 93ea      	ST   -Y,R30
00051b 93ea      	ST   -Y,R30
00051c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
00051d e0b0      	LDI  R27,0
00051e e0ea      	LDI  R30,LOW(10)
00051f e0f0      	LDI  R31,HIGH(10)
000520 d0ac      	RCALL __DIVW21
000521 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
                +
000522 91e0 0181+LDS R30 , _received_package + ( 4 )
                 	__GETB1MN _received_package,4
000524 93ea      	ST   -Y,R30
                +
000525 91a0 0182+LDS R26 , _received_package + ( 5 )
                 	__GETB2MN _received_package,5
000527 ccb9      	RJMP _return_data_to_computer
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000528 e0e0      	LDI  R30,LOW(0)
000529 93ea      	ST   -Y,R30
00052a e0e1      	LDI  R30,LOW(1)
00052b 93ea      	ST   -Y,R30
00052c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xD:
00052d 01f6      	MOVW R30,R12
00052e 58e3      	SUBI R30,LOW(-_received_package)
00052f 4ffe      	SBCI R31,HIGH(-_received_package)
000530 8280      	ST   Z,R8
000531 01f6      	MOVW R30,R12
000532 9631      	ADIW R30,1
000533 016f      	MOVW R12,R30
000534 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000535 e0e9      	LDI  R30,LOW(9)
000536 e0f0      	LDI  R31,HIGH(9)
000537 15ec      	CP   R30,R12
000538 05fd      	CPC  R31,R13
000539 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
00053a e0e1      	LDI  R30,LOW(1)
00053b e0f0      	LDI  R31,HIGH(1)
00053c 015f      	MOVW R10,R30
00053d cccf      	RJMP _execute_query
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x10:
00053e de11      	RCALL _quet
00053f 2fe0      	MOV  R30,R16
000540 e0f0      	LDI  R31,0
000541 59e1      	SUBI R30,LOW(-_ma)
000542 4ffe      	SBCI R31,HIGH(-_ma)
000543 81a0      	LD   R26,Z
000544 de0b      	RCALL _quet
000545 2fe1      	MOV  R30,R17
000546 e0f0      	LDI  R31,0
000547 59e1      	SUBI R30,LOW(-_ma)
000548 4ffe      	SBCI R31,HIGH(-_ma)
000549 81a0      	LD   R26,Z
00054a de05      	RCALL _quet
00054b ce1b      	RJMP _day
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
00054c 81ae      	LDD  R26,Y+6
00054d 81bf      	LDD  R27,Y+6+1
00054e eee8      	LDI  R30,LOW(1000)
00054f e0f3      	LDI  R31,HIGH(1000)
000550 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
000551 e0f0      	LDI  R31,0
000552 59e1      	SUBI R30,LOW(-_ma)
000553 4ffe      	SBCI R31,HIGH(-_ma)
000554 81a0      	LD   R26,Z
000555 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x13:
000556 932a      	ST   -Y,R18
000557 85ad      	LDD  R26,Y+13
000558 85be      	LDD  R27,Y+13+1
000559 85ef      	LDD  R30,Y+15
00055a 89f8      	LDD  R31,Y+15+1
00055b 9509      	ICALL
00055c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x14:
00055d 89e8      	LDD  R30,Y+16
00055e 89f9      	LDD  R31,Y+16+1
00055f 9734      	SBIW R30,4
000560 8be8      	STD  Y+16,R30
000561 8bf9      	STD  Y+16+1,R31
000562 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x15:
000563 85ad      	LDD  R26,Y+13
000564 85be      	LDD  R27,Y+13+1
000565 85ef      	LDD  R30,Y+15
000566 89f8      	LDD  R31,Y+15+1
000567 9509      	ICALL
000568 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x16:
000569 89a8      	LDD  R26,Y+16
00056a 89b9      	LDD  R27,Y+16+1
00056b 9614      	ADIW R26,4
00056c d081      	RCALL __GETW1P
00056d 83ee      	STD  Y+6,R30
00056e 83ff      	STD  Y+6+1,R31
00056f 81ae      	LDD  R26,Y+6
000570 81bf      	LDD  R27,Y+6+1
000571 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
000572 89a8      	LDD  R26,Y+16
000573 89b9      	LDD  R27,Y+16+1
000574 9614      	ADIW R26,4
000575 d078      	RCALL __GETW1P
000576 87ea      	STD  Y+10,R30
000577 87fb      	STD  Y+10+1,R31
000578 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000579 935a      	ST   -Y,R21
                 __SAVELOCR5:
00057a 934a      	ST   -Y,R20
                 __SAVELOCR4:
00057b 933a      	ST   -Y,R19
                 __SAVELOCR3:
00057c 932a      	ST   -Y,R18
                 __SAVELOCR2:
00057d 931a      	ST   -Y,R17
00057e 930a      	ST   -Y,R16
00057f 9508      	RET
                 
                 __LOADLOCR6:
000580 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000581 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000582 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000583 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000584 8119      	LDD  R17,Y+1
000585 8108      	LD   R16,Y
000586 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000587 0fac      	ADD  R26,R28
000588 1fbd      	ADC  R27,R29
                 __INITLOC0:
000589 9005      	LPM  R0,Z+
00058a 920d      	ST   X+,R0
00058b 958a      	DEC  R24
00058c f7e1      	BRNE __INITLOC0
00058d 9508      	RET
                 
                 __ADDW2R15:
00058e 2400      	CLR  R0
00058f 0daf      	ADD  R26,R15
000590 1db0      	ADC  R27,R0
000591 9508      	RET
                 
                 __ANEGW1:
000592 95f1      	NEG  R31
000593 95e1      	NEG  R30
000594 40f0      	SBCI R31,0
000595 9508      	RET
                 
                 __ANEGD1:
000596 95f0      	COM  R31
000597 9560      	COM  R22
000598 9570      	COM  R23
000599 95e1      	NEG  R30
00059a 4fff      	SBCI R31,-1
00059b 4f6f      	SBCI R22,-1
00059c 4f7f      	SBCI R23,-1
00059d 9508      	RET
                 
                 __CWD1:
00059e 2f6f      	MOV  R22,R31
00059f 0f66      	ADD  R22,R22
0005a0 0b66      	SBC  R22,R22
0005a1 2f76      	MOV  R23,R22
0005a2 9508      	RET
                 
                 __CWD2:
0005a3 2f8b      	MOV  R24,R27
0005a4 0f88      	ADD  R24,R24
0005a5 0b88      	SBC  R24,R24
0005a6 2f98      	MOV  R25,R24
0005a7 9508      	RET
                 
                 __EQB12:
0005a8 17ea      	CP   R30,R26
0005a9 e0e1      	LDI  R30,1
0005aa f009      	BREQ __EQB12T
0005ab 27ee      	CLR  R30
                 __EQB12T:
0005ac 9508      	RET
                 
                 __NEB12:
0005ad 17ea      	CP   R30,R26
0005ae e0e1      	LDI  R30,1
0005af f409      	BRNE __NEB12T
0005b0 27ee      	CLR  R30
                 __NEB12T:
0005b1 9508      	RET
                 
                 __MULW12U:
0005b2 9ffa      	MUL  R31,R26
0005b3 2df0      	MOV  R31,R0
0005b4 9feb      	MUL  R30,R27
0005b5 0df0      	ADD  R31,R0
0005b6 9fea      	MUL  R30,R26
0005b7 2de0      	MOV  R30,R0
0005b8 0df1      	ADD  R31,R1
0005b9 9508      	RET
                 
                 __DIVW21U:
0005ba 2400      	CLR  R0
0005bb 2411      	CLR  R1
0005bc e190      	LDI  R25,16
                 __DIVW21U1:
0005bd 0faa      	LSL  R26
0005be 1fbb      	ROL  R27
0005bf 1c00      	ROL  R0
0005c0 1c11      	ROL  R1
0005c1 1a0e      	SUB  R0,R30
0005c2 0a1f      	SBC  R1,R31
0005c3 f418      	BRCC __DIVW21U2
0005c4 0e0e      	ADD  R0,R30
0005c5 1e1f      	ADC  R1,R31
0005c6 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0005c7 60a1      	SBR  R26,1
                 __DIVW21U3:
0005c8 959a      	DEC  R25
0005c9 f799      	BRNE __DIVW21U1
0005ca 01fd      	MOVW R30,R26
0005cb 01d0      	MOVW R26,R0
0005cc 9508      	RET
                 
                 __DIVW21:
0005cd d012      	RCALL __CHKSIGNW
0005ce dfeb      	RCALL __DIVW21U
0005cf f40e      	BRTC __DIVW211
0005d0 dfc1      	RCALL __ANEGW1
                 __DIVW211:
0005d1 9508      	RET
                 
                 __MODW21:
0005d2 94e8      	CLT
0005d3 ffb7      	SBRS R27,7
0005d4 c004      	RJMP __MODW211
0005d5 95b1      	NEG  R27
0005d6 95a1      	NEG  R26
0005d7 40b0      	SBCI R27,0
0005d8 9468      	SET
                 __MODW211:
0005d9 fdf7      	SBRC R31,7
0005da dfb7      	RCALL __ANEGW1
0005db dfde      	RCALL __DIVW21U
0005dc 01fd      	MOVW R30,R26
0005dd f40e      	BRTC __MODW212
0005de dfb3      	RCALL __ANEGW1
                 __MODW212:
0005df 9508      	RET
                 
                 __CHKSIGNW:
0005e0 94e8      	CLT
0005e1 fff7      	SBRS R31,7
0005e2 c002      	RJMP __CHKSW1
0005e3 dfae      	RCALL __ANEGW1
0005e4 9468      	SET
                 __CHKSW1:
0005e5 ffb7      	SBRS R27,7
0005e6 c006      	RJMP __CHKSW2
0005e7 95b1      	NEG  R27
0005e8 95a1      	NEG  R26
0005e9 40b0      	SBCI R27,0
0005ea f800      	BLD  R0,0
0005eb 9403      	INC  R0
0005ec fa00      	BST  R0,0
                 __CHKSW2:
0005ed 9508      	RET
                 
                 __GETW1P:
0005ee 91ed      	LD   R30,X+
0005ef 91fc      	LD   R31,X
0005f0 9711      	SBIW R26,1
0005f1 9508      	RET
                 
                 __PUTDP1:
0005f2 93ed      	ST   X+,R30
0005f3 93fd      	ST   X+,R31
0005f4 936d      	ST   X+,R22
0005f5 937c      	ST   X,R23
0005f6 9508      	RET
                 
                 __GETW1PF:
0005f7 9005      	LPM  R0,Z+
0005f8 91f4      	LPM  R31,Z
0005f9 2de0      	MOV  R30,R0
0005fa 9508      	RET
                 
                 __PUTPARD1:
0005fb 937a      	ST   -Y,R23
0005fc 936a      	ST   -Y,R22
0005fd 93fa      	ST   -Y,R31
0005fe 93ea      	ST   -Y,R30
0005ff 9508      	RET
                 
                 __CDF2U:
000600 9468      	SET
000601 c001      	RJMP __CDF2U0
                 __CDF2:
000602 94e8      	CLT
                 __CDF2U0:
000603 d001      	RCALL __SWAPD12
000604 d07e      	RCALL __CDF1U0
                 
                 __SWAPD12:
000605 2e18      	MOV  R1,R24
000606 2f86      	MOV  R24,R22
000607 2d61      	MOV  R22,R1
000608 2e19      	MOV  R1,R25
000609 2f97      	MOV  R25,R23
00060a 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
00060b 2e1b      	MOV  R1,R27
00060c 2fbf      	MOV  R27,R31
00060d 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00060e 2e1a      	MOV  R1,R26
00060f 2fae      	MOV  R26,R30
000610 2de1      	MOV  R30,R1
000611 9508      	RET
                 
                 __COPYMML:
000612 2799      	CLR  R25
                 __COPYMM:
000613 93ef      	PUSH R30
000614 93ff      	PUSH R31
                 __COPYMM0:
000615 9161      	LD   R22,Z+
000616 936d      	ST   X+,R22
000617 9701      	SBIW R24,1
000618 f7e1      	BRNE __COPYMM0
000619 91ff      	POP  R31
00061a 91ef      	POP  R30
00061b 9508      	RET
                 
                 __ROUND_REPACK:
00061c 2355      	TST  R21
00061d f442      	BRPL __REPACK
00061e 3850      	CPI  R21,0x80
00061f f411      	BRNE __ROUND_REPACK0
000620 ffe0      	SBRS R30,0
000621 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000622 9631      	ADIW R30,1
000623 1f69      	ADC  R22,R25
000624 1f79      	ADC  R23,R25
000625 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000626 e850      	LDI  R21,0x80
000627 2757      	EOR  R21,R23
000628 f411      	BRNE __REPACK0
000629 935f      	PUSH R21
00062a c0cf      	RJMP __ZERORES
                 __REPACK0:
00062b 3f5f      	CPI  R21,0xFF
00062c f031      	BREQ __REPACK1
00062d 0f66      	LSL  R22
00062e 0c00      	LSL  R0
00062f 9557      	ROR  R21
000630 9567      	ROR  R22
000631 2f75      	MOV  R23,R21
000632 9508      	RET
                 __REPACK1:
000633 935f      	PUSH R21
000634 2000      	TST  R0
000635 f00a      	BRMI __REPACK2
000636 c0ce      	RJMP __MAXRES
                 __REPACK2:
000637 c0c7      	RJMP __MINRES
                 
                 __UNPACK:
000638 e850      	LDI  R21,0x80
000639 2e19      	MOV  R1,R25
00063a 2215      	AND  R1,R21
00063b 0f88      	LSL  R24
00063c 1f99      	ROL  R25
00063d 2795      	EOR  R25,R21
00063e 0f55      	LSL  R21
00063f 9587      	ROR  R24
                 
                 __UNPACK1:
000640 e850      	LDI  R21,0x80
000641 2e07      	MOV  R0,R23
000642 2205      	AND  R0,R21
000643 0f66      	LSL  R22
000644 1f77      	ROL  R23
000645 2775      	EOR  R23,R21
000646 0f55      	LSL  R21
000647 9567      	ROR  R22
000648 9508      	RET
                 
                 __CFD1U:
000649 9468      	SET
00064a c001      	RJMP __CFD1U0
                 __CFD1:
00064b 94e8      	CLT
                 __CFD1U0:
00064c 935f      	PUSH R21
00064d dff2      	RCALL __UNPACK1
00064e 3870      	CPI  R23,0x80
00064f f018      	BRLO __CFD10
000650 3f7f      	CPI  R23,0xFF
000651 f408      	BRCC __CFD10
000652 c0a7      	RJMP __ZERORES
                 __CFD10:
000653 e156      	LDI  R21,22
000654 1b57      	SUB  R21,R23
000655 f4aa      	BRPL __CFD11
000656 9551      	NEG  R21
000657 3058      	CPI  R21,8
000658 f40e      	BRTC __CFD19
000659 3059      	CPI  R21,9
                 __CFD19:
00065a f030      	BRLO __CFD17
00065b efef      	SER  R30
00065c efff      	SER  R31
00065d ef6f      	SER  R22
00065e e77f      	LDI  R23,0x7F
00065f f977      	BLD  R23,7
000660 c01a      	RJMP __CFD15
                 __CFD17:
000661 2777      	CLR  R23
000662 2355      	TST  R21
000663 f0b9      	BREQ __CFD15
                 __CFD18:
000664 0fee      	LSL  R30
000665 1fff      	ROL  R31
000666 1f66      	ROL  R22
000667 1f77      	ROL  R23
000668 955a      	DEC  R21
000669 f7d1      	BRNE __CFD18
00066a c010      	RJMP __CFD15
                 __CFD11:
00066b 2777      	CLR  R23
                 __CFD12:
00066c 3058      	CPI  R21,8
00066d f028      	BRLO __CFD13
00066e 2fef      	MOV  R30,R31
00066f 2ff6      	MOV  R31,R22
000670 2f67      	MOV  R22,R23
000671 5058      	SUBI R21,8
000672 cff9      	RJMP __CFD12
                 __CFD13:
000673 2355      	TST  R21
000674 f031      	BREQ __CFD15
                 __CFD14:
000675 9576      	LSR  R23
000676 9567      	ROR  R22
000677 95f7      	ROR  R31
000678 95e7      	ROR  R30
000679 955a      	DEC  R21
00067a f7d1      	BRNE __CFD14
                 __CFD15:
00067b 2000      	TST  R0
00067c f40a      	BRPL __CFD16
00067d df18      	RCALL __ANEGD1
                 __CFD16:
00067e 915f      	POP  R21
00067f 9508      	RET
                 
                 __CDF1U:
000680 9468      	SET
000681 c001      	RJMP __CDF1U0
                 __CDF1:
000682 94e8      	CLT
                 __CDF1U0:
000683 9730      	SBIW R30,0
000684 4060      	SBCI R22,0
000685 4070      	SBCI R23,0
000686 f0b1      	BREQ __CDF10
000687 2400      	CLR  R0
000688 f026      	BRTS __CDF11
000689 2377      	TST  R23
00068a f412      	BRPL __CDF11
00068b 9400      	COM  R0
00068c df09      	RCALL __ANEGD1
                 __CDF11:
00068d 2e17      	MOV  R1,R23
00068e e17e      	LDI  R23,30
00068f 2011      	TST  R1
                 __CDF12:
000690 f032      	BRMI __CDF13
000691 957a      	DEC  R23
000692 0fee      	LSL  R30
000693 1fff      	ROL  R31
000694 1f66      	ROL  R22
000695 1c11      	ROL  R1
000696 cff9      	RJMP __CDF12
                 __CDF13:
000697 2fef      	MOV  R30,R31
000698 2ff6      	MOV  R31,R22
000699 2d61      	MOV  R22,R1
00069a 935f      	PUSH R21
00069b df8a      	RCALL __REPACK
00069c 915f      	POP  R21
                 __CDF10:
00069d 9508      	RET
                 
                 __SWAPACC:
00069e 934f      	PUSH R20
00069f 01af      	MOVW R20,R30
0006a0 01fd      	MOVW R30,R26
0006a1 01da      	MOVW R26,R20
0006a2 01ab      	MOVW R20,R22
0006a3 01bc      	MOVW R22,R24
0006a4 01ca      	MOVW R24,R20
0006a5 2d40      	MOV  R20,R0
0006a6 2c01      	MOV  R0,R1
0006a7 2e14      	MOV  R1,R20
0006a8 914f      	POP  R20
0006a9 9508      	RET
                 
                 __UADD12:
0006aa 0fea      	ADD  R30,R26
0006ab 1ffb      	ADC  R31,R27
0006ac 1f68      	ADC  R22,R24
0006ad 9508      	RET
                 
                 __NEGMAN1:
0006ae 95e0      	COM  R30
0006af 95f0      	COM  R31
0006b0 9560      	COM  R22
0006b1 5fef      	SUBI R30,-1
0006b2 4fff      	SBCI R31,-1
0006b3 4f6f      	SBCI R22,-1
0006b4 9508      	RET
                 
                 __SUBF12:
0006b5 935f      	PUSH R21
0006b6 df81      	RCALL __UNPACK
0006b7 3890      	CPI  R25,0x80
0006b8 f171      	BREQ __ADDF129
0006b9 e850      	LDI  R21,0x80
0006ba 2615      	EOR  R1,R21
                 
0006bb c004      	RJMP __ADDF120
                 
                 __ADDF12:
0006bc 935f      	PUSH R21
0006bd df7a      	RCALL __UNPACK
0006be 3890      	CPI  R25,0x80
0006bf f139      	BREQ __ADDF129
                 
                 __ADDF120:
0006c0 3870      	CPI  R23,0x80
0006c1 f121      	BREQ __ADDF128
                 __ADDF121:
0006c2 2f57      	MOV  R21,R23
0006c3 1b59      	SUB  R21,R25
0006c4 f12b      	BRVS __ADDF1211
0006c5 f412      	BRPL __ADDF122
0006c6 dfd7      	RCALL __SWAPACC
0006c7 cffa      	RJMP __ADDF121
                 __ADDF122:
0006c8 3158      	CPI  R21,24
0006c9 f018      	BRLO __ADDF123
0006ca 27aa      	CLR  R26
0006cb 27bb      	CLR  R27
0006cc 2788      	CLR  R24
                 __ADDF123:
0006cd 3058      	CPI  R21,8
0006ce f028      	BRLO __ADDF124
0006cf 2fab      	MOV  R26,R27
0006d0 2fb8      	MOV  R27,R24
0006d1 2788      	CLR  R24
0006d2 5058      	SUBI R21,8
0006d3 cff9      	RJMP __ADDF123
                 __ADDF124:
0006d4 2355      	TST  R21
0006d5 f029      	BREQ __ADDF126
                 __ADDF125:
0006d6 9586      	LSR  R24
0006d7 95b7      	ROR  R27
0006d8 95a7      	ROR  R26
0006d9 955a      	DEC  R21
0006da f7d9      	BRNE __ADDF125
                 __ADDF126:
0006db 2d50      	MOV  R21,R0
0006dc 2551      	EOR  R21,R1
0006dd f072      	BRMI __ADDF127
0006de dfcb      	RCALL __UADD12
0006df f438      	BRCC __ADDF129
0006e0 9567      	ROR  R22
0006e1 95f7      	ROR  R31
0006e2 95e7      	ROR  R30
0006e3 9573      	INC  R23
0006e4 f413      	BRVC __ADDF129
0006e5 c01f      	RJMP __MAXRES
                 __ADDF128:
0006e6 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0006e7 df3e      	RCALL __REPACK
0006e8 915f      	POP  R21
0006e9 9508      	RET
                 __ADDF1211:
0006ea f7d8      	BRCC __ADDF128
0006eb cffb      	RJMP __ADDF129
                 __ADDF127:
0006ec 1bea      	SUB  R30,R26
0006ed 0bfb      	SBC  R31,R27
0006ee 0b68      	SBC  R22,R24
0006ef f051      	BREQ __ZERORES
0006f0 f410      	BRCC __ADDF1210
0006f1 9400      	COM  R0
0006f2 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0006f3 2366      	TST  R22
0006f4 f392      	BRMI __ADDF129
0006f5 0fee      	LSL  R30
0006f6 1fff      	ROL  R31
0006f7 1f66      	ROL  R22
0006f8 957a      	DEC  R23
0006f9 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0006fa 27ee      	CLR  R30
0006fb 27ff      	CLR  R31
0006fc 01bf      	MOVW R22,R30
0006fd 915f      	POP  R21
0006fe 9508      	RET
                 
                 __MINRES:
0006ff efef      	SER  R30
000700 efff      	SER  R31
000701 e76f      	LDI  R22,0x7F
000702 ef7f      	SER  R23
000703 915f      	POP  R21
000704 9508      	RET
                 
                 __MAXRES:
000705 efef      	SER  R30
000706 efff      	SER  R31
000707 e76f      	LDI  R22,0x7F
000708 e77f      	LDI  R23,0x7F
000709 915f      	POP  R21
00070a 9508      	RET
                 
                 __MULF12:
00070b 935f      	PUSH R21
00070c df2b      	RCALL __UNPACK
00070d 3870      	CPI  R23,0x80
00070e f359      	BREQ __ZERORES
00070f 3890      	CPI  R25,0x80
000710 f349      	BREQ __ZERORES
000711 2401      	EOR  R0,R1
000712 9408      	SEC
000713 1f79      	ADC  R23,R25
000714 f423      	BRVC __MULF124
000715 f324      	BRLT __ZERORES
                 __MULF125:
000716 2000      	TST  R0
000717 f33a      	BRMI __MINRES
000718 cfec      	RJMP __MAXRES
                 __MULF124:
000719 920f      	PUSH R0
00071a 931f      	PUSH R17
00071b 932f      	PUSH R18
00071c 933f      	PUSH R19
00071d 934f      	PUSH R20
00071e 2711      	CLR  R17
00071f 2722      	CLR  R18
000720 2799      	CLR  R25
000721 9f68      	MUL  R22,R24
000722 01a0      	MOVW R20,R0
000723 9f8f      	MUL  R24,R31
000724 2d30      	MOV  R19,R0
000725 0d41      	ADD  R20,R1
000726 1f59      	ADC  R21,R25
000727 9f6b      	MUL  R22,R27
000728 0d30      	ADD  R19,R0
000729 1d41      	ADC  R20,R1
00072a 1f59      	ADC  R21,R25
00072b 9f8e      	MUL  R24,R30
00072c d027      	RCALL __MULF126
00072d 9fbf      	MUL  R27,R31
00072e d025      	RCALL __MULF126
00072f 9f6a      	MUL  R22,R26
000730 d023      	RCALL __MULF126
000731 9fbe      	MUL  R27,R30
000732 d01d      	RCALL __MULF127
000733 9faf      	MUL  R26,R31
000734 d01b      	RCALL __MULF127
000735 9fae      	MUL  R26,R30
000736 0d11      	ADD  R17,R1
000737 1f29      	ADC  R18,R25
000738 1f39      	ADC  R19,R25
000739 1f49      	ADC  R20,R25
00073a 1f59      	ADC  R21,R25
00073b 2fe3      	MOV  R30,R19
00073c 2ff4      	MOV  R31,R20
00073d 2f65      	MOV  R22,R21
00073e 2f52      	MOV  R21,R18
00073f 914f      	POP  R20
000740 913f      	POP  R19
000741 912f      	POP  R18
000742 911f      	POP  R17
000743 900f      	POP  R0
000744 2366      	TST  R22
000745 f02a      	BRMI __MULF122
000746 0f55      	LSL  R21
000747 1fee      	ROL  R30
000748 1fff      	ROL  R31
000749 1f66      	ROL  R22
00074a c002      	RJMP __MULF123
                 __MULF122:
00074b 9573      	INC  R23
00074c f24b      	BRVS __MULF125
                 __MULF123:
00074d dece      	RCALL __ROUND_REPACK
00074e 915f      	POP  R21
00074f 9508      	RET
                 
                 __MULF127:
000750 0d10      	ADD  R17,R0
000751 1d21      	ADC  R18,R1
000752 1f39      	ADC  R19,R25
000753 c002      	RJMP __MULF128
                 __MULF126:
000754 0d20      	ADD  R18,R0
000755 1d31      	ADC  R19,R1
                 __MULF128:
000756 1f49      	ADC  R20,R25
000757 1f59      	ADC  R21,R25
000758 9508      	RET
                 
                 _delay_ms:
000759 9610      	adiw r26,0
00075a f039      	breq __delay_ms1
                 __delay_ms0:
00075b 95a8      	wdr
                +
00075c ee88     +LDI R24 , LOW ( 0x3E8 )
00075d e093     +LDI R25 , HIGH ( 0x3E8 )
                +__DELAY_USW_LOOP :
00075e 9701     +SBIW R24 , 1
00075f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3E8
000760 9711      	sbiw r26,1
000761 f7c9      	brne __delay_ms0
                 __delay_ms1:
000762 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  49 r1 :  33 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   5 r9 :   0 r10:   3 r11:   2 r12:   8 r13:   4 r14:   0 r15:   6 
r16:  51 r17:  64 r18:  38 r19:  18 r20:  26 r21:  76 r22:  58 r23:  45 
r24:  57 r25:  36 r26: 190 r27:  74 r28:  28 r29:   2 r30: 402 r31: 122 
x  :  19 y  : 270 z  :  19 
Registers used: 27 out of 35 (77.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  21 add   :  16 
adiw  :  28 and   :   2 andi  :  25 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  36 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   1 brmi  :   6 brne  :  45 brpl  :   6 brsh  :   3 brtc  :   3 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   1 call  :   0 
cbi   :  11 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  33 cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :   8 
cp    :  11 cpc   :   4 cpi   :  52 cpse  :   0 dec   :  13 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  11 inc   :   3 jmp   :  28 ld    :  40 ldd   :  98 ldi   : 214 
lds   :  23 lpm   :  15 lsl   :  12 lsr   :   4 mov   :  83 movw  :  32 
mul   :  13 muls  :   1 mulsu :   0 neg   :   8 nop   :   0 or    :   3 
ori   :   6 out   :  57 pop   :  18 push  :  18 rcall : 210 ret   :  74 
reti  :   1 rjmp  :  98 rol   :  16 ror   :  14 sbc   :   6 sbci  :  14 
sbi   :   7 sbic  :   1 sbis  :   3 sbiw  :  21 sbr   :   1 sbrc  :   4 
sbrs  :  14 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   9 
ses   :   0 set   :   5 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 106 std   :  51 sts   :   8 sub   :   5 subi  :  29 swap  :   3 
tst   :  14 wdr   :   1 
Instructions used: 78 out of 116 (67.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000ec6   3654    128   3782   16384  23.1%
[.dseg] 0x000060 0x00018d      0     45     45    1024   4.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 13 warnings
