
AVRASM ver. 2.1.30  D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm Thu May 12 23:01:14 2016

D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1095): warning: Register r5 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1096): warning: Register r4 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1097): warning: Register r7 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1098): warning: Register r6 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1099): warning: Register r9 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1100): warning: Register r8 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1101): warning: Register r11 already defined by the .DEF directive
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1102): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.24 Evaluation
                 ;(C) Copyright 1998-2015 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _kytu=R6
                 	.DEF _b=R9
                 	.DEF _ttemp0=R8
                 	.DEF _ttemp1=R11
                 	.DEF _my_variable=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0081 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 01e7 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0200      	.DB  0x0,0x0,0x0,0x2
                 
                 _0xA0006:
000036 f9c0
000037 b0a4
000038 9299
000039 f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
00003a 9080      	.DB  0x80,0x90
                 _0xA0009:
00003b 0f1e
00003c 050a
00003d 050c
00003e 0110      	.DB  0x1E,0xF,0xA,0x5,0xC,0x5,0x10,0x1
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1152): warning: .cseg .db misalignment - padding zero byte
00003f 0001      	.DB  0x1
                 _0xA0000:
000040 4e20
000041 6968
000042 7465
000043 6420      	.DB  0x20,0x4E,0x68,0x69,0x65,0x74,0x20,0x64
000044 206f
000045 6968
000046 6e65
000047 7420      	.DB  0x6F,0x20,0x68,0x69,0x65,0x6E,0x20,0x74
000048 6961
000049 6c20
00004a 2061
00004b 6425      	.DB  0x61,0x69,0x20,0x6C,0x61,0x20,0x25,0x64
00004c 6f20
00004d 0a43
00004e 000d
00004f 4720      	.DB  0x20,0x6F,0x43,0xA,0xD,0x0,0x20,0x47
000050 6f69
000051 6820
000052 6569
000053 206e      	.DB  0x69,0x6F,0x20,0x68,0x69,0x65,0x6E,0x20
000054 6174
000055 2069
000056 616c
000057 2520      	.DB  0x74,0x61,0x69,0x20,0x6C,0x61,0x20,0x25
000058 3a64
000059 6425
00005a 253a
00005b 0a64      	.DB  0x64,0x3A,0x25,0x64,0x3A,0x25,0x64,0xA
00005c 000d
00005d 684e
00005e 6569
00005f 2074      	.DB  0xD,0x0,0x4E,0x68,0x69,0x65,0x74,0x20
000060 6f64
000061 6820
000062 6569
000063 206e      	.DB  0x64,0x6F,0x20,0x68,0x69,0x65,0x6E,0x20
000064 6174
000065 2069
000066 616c
000067 2520      	.DB  0x74,0x61,0x69,0x20,0x6C,0x61,0x20,0x25
000068 0066
000069 6978
00006a 206e
00006b 6863      	.DB  0x66,0x0,0x78,0x69,0x6E,0x20,0x63,0x68
00006c 6f61
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1165): warning: .cseg .db misalignment - padding zero byte
00006d 0000      	.DB  0x61,0x6F,0x0
                 _0x2000060:
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1167): warning: .cseg .db misalignment - padding zero byte
00006e 0001      	.DB  0x1
                 _0x2000000:
00006f 4e2d
000070 4e41
000071 4900
000072 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Projects\avr projects\AvrEmbeddedC\List\avrembededc.asm(1170): warning: .cseg .db misalignment - padding zero byte
000073 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000074 0001      	.DW  0x01
000075 0002      	.DW  0x02
000076 0066      	.DW  __REG_BIT_VARS*2
                 
000077 0004      	.DW  0x04
000078 0006      	.DW  0x06
000079 0068      	.DW  __REG_VARS*2
                 
00007a 000a      	.DW  0x0A
00007b 016f      	.DW  _ma
00007c 006c      	.DW  _0xA0006*2
                 
00007d 0001      	.DW  0x01
00007e 017d      	.DW  __seed_G100
00007f 00dc      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
000080 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000081 94f8      	CLI
000082 27ee      	CLR  R30
000083 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000084 e0f1      	LDI  R31,1
000085 bffb      	OUT  GICR,R31
000086 bfeb      	OUT  GICR,R30
000087 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000088 e1f8      	LDI  R31,0x18
000089 bdf1      	OUT  WDTCR,R31
00008a bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00008b e08d      	LDI  R24,(14-2)+1
00008c e0a2      	LDI  R26,2
00008d 27bb      	CLR  R27
                 __CLEAR_REG:
00008e 93ed      	ST   X+,R30
00008f 958a      	DEC  R24
000090 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000091 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000092 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000093 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000094 93ed      	ST   X+,R30
000095 9701      	SBIW R24,1
000096 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000097 eee8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000098 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000099 9185      	LPM  R24,Z+
00009a 9195      	LPM  R25,Z+
00009b 9700      	SBIW R24,0
00009c f061      	BREQ __GLOBAL_INI_END
00009d 91a5      	LPM  R26,Z+
00009e 91b5      	LPM  R27,Z+
00009f 9005      	LPM  R0,Z+
0000a0 9015      	LPM  R1,Z+
0000a1 01bf      	MOVW R22,R30
0000a2 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000a3 9005      	LPM  R0,Z+
0000a4 920d      	ST   X+,R0
0000a5 9701      	SBIW R24,1
0000a6 f7e1      	BRNE __GLOBAL_INI_LOOP
0000a7 01fb      	MOVW R30,R22
0000a8 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a9 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000aa bfed      	OUT  SPL,R30
0000ab e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000ac bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000ad e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000ae e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000af 940c 021d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <myds18b20ver1.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// the following arrays specify the addresses of *my* ds18b20 devices
                 ;// substitute the address of your devices before using.
                 ;
                 ;//byte rom0[] = {0x28, 0xE1, 0x21, 0xA3, 0x02, 0x00, 0x00, 0x5B};
                 ;//byte rom1[] = {0x28, 0x1B, 0x21, 0x30, 0x05, 0x00, 0x00, 0xF5};
                 ;
                 ;byte therm_Reset() {
                 ; 0000 0009 byte therm_Reset() {
                 
                 	.CSEG
                 ; 0000 000A     byte i;
                 ; 0000 000B     THERM_OUTPUT(); // set pin as output
                 ;	i -> R17
                 ; 0000 000C     THERM_LOW(); // pull pin low for 480uS
                 ; 0000 000D     delay_us(480);
                 ; 0000 000E     THERM_INPUT(); // set pin as input
                 ; 0000 000F     delay_us(60); // wait for 60uS
                 ; 0000 0010     i = THERM_READ(); // get pin value
                 ; 0000 0011     delay_us(420); // wait for rest of 480uS period
                 ; 0000 0012     return i;
                 ; 0000 0013 }
                 ;
                 ;void therm_WriteBit(byte _bit) {
                 ; 0000 0015 void therm_WriteBit(byte _bit) {
                 ; 0000 0016     THERM_OUTPUT(); // set pin as output
                 ;	_bit -> Y+0
                 ; 0000 0017     THERM_LOW(); // pull pin low for 1uS
                 ; 0000 0018     delay_us(1);
                 ; 0000 0019     if (_bit) THERM_INPUT(); // to write 1, float pin
                 ; 0000 001A     delay_us(60);
                 ; 0000 001B     THERM_INPUT(); // wait 60uS & release pin
                 ; 0000 001C }
                 ;
                 ;byte therm_ReadBit() {
                 ; 0000 001E byte therm_ReadBit() {
                 ; 0000 001F     byte _bit = 0;
                 ; 0000 0020     THERM_OUTPUT(); // set pin as output
                 ;	_bit -> R17
                 ; 0000 0021     THERM_LOW(); // pull pin low for 1uS
                 ; 0000 0022     delay_us(1);
                 ; 0000 0023     THERM_INPUT(); // release pin & wait 14 uS
                 ; 0000 0024     delay_us(14);
                 ; 0000 0025     if (THERM_READ()) _bit = 1; // read pin value
                 ; 0000 0026     delay_us(45); // wait rest of 60uS period
                 ; 0000 0027     return _bit;
                 ; 0000 0028 }
                 ;
                 ;void therm_WriteByte(byte data) {
                 ; 0000 002A void therm_WriteByte(byte data) {
                 ; 0000 002B     byte i = 8;
                 ; 0000 002C     while (i--) // for 8 bits:
                 ;	data -> Y+1
                 ;	i -> R17
                 ; 0000 002D     {
                 ; 0000 002E         therm_WriteBit(data & 1); // send least significant bit
                 ; 0000 002F         data >>= 1; // shift all bits right
                 ; 0000 0030     }
                 ; 0000 0031 }
                 ;
                 ;byte therm_ReadByte() {
                 ; 0000 0033 byte therm_ReadByte() {
                 ; 0000 0034     byte i = 8, data = 0;
                 ; 0000 0035     while (i--) // for 8 bits:
                 ;	i -> R17
                 ;	data -> R16
                 ; 0000 0036     {
                 ; 0000 0037         data >>= 1; // shift all bits right
                 ; 0000 0038         data |= (therm_ReadBit() << 7); // get next bit (LSB first)
                 ; 0000 0039     }
                 ; 0000 003A     return data;
                 ; 0000 003B }
                 ;
                 ;//void therm_MatchRom(byte rom[]) {
                 ;//    byte i;
                 ;//    therm_WriteByte(THERM_MATCHROM);
                 ;//    for (i = 0; i < 8; i++)
                 ;//        therm_WriteByte(rom[i]);
                 ;//}
                 ;
                 ;void therm_ReadTempRaw(byte id[], byte *t0, byte *t1)
                 ; 0000 0045 // Returns the two temperature bytes from the scratchpad
                 ; 0000 0046 {
                 ; 0000 0047 //    therm_Reset(); // skip ROM & start temp conversion
                 ; 0000 0048 
                 ; 0000 0049     //    if (id) therm_MatchRom(id);
                 ; 0000 004A     //    else therm_WriteByte(THERM_SKIPROM);
                 ; 0000 004B     //    therm_WriteByte(THERM_CONVERTTEMP);
                 ; 0000 004C     //    while (!therm_ReadBit()); // wait until conversion completed
                 ; 0000 004D     //    therm_Reset(); // read first two bytes from scratchpad
                 ; 0000 004E     //    if (id) therm_MatchRom(id);
                 ; 0000 004F     //    else therm_WriteByte(THERM_SKIPROM);
                 ; 0000 0050 
                 ; 0000 0051     therm_Reset(); // skip ROM & start temp conversion
                 ;	id -> Y+4
                 ;	*t0 -> Y+2
                 ;	*t1 -> Y+0
                 ; 0000 0052     therm_WriteByte(THERM_SKIPROM);
                 ; 0000 0053     therm_WriteByte(THERM_CONVERTTEMP);
                 ; 0000 0054     while (!therm_ReadBit()); // wait until conversion completed
                 ; 0000 0055 
                 ; 0000 0056     therm_Reset(); // read first two bytes from scratchpad
                 ; 0000 0057     therm_WriteByte(THERM_SKIPROM);
                 ; 0000 0058 
                 ; 0000 0059     therm_WriteByte(THERM_READSCRATCH);
                 ; 0000 005A     *t0 = therm_ReadByte(); // first byte
                 ; 0000 005B     *t1 = therm_ReadByte(); // second byte
                 ; 0000 005C }
                 ;
                 ;void therm_ReadTempC(byte id[], int *whole, int *decimal)
                 ; 0000 005F // returns temperature in Celsius as WW.DDDD, where W=whole & D=decimal
                 ; 0000 0060 {
                 ; 0000 0061     byte t0, t1;
                 ; 0000 0062     therm_ReadTempRaw(id, &t0, &t1); // get temperature values
                 ;	id -> Y+6
                 ;	*whole -> Y+4
                 ;	*decimal -> Y+2
                 ;	t0 -> R17
                 ;	t1 -> R16
                 ; 0000 0063     *whole = (t1 & 0x07) << 4; // grab lower 3 bits of t1
                 ; 0000 0064     *whole |= t0 >> 4; // and upper 4 bits of t0
                 ; 0000 0065     *decimal = t0 & 0x0F; // decimals in lower 4 bits of t0
                 ; 0000 0066     *decimal *= 625; // conversion factor for 12-bit resolution
                 ; 0000 0067 }
                 ;
                 ;void therm_ReadTempF(byte id[], int *whole, int *decimal)
                 ; 0000 006A // returns temperature in Fahrenheit as WW.D, where W=whole & D=decimal
                 ; 0000 006B {
                 ; 0000 006C     byte t0, t1;
                 ; 0000 006D     int t16, t2, f10;
                 ; 0000 006E     therm_ReadTempRaw(id, &t0, &t1); // get temperature values
                 ;	id -> Y+12
                 ;	*whole -> Y+10
                 ;	*decimal -> Y+8
                 ;	t0 -> R17
                 ;	t1 -> R16
                 ;	t16 -> R18,R19
                 ;	t2 -> R20,R21
                 ;	f10 -> Y+6
                 ; 0000 006F     t16 = (t1 << 8) + t0; // result is temp*16, in celcius
                 ; 0000 0070     t2 = t16 / 8; // get t*2, with fractional part lost
                 ; 0000 0071     f10 = t16 + t2 + 320; // F=1.8C+32, so 10F = 18C+320 = 16C + 2C + 320
                 ; 0000 0072     *whole = f10 / 10; // get whole part
                 ; 0000 0073     *decimal = f10 % 10; // get fractional part
                 ; 0000 0074 }
                 ;
                 ;//inline __attribute__((gnu_inline)) void quickDelay(int delay)
                 ;//// this routine will pause 0.25uS per delay unit
                 ;//// for testing only; use _us_Delay() routine for >1uS delays
                 ;//{
                 ;//    while (delay--) // uses sbiw to subtract 1 from 16bit word
                 ;//        asm volatile("nop"); // nop, sbiw, brne = 4 cycles = 0.25 uS
                 ;//}
                 ;
                 ;// ---------------------------------------------------------------------------
                 ;// ROM READER PROGRAM
                 ;
                 ;byte RomReaderProgram()
                 ; 0000 0082 // Read the ID of the attached Dallas 18B20 device
                 ; 0000 0083 // Note: only ONE device should be on the bus.
                 ; 0000 0084 {
                 ; 0000 0085     byte i;
                 ; 0000 0086     byte data;
                 ; 0000 0087     //    LCD_String("ID (ROM) Reader:");
                 ; 0000 0088 //    while (1) {
                 ; 0000 0089         //        LCD_Line(1);
                 ; 0000 008A         // write 64-bit ROM code on first LCD line
                 ; 0000 008B         therm_Reset();
                 ;	i -> R17
                 ;	data -> R16
                 ; 0000 008C         therm_WriteByte(THERM_READROM);
                 ; 0000 008D //        for (i = 0; i < 8; i++) {
                 ; 0000 008E             data = therm_ReadByte();
                 ; 0000 008F             //            LCD_HexByte(data);
                 ; 0000 0090 //        }
                 ; 0000 0091         //        msDelay(1000); // do a read every second
                 ; 0000 0092 //    }
                 ; 0000 0093         return data;
                 ; 0000 0094 }
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#include <myds18b20ver2.h>
                 ;
                 ;/*
                 ; * ds18b20 init
                 ; */
                 ;uint8_t ds18b20_reset(void) {
                 ; 0001 000A uint8_t ds18b20_reset(void) {
                 
                 	.CSEG
                 _ds18b20_reset:
                 ; .FSTART _ds18b20_reset
                 ; 0001 000B 	uint8_t i;
                 ; 0001 000C 
                 ; 0001 000D 	//low for 480us
                 ; 0001 000E 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
0000b1 931a      	ST   -Y,R17
                 ;	i -> R17
0000b2 98c0      	CBI  0x18,0
                 ; 0001 000F 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
0000b3 9ab8      	SBI  0x17,0
                 ; 0001 0010 	delay_us(480);
                +
0000b4 ee80     +LDI R24 , LOW ( 480 )
0000b5 e091     +LDI R25 , HIGH ( 480 )
                +__DELAY_USW_LOOP :
0000b6 9701     +SBIW R24 , 1
0000b7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 480
                 ; 0001 0011 
                 ; 0001 0012 	//release line and wait for 60uS
                 ; 0001 0013 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
0000b8 98b8      	CBI  0x17,0
                 ; 0001 0014 	delay_us(60);
                +
0000b9 e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
0000ba 958a     +DEC R24
0000bb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0001 0015 
                 ; 0001 0016 	//get value and wait 420us
                 ; 0001 0017 	i = (DS18B20_PIN & (1<<DS18B20_DQ));
0000bc b3e6      	IN   R30,0x16
0000bd 70e1      	ANDI R30,LOW(0x1)
0000be 2f1e      	MOV  R17,R30
                 ; 0001 0018 	delay_us(420);
                +
0000bf ea84     +LDI R24 , LOW ( 420 )
0000c0 e091     +LDI R25 , HIGH ( 420 )
                +__DELAY_USW_LOOP :
0000c1 9701     +SBIW R24 , 1
0000c2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 420
                 ; 0001 0019 
                 ; 0001 001A 	//return the read value, 0=ok, 1=error
                 ; 0001 001B 	return i;
0000c3 940c 021a 	JMP  _0x20A0004
                 ; 0001 001C }
                 ; .FEND
                 ;
                 ;/*
                 ; * write one bit
                 ; */
                 ;void ds18b20_writebit(uint8_t _bit){
                 ; 0001 0021 void ds18b20_writebit(uint8_t _bit){
                 _ds18b20_writebit:
                 ; .FSTART _ds18b20_writebit
                 ; 0001 0022 	//low for 1uS
                 ; 0001 0023 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
0000c5 93aa      	ST   -Y,R26
                 ;	_bit -> Y+0
0000c6 d38b      	RCALL SUBOPT_0x0
                 ; 0001 0024 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
                 ; 0001 0025 	delay_us(1);
                 ; 0001 0026 
                 ; 0001 0027 	//if we want to write 1, release the line (if not will keep low)
                 ; 0001 0028 	if(_bit)
0000c7 81e8      	LD   R30,Y
0000c8 30e0      	CPI  R30,0
0000c9 f009      	BREQ _0x20003
                 ; 0001 0029 		DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
0000ca 98b8      	CBI  0x17,0
                 ; 0001 002A 
                 ; 0001 002B 	//wait 60uS and release the line
                 ; 0001 002C 	delay_us(60);
                 _0x20003:
                +
0000cb e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
0000cc 958a     +DEC R24
0000cd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0001 002D 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
0000ce 98b8      	CBI  0x17,0
                 ; 0001 002E }
0000cf 940c 02ec 	JMP  _0x20A0002
                 ; .FEND
                 ;
                 ;/*
                 ; * read one bit
                 ; */
                 ;uint8_t ds18b20_readbit(void){
                 ; 0001 0033 uint8_t ds18b20_readbit(void){
                 _ds18b20_readbit:
                 ; .FSTART _ds18b20_readbit
                 ; 0001 0034 	uint8_t _bit=0;
                 ; 0001 0035 
                 ; 0001 0036 	//low for 1uS
                 ; 0001 0037 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
0000d1 931a      	ST   -Y,R17
                 ;	_bit -> R17
0000d2 e010      	LDI  R17,0
0000d3 d37e      	RCALL SUBOPT_0x0
                 ; 0001 0038 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
                 ; 0001 0039 	delay_us(1);
                 ; 0001 003A 
                 ; 0001 003B 	//release line and wait for 14uS
                 ; 0001 003C 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
0000d4 98b8      	CBI  0x17,0
                 ; 0001 003D 	delay_us(14);
                +
0000d5 e183     +LDI R24 , LOW ( 19 )
                +__DELAY_USB_LOOP :
0000d6 958a     +DEC R24
0000d7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 19
                 ; 0001 003E 
                 ; 0001 003F 	//read the value
                 ; 0001 0040 	if(DS18B20_PIN & (1<<DS18B20_DQ))
0000d8 99b0      	SBIC 0x16,0
                 ; 0001 0041 		_bit=1;
0000d9 e011      	LDI  R17,LOW(1)
                 ; 0001 0042 
                 ; 0001 0043 	//wait 45uS and return read value
                 ; 0001 0044 	delay_us(45);
                +
0000da e38c     +LDI R24 , LOW ( 60 )
                +__DELAY_USB_LOOP :
0000db 958a     +DEC R24
0000dc f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 60
                 ; 0001 0045 	return _bit;
0000dd 940c 021a 	JMP  _0x20A0004
                 ; 0001 0046 }
                 ; .FEND
                 ;
                 ;/*
                 ; * write one byte
                 ; */
                 ;void ds18b20_writebyte(uint8_t _byte){
                 ; 0001 004B void ds18b20_writebyte(uint8_t _byte){
                 _ds18b20_writebyte:
                 ; .FSTART _ds18b20_writebyte
                 ; 0001 004C 	uint8_t i=8;
                 ; 0001 004D 	while(i--){
0000df 93aa      	ST   -Y,R26
0000e0 931a      	ST   -Y,R17
                 ;	_byte -> Y+1
                 ;	i -> R17
0000e1 e018      	LDI  R17,8
                 _0x20005:
0000e2 2fe1      	MOV  R30,R17
0000e3 5011      	SUBI R17,1
0000e4 30e0      	CPI  R30,0
0000e5 f041      	BREQ _0x20007
                 ; 0001 004E 		ds18b20_writebit(_byte&1);
0000e6 81e9      	LDD  R30,Y+1
0000e7 70e1      	ANDI R30,LOW(0x1)
0000e8 2fae      	MOV  R26,R30
0000e9 dfdb      	RCALL _ds18b20_writebit
                 ; 0001 004F 		_byte >>= 1;
0000ea 81e9      	LDD  R30,Y+1
0000eb 95e6      	LSR  R30
0000ec 83e9      	STD  Y+1,R30
                 ; 0001 0050 	}
0000ed cff4      	RJMP _0x20005
                 _0x20007:
                 ; 0001 0051 }
0000ee 8118      	LDD  R17,Y+0
0000ef 9622      	ADIW R28,2
0000f0 9508      	RET
                 ; .FEND
                 ;
                 ;/*
                 ; * read one byte
                 ; */
                 ;uint8_t ds18b20_readbyte(void){
                 ; 0001 0056 uint8_t ds18b20_readbyte(void){
                 _ds18b20_readbyte:
                 ; .FSTART _ds18b20_readbyte
                 ; 0001 0057 	uint8_t i=8, n=0;
                 ; 0001 0058 	while(i--){
0000f1 931a      	ST   -Y,R17
0000f2 930a      	ST   -Y,R16
                 ;	i -> R17
                 ;	n -> R16
0000f3 e018      	LDI  R17,8
0000f4 e000      	LDI  R16,0
                 _0x20008:
0000f5 2fe1      	MOV  R30,R17
0000f6 5011      	SUBI R17,1
0000f7 30e0      	CPI  R30,0
0000f8 f039      	BREQ _0x2000A
                 ; 0001 0059 		n >>= 1;
0000f9 9506      	LSR  R16
                 ; 0001 005A 		n |= (ds18b20_readbit()<<7);
0000fa dfd6      	RCALL _ds18b20_readbit
0000fb 95e7      	ROR  R30
0000fc e0e0      	LDI  R30,0
0000fd 95e7      	ROR  R30
0000fe 2b0e      	OR   R16,R30
                 ; 0001 005B 	}
0000ff cff5      	RJMP _0x20008
                 _0x2000A:
                 ; 0001 005C 	return n;
000100 2fe0      	MOV  R30,R16
000101 9109      	LD   R16,Y+
000102 9119      	LD   R17,Y+
000103 9508      	RET
                 ; 0001 005D }
                 ; .FEND
                 ;
                 ;/*
                 ; * get temperature in celsius
                 ; */
                 ;double ds18b20_gettemp(void) {
                 ; 0001 0062 double ds18b20_gettemp(void) {
                 _ds18b20_gettemp:
                 ; .FSTART _ds18b20_gettemp
                 ; 0001 0063 	uint8_t temperature[2];
                 ; 0001 0064 	int8_t digit;
                 ; 0001 0065 	uint16_t decimal;
                 ; 0001 0066 	double retd = 0;
                 ; 0001 0067 
                 ; 0001 0068 	ds18b20_reset(); //reset
000104 9726      	SBIW R28,6
000105 d352      	RCALL SUBOPT_0x1
000106 d3b3      	RCALL __SAVELOCR4
                 ;	temperature -> Y+8
                 ;	digit -> R17
                 ;	decimal -> R18,R19
                 ;	retd -> Y+4
000107 dfa9      	RCALL _ds18b20_reset
                 ; 0001 0069 	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
000108 ecac      	LDI  R26,LOW(204)
000109 dfd5      	RCALL _ds18b20_writebyte
                 ; 0001 006A 	ds18b20_writebyte(DS18B20_CMD_CONVERTTEMP); //start temperature conversion
00010a e4a4      	LDI  R26,LOW(68)
00010b dfd3      	RCALL _ds18b20_writebyte
                 ; 0001 006B 
                 ; 0001 006C 	while(!ds18b20_readbit()); //wait until conversion is complete
                 _0x2000B:
00010c dfc4      	RCALL _ds18b20_readbit
00010d 30e0      	CPI  R30,0
00010e f3e9      	BREQ _0x2000B
                 ; 0001 006D 
                 ; 0001 006E 	ds18b20_reset(); //reset
00010f dfa1      	RCALL _ds18b20_reset
                 ; 0001 006F 	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
000110 ecac      	LDI  R26,LOW(204)
000111 dfcd      	RCALL _ds18b20_writebyte
                 ; 0001 0070 	ds18b20_writebyte(DS18B20_CMD_RSCRATCHPAD); //read scratchpad
000112 ebae      	LDI  R26,LOW(190)
000113 dfcb      	RCALL _ds18b20_writebyte
                 ; 0001 0071 
                 ; 0001 0072 	//read 2 byte from scratchpad
                 ; 0001 0073 	temperature[0] = ds18b20_readbyte();
000114 dfdc      	RCALL _ds18b20_readbyte
000115 87e8      	STD  Y+8,R30
                 ; 0001 0074 	temperature[1] = ds18b20_readbyte();
000116 dfda      	RCALL _ds18b20_readbyte
000117 87e9      	STD  Y+9,R30
                 ; 0001 0075 
                 ; 0001 0076 	ds18b20_reset(); //reset
000118 df98      	RCALL _ds18b20_reset
                 ; 0001 0077 
                 ; 0001 0078 	//store temperature integer digits
                 ; 0001 0079 	digit = temperature[0]>>4;
000119 85e8      	LDD  R30,Y+8
00011a 95e2      	SWAP R30
00011b 70ef      	ANDI R30,0xF
00011c 2f1e      	MOV  R17,R30
                 ; 0001 007A 	digit |= (temperature[1]&0x7)<<4;
00011d 85e9      	LDD  R30,Y+9
00011e 70e7      	ANDI R30,LOW(0x7)
00011f 95e2      	SWAP R30
000120 7fe0      	ANDI R30,0xF0
000121 2b1e      	OR   R17,R30
                 ; 0001 007B 
                 ; 0001 007C 	//store temperature decimal digits
                 ; 0001 007D 	decimal = temperature[0]&0xf;
000122 85e8      	LDD  R30,Y+8
000123 e0f0      	LDI  R31,0
000124 70ef      	ANDI R30,LOW(0xF)
000125 70f0      	ANDI R31,HIGH(0xF)
000126 019f      	MOVW R18,R30
                 ; 0001 007E 	decimal *= DS18B20_DECIMALSTEPS;
000127 e7a1      	LDI  R26,LOW(625)
000128 e0b2      	LDI  R27,HIGH(625)
000129 d3c7      	RCALL __MULW12U
00012a 019f      	MOVW R18,R30
                 ; 0001 007F 
                 ; 0001 0080 	//compose the double temperature value and return it
                 ; 0001 0081 	retd = digit + decimal * 0.0001;
00012b 2fe1      	MOV  R30,R17
00012c e0f0      	LDI  R31,0
00012d fde7      	SBRC R30,7
00012e efff      	SER  R31
00012f 93ff      	PUSH R31
000130 93ef      	PUSH R30
000131 01f9      	MOVW R30,R18
000132 2766      	CLR  R22
000133 2777      	CLR  R23
000134 d487      	RCALL __CDF1
                +
000135 e1a7     +LDI R26 , LOW ( 0x38D1B717 )
000136 ebb7     +LDI R27 , HIGH ( 0x38D1B717 )
000137 ed81     +LDI R24 , BYTE3 ( 0x38D1B717 )
000138 e398     +LDI R25 , BYTE4 ( 0x38D1B717 )
                 	__GETD2N 0x38D1B717
000139 d504      	RCALL __MULF12
00013a 91af      	POP  R26
00013b 91bf      	POP  R27
00013c d3a5      	RCALL __CWD2
00013d d3fe      	RCALL __CDF2
00013e d4b0      	RCALL __ADDF12
                +
00013f 83ec     +STD Y + 4 , R30
000140 83fd     +STD Y + 4 + 1 , R31
000141 836e     +STD Y + 4 + 2 , R22
000142 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0001 0082 
                 ; 0001 0083 	return retd;
000143 d37d      	RCALL __LOADLOCR4
000144 962a      	ADIW R28,10
000145 9508      	RET
                 ; 0001 0084 }
                 ; .FEND
                 ;#include <myds1307rtc.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;//Khoi dong TWI
                 ;unsigned char registry_ds1307[7]; // mang de luu tam cac gia tri doc duoc tu thanh ghi cua ds1307
                 ;
                 ;void TWI_Init(void) {
                 ; 0002 0006 void TWI_Init(void) {
                 
                 	.CSEG
                 ; 0002 0007     TWSR = 0x00; //Prescaler=1
                 ; 0002 0008     TWBR = _100K;
                 ; 0002 0009     TWCR = (1 << TWINT) | (1 << TWEN);
                 ; 0002 000A }
                 ;
                 ;///chon dia chi thanh ghi can thao tac, dummy write
                 ;//Addr: dia thi thanh ghi can ghi
                 ;
                 ;unsigned char TWI_DS1307_wadr(unsigned char Addr) {
                 ; 0002 000F unsigned char TWI_DS1307_wadr(unsigned char Addr) {
                 ; 0002 0010 
                 ; 0002 0011     TWCR = TWI_START; //goi START condition
                 ;	Addr -> Y+0
                 ; 0002 0012     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 0013     if ((TWSR & 0xF8) != 0x08) return TWSR; //neu goi Start co loi thi thoat
                 ; 0002 0014 
                 ; 0002 0015     TWDR = (DS1307_SLA << 1) + TWI_W; //dia chi DS va bit W
                 ; 0002 0016     TWCR = TWI_Clear_TWINT; //xoa TWINT, bat dau goi SLA
                 ; 0002 0017     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 0018     if ((TWSR & 0xF8) != 0x18) return TWSR; //device address send error, escape anyway
                 ; 0002 0019 
                 ; 0002 001A     TWDR = Addr; //goi dia chi thanh ghi can ghi vao
                 ; 0002 001B     TWCR = TWI_Clear_TWINT; //start send address by cleaning TWINT
                 ; 0002 001C     while ((TWCR & 0x80) == 0x00); //check and wait for TWINT bit=1
                 ; 0002 001D     if ((TWSR & 0xF8) != 0x28) return TWSR; //neu du lieu goi ko thanh cong thi thoat
                 ; 0002 001E 
                 ; 0002 001F     TWCR = TWI_STOP; //STOP condition
                 ; 0002 0020     return 0;
                 ; 0002 0021 }
                 ;
                 ;//ghi 1 mang dat vao DS
                 ;//Addr: dia thi thanh ghi can ghi
                 ;//Data[]: mang du lieu
                 ;//len: so luong byte can ghi
                 ;
                 ;unsigned char TWI_DS1307_wblock(unsigned char Addr, unsigned char Data[], unsigned char len) {
                 ; 0002 0028 unsigned char TWI_DS1307_wblock(unsigned char Addr, unsigned char Data[], unsigned char len) {
                 ; 0002 0029     unsigned char i = 0;
                 ; 0002 002A     TWCR = TWI_START; //goi START condition
                 ;	Addr -> Y+4
                 ;	Data -> Y+2
                 ;	len -> Y+1
                 ;	i -> R17
                 ; 0002 002B     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 002C     if ((TWSR & 0xF8) != 0x08) return TWSR; //neu goi Start co loi thi thoat
                 ; 0002 002D 
                 ; 0002 002E     TWDR = (DS1307_SLA << 1) + TWI_W; //dia chi DS va bit W
                 ; 0002 002F     TWCR = TWI_Clear_TWINT; //xoa TWINT de bat dau goi
                 ; 0002 0030     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 0031     if ((TWSR & 0xF8) != 0x18) return TWSR; //neu co loi truyen SLA, thoat
                 ; 0002 0032 
                 ; 0002 0033     TWDR = Addr; //goi dia chi thanh ghi can ghi vao
                 ; 0002 0034     TWCR = TWI_Clear_TWINT; //xoa TWINT de bat dau goi
                 ; 0002 0035     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 0036     if ((TWSR & 0xF8) != 0x28) return TWSR;
                 ; 0002 0037 
                 ; 0002 0038     for (i = 0; i < len; i++) {
                 ; 0002 0039         TWDR = Data[i]; //chuan bi xuat du lieu
                 ; 0002 003A         TWCR = TWI_Clear_TWINT; //xoa TWINT, bat dau send
                 ; 0002 003B         while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
                 ; 0002 003C         if ((TWSR & 0xF8) != 0x28) return TWSR; //neu status ko phai la 0x28 thi return
                 ; 0002 003D     }
                 ; 0002 003E 
                 ; 0002 003F     TWCR = TWI_STOP; //STOP condition
                 ; 0002 0040     return 0;
                 ; 0002 0041 }
                 ;
                 ;//doc 1 mang tu DS
                 ;
                 ;unsigned char TWI_DS1307_rblock(unsigned char Data[], unsigned char len) {
                 ; 0002 0045 unsigned char TWI_DS1307_rblock(unsigned char Data[], unsigned char len) {
                 ; 0002 0046     unsigned char i;
                 ; 0002 0047 
                 ; 0002 0048     TWCR = TWI_START; // Start--------------------------------------------------------------------
                 ;	Data -> Y+2
                 ;	len -> Y+1
                 ;	i -> R17
                 ; 0002 0049     while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x08)); //cho TWINT bit=1 va goi START thanh cong
                 ; 0002 004A 
                 ; 0002 004B     TWDR = (DS1307_SLA << 1) + TWI_R; //goi dia chi SLA +READ
                 ; 0002 004C     TWCR = TWI_Clear_TWINT; //bat dau, xoa TWINT
                 ; 0002 004D     while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x40)); //cho TWINT bit=1	va goi SLA thanh cong
                 ; 0002 004E 
                 ; 0002 004F     //nhan len-1 bytes dau tien---------------------
                 ; 0002 0050     for (i = 0; i < len - 1; i++) {
                 ; 0002 0051         TWCR = TWI_Read_ACK; //xoa TWINT,se goi ACK sau khi nhan moi byte
                 ; 0002 0052         while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x50)); //cho TWINT bit=1 hoac nhan duoc ACK
                 ; 0002 0053         Data[i] = TWDR; //doc du lieu vao mang Data
                 ; 0002 0054     }
                 ; 0002 0055     //nhan byte cuoi
                 ; 0002 0056     TWCR = TWI_Clear_TWINT; //xoa TWINT de nhan byte cuoi, sau do set NOT ACK
                 ; 0002 0057     while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x58)); //cho TWIN=1 hoac trang thai not ack
                 ; 0002 0058     Data[len - 1] = TWDR;
                 ; 0002 0059 
                 ; 0002 005A     TWCR = TWI_STOP; //STOP condition
                 ; 0002 005B     return 0;
                 ; 0002 005C }
                 ;
                 ;//----------------------------------------------------------------------------
                 ;// xay dung lai cac ham ma khong dung thu vien
                 ;
                 ;// doi BCD sang thap phan va nguoc lai------------
                 ;
                 ;unsigned char BCD2Dec(unsigned char BCD) {
                 ; 0002 0063 unsigned char BCD2Dec(unsigned char BCD) {
                 ; 0002 0064     unsigned char L, H;
                 ; 0002 0065     L = BCD & 0x0F;
                 ;	BCD -> Y+2
                 ;	L -> R17
                 ;	H -> R16
                 ; 0002 0066     H = (BCD >> 4)*10;
                 ; 0002 0067     return (H + L);
                 ; 0002 0068 }
                 ;
                 ;unsigned char Dec2BCD(unsigned char Dec) {
                 ; 0002 006A unsigned char Dec2BCD(unsigned char Dec) {
                 ; 0002 006B     unsigned char L, H;
                 ; 0002 006C     L = Dec % 10;
                 ;	Dec -> Y+2
                 ;	L -> R17
                 ;	H -> R16
                 ; 0002 006D     H = (Dec / 10) << 4;
                 ; 0002 006E     return (H + L);
                 ; 0002 006F }
                 ;
                 ;Time myGetTimeFromDS1307() {
                 ; 0002 0071 Time myGetTimeFromDS1307() {
                 ; 0002 0072     Time time;
                 ; 0002 0073     time.Hour = 10;
                 ;	time -> Y+0
                 ; 0002 0074     time.Minute = 15;
                 ; 0002 0075     //    return time;
                 ; 0002 0076     TWI_DS1307_wadr(0x00); //set dia chi ve 0
                 ; 0002 0077     delay_ms(1); //cho DS1307 xu li
                 ; 0002 0078     TWI_DS1307_rblock(registry_ds1307, 7); //doc ca khoi thoi gian (7 bytes)
                 ; 0002 0079 
                 ; 0002 007A     time.Second = BCD2Dec(registry_ds1307[0] & 0x7F);
                 ; 0002 007B     time.Minute = BCD2Dec(registry_ds1307[1]);
                 ; 0002 007C     // mode lay tu bit 6 ( =0 la 24h; =1 la 12h)
                 ; 0002 007D     // mode = 0 la 24h, =1 la 12h
                 ; 0002 007E     time.Mode = ((registry_ds1307[2] & 0x40) != 0);
                 ; 0002 007F     // AM hay PM lay tu bit 5
                 ; 0002 0080     time.AP = ((registry_ds1307[2] & 0x20) != 0);
                 ; 0002 0081     if (time.Mode != 0) time.Hour = BCD2Dec(registry_ds1307[2] & 0x1F); //mode 12h
                 ; 0002 0082     else time.Hour = BCD2Dec(registry_ds1307[2] & 0x3F); //mode 24h
                 ; 0002 0083     time.Date = BCD2Dec(registry_ds1307[4]);
                 ; 0002 0084     time.Month = BCD2Dec(registry_ds1307[5]);
                 ; 0002 0085     time.Year = BCD2Dec(registry_ds1307[6]);
                 ; 0002 0086     return time;
                 ; 0002 0087 }
                 ;
                 ;void mySetTimeForDS1307(Time * t) {
                 ; 0002 0089 void mySetTimeForDS1307(Time * t) {
                 ; 0002 008A     registry_ds1307[0] = Dec2BCD(t->Second);
                 ;	*t -> Y+0
                 ; 0002 008B 
                 ; 0002 008C     registry_ds1307[1] = Dec2BCD(t->Minute);
                 ; 0002 008D     if (t->Mode != 0) // che do hien thi 12h
                 ; 0002 008E         // bit 7 = 0; bit 6 =1;(che do 12h), 0: che do 24h
                 ; 0002 008F         //; bit 5 =0 -> AM, 1->PM
                 ; 0002 0090         //5bit con lai la ma BCD cua gio
                 ; 0002 0091         registry_ds1307[2] = Dec2BCD(t->Hour) | (t->Mode << 6) | (t->AP << 5); //mode 12h
                 ; 0002 0092 
                 ; 0002 0093     else
                 ; 0002 0094         // bit 7 = 0; bit 6 =0;(che do 24h) ;
                 ; 0002 0095         registry_ds1307[2] = Dec2BCD(t->Hour); //mode 24h
                 ; 0002 0096 
                 ; 0002 0097     registry_ds1307[4] = Dec2BCD(t->Date);
                 ; 0002 0098     registry_ds1307[5] = Dec2BCD(t->Month);
                 ; 0002 0099     registry_ds1307[6] = Dec2BCD(t->Year);
                 ; 0002 009A 
                 ; 0002 009B 
                 ; 0002 009C     TWI_DS1307_wblock(0x00, registry_ds1307, 7); //doc ca khoi thoi gian (7 bytes)
                 ; 0002 009D     delay_ms(1); //cho DS1307 xu li
                 ; 0002 009E }
                 ;// ---------------------------------------------------------------------------
                 ;// I2C (TWI) ROUTINES
                 ;//
                 ;// On the AVRmega series, PA4 is the data line (SDA) and PA5 is the clock (SCL
                 ;// The standard clock rate is 100 KHz, and set by I2C_Init. It depends on the AVR osc. freq.
                 ;#include <myds1307rtcver2.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;
                 ;
                 ;//void DS1307_GetTime(byte *hours, byte *minutes, byte *seconds)
                 ;//// returns hours, minutes, and seconds in BCD format
                 ;//{
                 ;//    *hours = I2C_ReadRegister(DS1307, HOURS_REGISTER);
                 ;//    *minutes = I2C_ReadRegister(DS1307, MINUTES_REGISTER);
                 ;//    *seconds = I2C_ReadRegister(DS1307, SECONDS_REGISTER);
                 ;//    if (*hours & 0x40) // 12hr mode:
                 ;//        *hours &= 0x1F; // use bottom 5 bits (pm bit = temp & 0x20)
                 ;//    else *hours &= 0x3F; // 24hr mode: use bottom 6 bits
                 ;//}
                 ;//
                 ;//void DS1307_GetDate(byte *months, byte *days, byte *years)
                 ;//// returns months, days, and years in BCD format
                 ;//{
                 ;//    *months = I2C_ReadRegister(DS1307, MONTHS_REGISTER);
                 ;//    *days = I2C_ReadRegister(DS1307, DAYS_REGISTER);
                 ;//    *years = I2C_ReadRegister(DS1307, YEARS_REGISTER);
                 ;//}
                 ;//
                 ;//void SetTimeDate()
                 ;//// simple, hard-coded way to set the date.
                 ;//{
                 ;//    I2C_WriteRegister(DS1307, MONTHS_REGISTER, 0x08);
                 ;//    I2C_WriteRegister(DS1307, DAYS_REGISTER, 0x31);
                 ;//    I2C_WriteRegister(DS1307, YEARS_REGISTER, 0x13);
                 ;//    I2C_WriteRegister(DS1307, HOURS_REGISTER, 0x08 + 0x40); // add 0x40 for PM
                 ;//    I2C_WriteRegister(DS1307, MINUTES_REGISTER, 0x51);
                 ;//    I2C_WriteRegister(DS1307, SECONDS_REGISTER, 0x00);
                 ;//}
                 ;
                 ;
                 ;unsigned char BCD2Decver2(unsigned char BCD) {
                 ; 0003 002A unsigned char BCD2Decver2(unsigned char BCD) {
                 
                 	.CSEG
                 _BCD2Decver2:
                 ; .FSTART _BCD2Decver2
                 ; 0003 002B     unsigned char L, H;
                 ; 0003 002C     L = BCD & 0x0F;
000146 93aa      	ST   -Y,R26
000147 931a      	ST   -Y,R17
000148 930a      	ST   -Y,R16
                 ;	BCD -> Y+2
                 ;	L -> R17
                 ;	H -> R16
000149 81ea      	LDD  R30,Y+2
00014a 70ef      	ANDI R30,LOW(0xF)
00014b 2f1e      	MOV  R17,R30
                 ; 0003 002D     H = (BCD >> 4)*10;
00014c 81ea      	LDD  R30,Y+2
00014d 95e2      	SWAP R30
00014e 70ef      	ANDI R30,0xF
00014f e0aa      	LDI  R26,LOW(10)
000150 02ea      	MULS R30,R26
000151 2d00      	MOV  R16,R0
                 ; 0003 002E     return (H + L);
000152 2fe1      	MOV  R30,R17
000153 0fe0      	ADD  R30,R16
000154 8119      	LDD  R17,Y+1
000155 8108      	LDD  R16,Y+0
000156 940c 02f9 	JMP  _0x20A0001
                 ; 0003 002F }
                 ; .FEND
                 ;
                 ;unsigned char Dec2BCDver2(unsigned char Dec) {
                 ; 0003 0031 unsigned char Dec2BCDver2(unsigned char Dec) {
                 ; 0003 0032     unsigned char L, H;
                 ; 0003 0033     L = Dec % 10;
                 ;	Dec -> Y+2
                 ;	L -> R17
                 ;	H -> R16
                 ; 0003 0034     H = (Dec / 10) << 4;
                 ; 0003 0035     return (H + L);
                 ; 0003 0036 }
                 ;
                 ;Time myGetTimeFromDS1307ver2() {
                 ; 0003 0038 Time myGetTimeFromDS1307ver2() {
                 _myGetTimeFromDS1307ver2:
                 ; .FSTART _myGetTimeFromDS1307ver2
                 ; 0003 0039     Time time;
                 ; 0003 003A     time.Hour = 10;
000158 9762      	SBIW R28,18
                 ;	time -> Y+0
000159 e0ea      	LDI  R30,LOW(10)
00015a 83ea      	STD  Y+2,R30
                 ; 0003 003B     time.Minute = 15;
00015b e0ef      	LDI  R30,LOW(15)
00015c 83e9      	STD  Y+1,R30
                 ; 0003 003C     //    return time;
                 ; 0003 003D 
                 ; 0003 003E     time.Second = BCD2Decver2(I2C_ReadRegister(DS1307, SECONDS_REGISTER) & 0x7F);
00015d ede0      	LDI  R30,LOW(208)
00015e 93ea      	ST   -Y,R30
00015f e0a0      	LDI  R26,LOW(0)
000160 d074      	RCALL _I2C_ReadRegister
000161 77ef      	ANDI R30,0x7F
000162 2fae      	MOV  R26,R30
000163 dfe2      	RCALL _BCD2Decver2
000164 83e8      	ST   Y,R30
                 ; 0003 003F     time.Minute = BCD2Decver2(I2C_ReadRegister(DS1307, MINUTES_REGISTER));
000165 ede0      	LDI  R30,LOW(208)
000166 93ea      	ST   -Y,R30
000167 e0a1      	LDI  R26,LOW(1)
000168 d06c      	RCALL _I2C_ReadRegister
000169 2fae      	MOV  R26,R30
00016a dfdb      	RCALL _BCD2Decver2
00016b 83e9      	STD  Y+1,R30
                 ; 0003 0040     // mode lay tu bit 6 ( =0 la 24h; =1 la 12h)
                 ; 0003 0041     // mode = 0 la 24h, =1 la 12h
                 ; 0003 0042     time.Mode = ((I2C_ReadRegister(DS1307, HOURS_REGISTER) & 0x40) != 0);
00016c d2f1      	RCALL SUBOPT_0x2
00016d 74e0      	ANDI R30,LOW(0x40)
00016e e0a0      	LDI  R26,LOW(0)
00016f d37c      	RCALL __NEB12
000170 83ef      	STD  Y+7,R30
                 ; 0003 0043     // AM hay PM lay tu bit 5
                 ; 0003 0044     time.AP = ((I2C_ReadRegister(DS1307, HOURS_REGISTER) & 0x20) != 0);
000171 d2ec      	RCALL SUBOPT_0x2
000172 72e0      	ANDI R30,LOW(0x20)
000173 e0a0      	LDI  R26,LOW(0)
000174 d377      	RCALL __NEB12
000175 87e8      	STD  Y+8,R30
                 ; 0003 0045     if (time.Mode != 0) time.Hour = BCD2Decver2(I2C_ReadRegister(DS1307, HOURS_REGISTER) & 0x1F); //mode 12h
000176 81ef      	LDD  R30,Y+7
000177 30e0      	CPI  R30,0
000178 f019      	BREQ _0x60003
000179 d2e4      	RCALL SUBOPT_0x2
00017a 71ef      	ANDI R30,LOW(0x1F)
00017b c002      	RJMP _0x60007
                 ; 0003 0046     else time.Hour = BCD2Decver2(I2C_ReadRegister(DS1307, HOURS_REGISTER) & 0x3F); //mode 24h
                 _0x60003:
00017c d2e1      	RCALL SUBOPT_0x2
00017d 73ef      	ANDI R30,LOW(0x3F)
                 _0x60007:
00017e 2fae      	MOV  R26,R30
00017f dfc6      	RCALL _BCD2Decver2
000180 83ea      	STD  Y+2,R30
                 ; 0003 0047     time.Day = BCD2Decver2(I2C_ReadRegister(DS1307, DAYOFWK_REGISTER));
000181 ede0      	LDI  R30,LOW(208)
000182 93ea      	ST   -Y,R30
000183 e0a3      	LDI  R26,LOW(3)
000184 d050      	RCALL _I2C_ReadRegister
000185 2fae      	MOV  R26,R30
000186 dfbf      	RCALL _BCD2Decver2
000187 83eb      	STD  Y+3,R30
                 ; 0003 0048     time.Date = BCD2Decver2(I2C_ReadRegister(DS1307, DAYS_REGISTER));
000188 ede0      	LDI  R30,LOW(208)
000189 93ea      	ST   -Y,R30
00018a e0a4      	LDI  R26,LOW(4)
00018b d049      	RCALL _I2C_ReadRegister
00018c 2fae      	MOV  R26,R30
00018d dfb8      	RCALL _BCD2Decver2
00018e 83ec      	STD  Y+4,R30
                 ; 0003 0049     time.Month = BCD2Decver2(I2C_ReadRegister(DS1307, MONTHS_REGISTER));
00018f ede0      	LDI  R30,LOW(208)
000190 93ea      	ST   -Y,R30
000191 e0a5      	LDI  R26,LOW(5)
000192 d042      	RCALL _I2C_ReadRegister
000193 2fae      	MOV  R26,R30
000194 dfb1      	RCALL _BCD2Decver2
000195 83ed      	STD  Y+5,R30
                 ; 0003 004A     time.Year = BCD2Decver2(I2C_ReadRegister(DS1307, YEARS_REGISTER));
000196 ede0      	LDI  R30,LOW(208)
000197 93ea      	ST   -Y,R30
000198 e0a6      	LDI  R26,LOW(6)
000199 d03b      	RCALL _I2C_ReadRegister
00019a 2fae      	MOV  R26,R30
00019b dfaa      	RCALL _BCD2Decver2
00019c 83ee      	STD  Y+6,R30
                 ; 0003 004B     return time;
00019d 01fe      	MOVW R30,R28
00019e 01de      	MOVW R26,R28
00019f 9619      	ADIW R26,9
0001a0 e089      	LDI  R24,9
0001a1 d3aa      	RCALL __COPYMML
0001a2 01fe      	MOVW R30,R28
0001a3 9639      	ADIW R30,9
0001a4 e089      	LDI  R24,9
0001a5 b61f      	IN   R1,SREG
0001a6 94f8      	CLI
0001a7 9662      	ADIW R28,18
0001a8 9508      	RET
                 ; 0003 004C }
                 ; .FEND
                 ;
                 ;void mySetTimeForDS1307ver2(Time * t) {
                 ; 0003 004E void mySetTimeForDS1307ver2(Time * t) {
                 ; 0003 004F     I2C_WriteRegister(DS1307, SECONDS_REGISTER, Dec2BCDver2(t->Second));
                 ;	*t -> Y+0
                 ; 0003 0050 
                 ; 0003 0051     I2C_WriteRegister(DS1307, MINUTES_REGISTER,  Dec2BCDver2(t->Minute));
                 ; 0003 0052     if (t->Mode != 0) // che do hien thi 12h
                 ; 0003 0053         // bit 7 = 0; bit 6 =1;(che do 12h), 0: che do 24h
                 ; 0003 0054         //; bit 5 =0 -> AM, 1->PM
                 ; 0003 0055         //5bit con lai la ma BCD cua gio
                 ; 0003 0056         I2C_WriteRegister(DS1307, HOURS_REGISTER, Dec2BCDver2(t->Hour) | (t->Mode << 6) | (t->AP << 5)); //mode 12h
                 ; 0003 0057 
                 ; 0003 0058     else
                 ; 0003 0059         // bit 7 = 0; bit 6 =0;(che do 24h) ;
                 ; 0003 005A         I2C_WriteRegister(DS1307, HOURS_REGISTER, Dec2BCDver2(t->Hour)); //mode 24h
                 ; 0003 005B 
                 ; 0003 005C     I2C_WriteRegister(DS1307, DAYOFWK_REGISTER, Dec2BCDver2(t->Day));
                 ; 0003 005D     I2C_WriteRegister(DS1307, DAYS_REGISTER, Dec2BCDver2(t->Date));
                 ; 0003 005E     I2C_WriteRegister(DS1307, MONTHS_REGISTER, Dec2BCDver2(t->Month));
                 ; 0003 005F     I2C_WriteRegister(DS1307, YEARS_REGISTER, Dec2BCDver2(t->Year));
                 ; 0003 0060 }
                 ;#include <myi2c.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void I2C_Init()
                 ; 0004 0004 // port mac dinh SCL va SDA cua atmega
                 ; 0004 0005 // at 16 MHz, the SCL frequency will be 16/(16+2(TWBR)), assuming prescalar of 0.
                 ; 0004 0006 // so for 100KHz SCL, TWBR = ((F_CPU/F_SCL)-16)/2 = ((16/0.1)-16)/2 = 144/2 = 72.
                 ; 0004 0007 {
                 
                 	.CSEG
                 _I2C_Init:
                 ; .FSTART _I2C_Init
                 ; 0004 0008     TWSR = 0; // set prescalar to zero
0001a9 e0e0      	LDI  R30,LOW(0)
0001aa b9e1      	OUT  0x1,R30
                 ; 0004 0009     TWBR = ((F_CPU / F_SCL) - 16) / 2; // set SCL frequency in TWI bit register
0001ab e0ec      	LDI  R30,LOW(12)
0001ac b9e0      	OUT  0x0,R30
                 ; 0004 000A }
0001ad 9508      	RET
                 ; .FEND
                 ;
                 ;byte I2C_Detect(byte addr)
                 ; 0004 000D // look for device at specified address; return 1=found, 0=not found
                 ; 0004 000E {
                 _I2C_Detect:
                 ; .FSTART _I2C_Detect
                 ; 0004 000F     TWCR = TW_START; // send start condition
0001ae 93aa      	ST   -Y,R26
                 ;	addr -> Y+0
0001af eae4      	LDI  R30,LOW(164)
0001b0 bfe6      	OUT  0x36,R30
                 ; 0004 0010     while (!TW_READY); // wait
                 _0x80003:
0001b1 b7e6      	IN   R30,0x36
0001b2 78e0      	ANDI R30,LOW(0x80)
0001b3 f3e9      	BREQ _0x80003
                 ; 0004 0011     TWDR = addr; // load device's bus address
0001b4 d2ad      	RCALL SUBOPT_0x3
                 ; 0004 0012     TWCR = TW_SEND; // and send it
                 ; 0004 0013     while (!TW_READY); // wait
                 _0x80006:
0001b5 b7e6      	IN   R30,0x36
0001b6 78e0      	ANDI R30,LOW(0x80)
0001b7 f3e9      	BREQ _0x80006
                 ; 0004 0014     return (TW_STATUS == 0x18); // return 1 if found; 0 otherwise
0001b8 b1e1      	IN   R30,0x1
0001b9 7fe8      	ANDI R30,LOW(0xF8)
0001ba e1a8      	LDI  R26,LOW(24)
0001bb d32b      	RCALL __EQB12
0001bc 940c 02ec 	JMP  _0x20A0002
                 ; 0004 0015 }
                 ; .FEND
                 ;
                 ;byte I2C_FindDevice(byte start)
                 ; 0004 0018 // returns with address of first device found; 0=not found
                 ; 0004 0019 {
                 ; 0004 001A     byte addr;
                 ; 0004 001B     for ( addr = start; addr < 0xFF; addr++) // search all 256 addresses
                 ;	start -> Y+1
                 ;	addr -> R17
                 ; 0004 001C     {
                 ; 0004 001D         if (I2C_Detect(addr)) // I2C detected?
                 ; 0004 001E             return addr; // leave as soon as one is found
                 ; 0004 001F     }
                 ; 0004 0020     return 0; // none detected, so return 0.
                 ; 0004 0021 }
                 ;
                 ;void I2C_Start(byte slaveAddr) {
                 ; 0004 0023 void I2C_Start(byte slaveAddr) {
                 _I2C_Start:
                 ; .FSTART _I2C_Start
                 ; 0004 0024     I2C_Detect(slaveAddr);
0001be 93aa      	ST   -Y,R26
                 ;	slaveAddr -> Y+0
0001bf 81a8      	LD   R26,Y
0001c0 dfed      	RCALL _I2C_Detect
                 ; 0004 0025 }
0001c1 940c 02ec 	JMP  _0x20A0002
                 ; .FEND
                 ;
                 ;byte I2C_Write(byte data) // sends a data byte to slave
                 ; 0004 0028 {
                 _I2C_Write:
                 ; .FSTART _I2C_Write
                 ; 0004 0029     TWDR = data; // load data to be sent
0001c3 93aa      	ST   -Y,R26
                 ;	data -> Y+0
0001c4 d29d      	RCALL SUBOPT_0x3
                 ; 0004 002A     TWCR = TW_SEND; // and send it
                 ; 0004 002B     while (!TW_READY); // wait
                 _0x8000D:
0001c5 b7e6      	IN   R30,0x36
0001c6 78e0      	ANDI R30,LOW(0x80)
0001c7 f3e9      	BREQ _0x8000D
                 ; 0004 002C     return (TW_STATUS != 0x28);
0001c8 b1e1      	IN   R30,0x1
0001c9 7fe8      	ANDI R30,LOW(0xF8)
0001ca e2a8      	LDI  R26,LOW(40)
0001cb d320      	RCALL __NEB12
0001cc 940c 02ec 	JMP  _0x20A0002
                 ; 0004 002D }
                 ; .FEND
                 ;
                 ;byte I2C_ReadACK() // reads a data byte from slave
                 ; 0004 0030 {
                 ; 0004 0031     TWCR = TW_ACK; // ack = will read more data
                 ; 0004 0032     while (!TW_READY); // wait
                 ; 0004 0033     return TWDR;
                 ; 0004 0034     //return (TW_STATUS!=0x28);
                 ; 0004 0035 }
                 ;
                 ;byte I2C_ReadNACK() // reads a data byte from slave
                 ; 0004 0038 {
                 _I2C_ReadNACK:
                 ; .FSTART _I2C_ReadNACK
                 ; 0004 0039     TWCR = TW_NACK; // nack = not reading more data
0001ce e8e4      	LDI  R30,LOW(132)
0001cf bfe6      	OUT  0x36,R30
                 ; 0004 003A     while (!TW_READY); // wait
                 _0x80013:
0001d0 b7e6      	IN   R30,0x36
0001d1 78e0      	ANDI R30,LOW(0x80)
0001d2 f3e9      	BREQ _0x80013
                 ; 0004 003B     return TWDR;
0001d3 b1e3      	IN   R30,0x3
0001d4 9508      	RET
                 ; 0004 003C     //return (TW_STATUS!=0x28);
                 ; 0004 003D }
                 ; .FEND
                 ;
                 ;void I2C_WriteByte(byte busAddr, byte data) {
                 ; 0004 003F void I2C_WriteByte(byte busAddr, byte data) {
                 ; 0004 0040     I2C_Start(busAddr); // send bus address
                 ;	busAddr -> Y+1
                 ;	data -> Y+0
                 ; 0004 0041     I2C_Write(data); // then send the data byte
                 ; 0004 0042     I2C_Stop();
                 ; 0004 0043 }
                 ;
                 ;void I2C_WriteRegister(byte busAddr, byte deviceRegister, byte data) {
                 ; 0004 0045 void I2C_WriteRegister(byte busAddr, byte deviceRegister, byte data) {
                 ; 0004 0046     I2C_Start(busAddr); // send bus address
                 ;	busAddr -> Y+2
                 ;	deviceRegister -> Y+1
                 ;	data -> Y+0
                 ; 0004 0047     I2C_Write(deviceRegister); // first byte = device register address
                 ; 0004 0048     I2C_Write(data); // second byte = data for device register
                 ; 0004 0049     I2C_Stop();
                 ; 0004 004A }
                 ;
                 ;byte I2C_ReadRegister(byte busAddr, byte deviceRegister) {
                 ; 0004 004C byte I2C_ReadRegister(byte busAddr, byte deviceRegister) {
                 _I2C_ReadRegister:
                 ; .FSTART _I2C_ReadRegister
                 ; 0004 004D     byte data = 0;
                 ; 0004 004E     I2C_Start(busAddr); // send device address
0001d5 93aa      	ST   -Y,R26
0001d6 931a      	ST   -Y,R17
                 ;	busAddr -> Y+2
                 ;	deviceRegister -> Y+1
                 ;	data -> R17
0001d7 e010      	LDI  R17,0
0001d8 81aa      	LDD  R26,Y+2
0001d9 dfe4      	RCALL _I2C_Start
                 ; 0004 004F     I2C_Write(deviceRegister); // set register pointer
0001da 81a9      	LDD  R26,Y+1
0001db dfe7      	RCALL _I2C_Write
                 ; 0004 0050     I2C_Start(busAddr + READ); // restart as a read operation
0001dc 81aa      	LDD  R26,Y+2
0001dd 5faf      	SUBI R26,-LOW(1)
0001de dfdf      	RCALL _I2C_Start
                 ; 0004 0051     data = I2C_ReadNACK(); // read the register data
0001df dfee      	RCALL _I2C_ReadNACK
0001e0 2f1e      	MOV  R17,R30
                 ; 0004 0052     I2C_Stop(); // stop
0001e1 e9e4      	LDI  R30,LOW(148)
0001e2 bfe6      	OUT  0x36,R30
                 ; 0004 0053     return data;
0001e3 2fe1      	MOV  R30,R17
0001e4 8118      	LDD  R17,Y+0
0001e5 940c 02f9 	JMP  _0x20A0001
                 ; 0004 0054 }
                 ; .FEND
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.6 Evaluation
                 ;Automatic Program Generator
                 ;� Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 4.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ; *****************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;//#include <myds1307rtc.h>
                 ;#include <myds1307rtcver2.h>
                 ;
                 ;
                 ;//#include <myds18b20ver1.h>
                 ;#include <myds18b20ver2.h>
                 ;
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;#if RX_BUFFER_SIZE<256
                 ;unsigned char rx_wr_index, rx_rd_index, rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index, rx_rd_index, rx_counter;
                 ;#endif
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;// USART Receiver interrupt service routine
                 ;
                 ;interrupt [USART_RXC] void usart_rx_isr(void) {
                 ; 0005 0034 interrupt [12] void usart_rx_isr(void) {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
0001e7 93ea      	ST   -Y,R30
0001e8 93fa      	ST   -Y,R31
0001e9 b7ef      	IN   R30,SREG
0001ea 93ea      	ST   -Y,R30
                 ; 0005 0035     char status, data;
                 ; 0005 0036     status = UCSRA;
0001eb 931a      	ST   -Y,R17
0001ec 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0001ed b11b      	IN   R17,11
                 ; 0005 0037     data = UDR;
0001ee b10c      	IN   R16,12
                 ; 0005 0038     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
0001ef 2fe1      	MOV  R30,R17
0001f0 71ec      	ANDI R30,LOW(0x1C)
0001f1 f489      	BRNE _0xA0003
                 ; 0005 0039         rx_buffer[rx_wr_index] = data;
0001f2 2de5      	MOV  R30,R5
0001f3 e0f0      	LDI  R31,0
0001f4 59e9      	SUBI R30,LOW(-_rx_buffer)
0001f5 4ffe      	SBCI R31,HIGH(-_rx_buffer)
0001f6 8300      	ST   Z,R16
                 ; 0005 003A         if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index = 0;
0001f7 9453      	INC  R5
0001f8 e0e8      	LDI  R30,LOW(8)
0001f9 15e5      	CP   R30,R5
0001fa f409      	BRNE _0xA0004
0001fb 2455      	CLR  R5
                 ; 0005 003B         if (++rx_counter == RX_BUFFER_SIZE) {
                 _0xA0004:
0001fc 9473      	INC  R7
0001fd e0e8      	LDI  R30,LOW(8)
0001fe 15e7      	CP   R30,R7
0001ff f419      	BRNE _0xA0005
                 ; 0005 003C             rx_counter = 0;
000200 2477      	CLR  R7
                 ; 0005 003D             rx_buffer_overflow = 1;
000201 9468      	SET
000202 f820      	BLD  R2,0
                 ; 0005 003E         };
                 _0xA0005:
                 ; 0005 003F     };
                 _0xA0003:
                 ; 0005 0040 }
000203 9109      	LD   R16,Y+
000204 9119      	LD   R17,Y+
000205 91e9      	LD   R30,Y+
000206 bfef      	OUT  SREG,R30
000207 91f9      	LD   R31,Y+
000208 91e9      	LD   R30,Y+
000209 9518      	RETI
                 ; .FEND
                 ;
                 ;// Declare your global variables here
                 ;unsigned char ma[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
                 
                 	.DSEG
                 ;void quet(unsigned char x);
                 ;void day();
                 ;void hienthi(int x);
                 ;
                 ;void hienthinhietdo(unsigned char temp);
                 ;void hienthithoigian(unsigned char hour, unsigned char minute);
                 ;
                 ;void uart_char_tx(unsigned char chr);
                 ;unsigned char uart_getchar();
                 ;void getState(unsigned char);
                 ;
                 ;
                 ;float temp;
                 ;unsigned char kytu = '';
                 ;unsigned char b = 2;
                 ;
                 ;byte ttemp0; // first byte
                 ;byte ttemp1;
                 ;
                 ;char mygetchar(void) {
                 ; 0005 0057 char mygetchar(void) {
                 
                 	.CSEG
                 _mygetchar:
                 ; .FSTART _mygetchar
                 ; 0005 0058     char data;
                 ; 0005 0059     if (rx_counter == 0) return 0;
00020a 931a      	ST   -Y,R17
                 ;	data -> R17
00020b 2077      	TST  R7
00020c f411      	BRNE _0xA0007
00020d e0e0      	LDI  R30,LOW(0)
00020e c00c      	RJMP _0x20A0003
                 ; 0005 005A     data = rx_buffer[rx_rd_index];
                 _0xA0007:
00020f 2de4      	MOV  R30,R4
000210 e0f0      	LDI  R31,0
000211 59e9      	SUBI R30,LOW(-_rx_buffer)
000212 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000213 8110      	LD   R17,Z
                 ; 0005 005B     if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
000214 9443      	INC  R4
000215 e0e8      	LDI  R30,LOW(8)
000216 15e4      	CP   R30,R4
000217 f409      	BRNE _0xA0008
000218 2444      	CLR  R4
                 ; 0005 005C     //#asm("cli")
                 ; 0005 005D     --rx_counter;
                 _0xA0008:
000219 947a      	DEC  R7
                 ; 0005 005E     //#asm("sei")
                 ; 0005 005F     return data;
                 _0x20A0004:
00021a 2fe1      	MOV  R30,R17
                 _0x20A0003:
00021b 9119      	LD   R17,Y+
00021c 9508      	RET
                 ; 0005 0060 }
                 ; .FEND
                 ;
                 ;// Declare your global variables here
                 ;unsigned char my_variable;
                 ;
                 ;void main(void) {
                 ; 0005 0065 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0005 0066     // Declare your local variables here
                 ; 0005 0067     unsigned char *t = 0;
                 ; 0005 0068     unsigned char h, m, s, i;
                 ; 0005 0069     int x;
                 ; 0005 006A     Time time = {30, 15, 10, 5, 12, 5, 16, 1, 1}; // thoi gian hien tai
                 ; 0005 006B     // Input/Output Ports initialization
                 ; 0005 006C     // Port A initialization
                 ; 0005 006D     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0005 006E     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0005 006F     PORTA = 0x00;
00021d 972b      	SBIW R28,11
00021e e089      	LDI  R24,9
00021f e0a0      	LDI  R26,LOW(0)
000220 e0b0      	LDI  R27,HIGH(0)
000221 e7e6      	LDI  R30,LOW(_0xA0009*2)
000222 e0f0      	LDI  R31,HIGH(_0xA0009*2)
000223 d2a2      	RCALL __INITLOCB
                 ;	*t -> R16,R17
                 ;	h -> R19
                 ;	m -> R18
                 ;	s -> R21
                 ;	i -> R20
                 ;	x -> Y+9
                 ;	time -> Y+0
                +
000224 e000     +LDI R16 , LOW ( 0 )
000225 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000226 e0e0      	LDI  R30,LOW(0)
000227 bbeb      	OUT  0x1B,R30
                 ; 0005 0070     //    DDRA = 0x00;
                 ; 0005 0071     DDRA = 0xFF;
000228 efef      	LDI  R30,LOW(255)
000229 bbea      	OUT  0x1A,R30
                 ; 0005 0072 
                 ; 0005 0073     // Port B initialization
                 ; 0005 0074     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0005 0075     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0005 0076     PORTB = 0x00;
00022a e0e0      	LDI  R30,LOW(0)
00022b bbe8      	OUT  0x18,R30
                 ; 0005 0077     DDRB = 0x00;
00022c bbe7      	OUT  0x17,R30
                 ; 0005 0078 
                 ; 0005 0079     // Port C initialization
                 ; 0005 007A     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0005 007B     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0005 007C     PORTC = 0x00;
00022d bbe5      	OUT  0x15,R30
                 ; 0005 007D     //    DDRC = 0xFF;
                 ; 0005 007E     DDRC = 0x00;
00022e bbe4      	OUT  0x14,R30
                 ; 0005 007F 
                 ; 0005 0080     // Port D initialization
                 ; 0005 0081     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0005 0082     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0005 0083     PORTD = 0x00;
00022f bbe2      	OUT  0x12,R30
                 ; 0005 0084     DDRD = 0x00;
000230 bbe1      	OUT  0x11,R30
                 ; 0005 0085 
                 ; 0005 0086     // Timer/Counter 0 initialization
                 ; 0005 0087     // Clock source: System Clock
                 ; 0005 0088     // Clock value: Timer 0 Stopped
                 ; 0005 0089     // Mode: Normal top=0xFF
                 ; 0005 008A     // OC0 output: Disconnected
                 ; 0005 008B     TCCR0 = 0x00;
000231 bfe3      	OUT  0x33,R30
                 ; 0005 008C     TCNT0 = 0x00;
000232 bfe2      	OUT  0x32,R30
                 ; 0005 008D     OCR0 = 0x00;
000233 bfec      	OUT  0x3C,R30
                 ; 0005 008E 
                 ; 0005 008F     // Timer/Counter 1 initialization
                 ; 0005 0090     // Clock source: System Clock
                 ; 0005 0091     // Clock value: Timer1 Stopped
                 ; 0005 0092     // Mode: Normal top=0xFFFF
                 ; 0005 0093     // OC1A output: Discon.
                 ; 0005 0094     // OC1B output: Discon.
                 ; 0005 0095     // Noise Canceler: Off
                 ; 0005 0096     // Input Capture on Falling Edge
                 ; 0005 0097     // Timer1 Overflow Interrupt: Off
                 ; 0005 0098     // Input Capture Interrupt: Off
                 ; 0005 0099     // Compare A Match Interrupt: Off
                 ; 0005 009A     // Compare B Match Interrupt: Off
                 ; 0005 009B     TCCR1A = 0x00;
000234 bdef      	OUT  0x2F,R30
                 ; 0005 009C     TCCR1B = 0x00;
000235 bdee      	OUT  0x2E,R30
                 ; 0005 009D     TCNT1H = 0x00;
000236 bded      	OUT  0x2D,R30
                 ; 0005 009E     TCNT1L = 0x00;
000237 bdec      	OUT  0x2C,R30
                 ; 0005 009F     ICR1H = 0x00;
000238 bde7      	OUT  0x27,R30
                 ; 0005 00A0     ICR1L = 0x00;
000239 bde6      	OUT  0x26,R30
                 ; 0005 00A1     OCR1AH = 0x00;
00023a bdeb      	OUT  0x2B,R30
                 ; 0005 00A2     OCR1AL = 0x00;
00023b bdea      	OUT  0x2A,R30
                 ; 0005 00A3     OCR1BH = 0x00;
00023c bde9      	OUT  0x29,R30
                 ; 0005 00A4     OCR1BL = 0x00;
00023d bde8      	OUT  0x28,R30
                 ; 0005 00A5 
                 ; 0005 00A6     // Timer/Counter 2 initialization
                 ; 0005 00A7     // Clock source: System Clock
                 ; 0005 00A8     // Clock value: Timer2 Stopped
                 ; 0005 00A9     // Mode: Normal top=0xFF
                 ; 0005 00AA     // OC2 output: Disconnected
                 ; 0005 00AB     ASSR = 0x00;
00023e bde2      	OUT  0x22,R30
                 ; 0005 00AC     TCCR2 = 0x00;
00023f bde5      	OUT  0x25,R30
                 ; 0005 00AD     TCNT2 = 0x00;
000240 bde4      	OUT  0x24,R30
                 ; 0005 00AE     OCR2 = 0x00;
000241 bde3      	OUT  0x23,R30
                 ; 0005 00AF 
                 ; 0005 00B0     // External Interrupt(s) initialization
                 ; 0005 00B1     // INT0: Off
                 ; 0005 00B2     // INT1: Off
                 ; 0005 00B3     // INT2: Off
                 ; 0005 00B4     MCUCR = 0x00;
000242 bfe5      	OUT  0x35,R30
                 ; 0005 00B5     MCUCSR = 0x00;
000243 bfe4      	OUT  0x34,R30
                 ; 0005 00B6 
                 ; 0005 00B7     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0005 00B8     TIMSK = 0x00;
000244 bfe9      	OUT  0x39,R30
                 ; 0005 00B9 
                 ; 0005 00BA     // USART initialization
                 ; 0005 00BB     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0005 00BC     // USART Receiver: On
                 ; 0005 00BD     // USART Transmitter: On
                 ; 0005 00BE     // USART Mode: Asynchronous
                 ; 0005 00BF     // USART Baud Rate: 9600
                 ; 0005 00C0     UCSRA = 0x00;
000245 b9eb      	OUT  0xB,R30
                 ; 0005 00C1     UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
000246 e8e6      	LDI  R30,LOW(134)
000247 bde0      	OUT  0x20,R30
                 ; 0005 00C2     UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
000248 e9e8      	LDI  R30,LOW(152)
000249 b9ea      	OUT  0xA,R30
                 ; 0005 00C3     UBRRH = 0x00;
00024a e0e0      	LDI  R30,LOW(0)
00024b bde0      	OUT  0x20,R30
                 ; 0005 00C4     UBRRL = 0x19;
00024c e1e9      	LDI  R30,LOW(25)
00024d b9e9      	OUT  0x9,R30
                 ; 0005 00C5 
                 ; 0005 00C6     // Analog Comparator initialization
                 ; 0005 00C7     // Analog Comparator: Off
                 ; 0005 00C8     // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0005 00C9     ACSR = 0x80;
00024e e8e0      	LDI  R30,LOW(128)
00024f b9e8      	OUT  0x8,R30
                 ; 0005 00CA     SFIOR = 0x00;
000250 e0e0      	LDI  R30,LOW(0)
000251 bfe0      	OUT  0x30,R30
                 ; 0005 00CB 
                 ; 0005 00CC     // ADC initialization
                 ; 0005 00CD     // ADC disabled
                 ; 0005 00CE     ADCSRA = 0x00;
000252 b9e6      	OUT  0x6,R30
                 ; 0005 00CF 
                 ; 0005 00D0     // SPI initialization
                 ; 0005 00D1     // SPI disabled
                 ; 0005 00D2     SPCR = 0x00;
000253 b9ed      	OUT  0xD,R30
                 ; 0005 00D3 
                 ; 0005 00D4     // TWI initialization
                 ; 0005 00D5     // TWI disabled
                 ; 0005 00D6     TWCR = 0x00;
000254 bfe6      	OUT  0x36,R30
                 ; 0005 00D7 
                 ; 0005 00D8     // I2C Bus initialization
                 ; 0005 00D9     // I2C Port: PORTA
                 ; 0005 00DA     // I2C SDA bit: 1
                 ; 0005 00DB     // I2C SCL bit: 0
                 ; 0005 00DC     // Bit Rate: 100 kHz
                 ; 0005 00DD     // Note: I2C settings are specified in the
                 ; 0005 00DE     // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0005 00DF     //    i2c_init();
                 ; 0005 00E0 
                 ; 0005 00E1     // 1 Wire Bus initialization
                 ; 0005 00E2     // 1 Wire Data port: PORTB
                 ; 0005 00E3     // 1 Wire Data bit: 0
                 ; 0005 00E4     // Note: 1 Wire port settings are specified in the
                 ; 0005 00E5     // Project|Configure|C Compiler|Libraries|1 Wire menu.
                 ; 0005 00E6     //    w1_init();
                 ; 0005 00E7     //    ds18b20_init(t, 0, 0, DS18B20_9BIT_RES);
                 ; 0005 00E8     //    rtc_init(0, 0, 0);
                 ; 0005 00E9 
                 ; 0005 00EA     //    TWI_Init(); //khoi dong TWI dung cho myds1307rtc.h
                 ; 0005 00EB     I2C_Init(); //khoi dong TWI dung cho myds1307rtcver2.h
000255 df53      	RCALL _I2C_Init
                 ; 0005 00EC 
                 ; 0005 00ED     // Global enable interrupts
                 ; 0005 00EE #asm("sei")
000256 9478      	sei
                 ; 0005 00EF 
                 ; 0005 00F0     while (1) {
                 _0xA000A:
                 ; 0005 00F1 
                 ; 0005 00F2         // nhiet do
                 ; 0005 00F3         int whole = 0, decimal = 0;
                 ; 0005 00F4 
                 ; 0005 00F5         // hien thi nhiet do su dung myds18b20ver1.h
                 ; 0005 00F6         //        therm_ReadTempC(NULL, &whole, &decimal);
                 ; 0005 00F7         //        hienthinhietdo(whole);
                 ; 0005 00F8 
                 ; 0005 00F9         // hien thi nhiet do su dung myds18b20ver2.h
                 ; 0005 00FA         temp = ds18b20_gettemp();
000257 9724      	SBIW R28,4
000258 d1ff      	RCALL SUBOPT_0x1
                 ;	x -> Y+13
                 ;	time -> Y+4
                 ;	whole -> Y+2
                 ;	decimal -> Y+0
000259 deaa      	RCALL _ds18b20_gettemp
00025a 93e0 0179 	STS  _temp,R30
00025c 93f0 017a 	STS  _temp+1,R31
00025e 9360 017b 	STS  _temp+2,R22
000260 9370 017c 	STS  _temp+3,R23
                 ; 0005 00FB         hienthinhietdo(temp);
000262 d204      	RCALL SUBOPT_0x4
000263 2fae      	MOV  R26,R30
000264 d038      	RCALL _hienthinhietdo
                 ; 0005 00FC 
                 ; 0005 00FD         delay_ms(1000);
000265 eea8      	LDI  R26,LOW(1000)
000266 e0b3      	LDI  R27,HIGH(1000)
000267 d424      	RCALL _delay_ms
                 ; 0005 00FE 
                 ; 0005 00FF         //        temp = ds18b20_temperature(t);
                 ; 0005 0100 
                 ; 0005 0101         // lay thoi gian
                 ; 0005 0102         //        mySetTimeForDS1307ver2(&time);
                 ; 0005 0103         //        time = myGetTimeFromDS1307();
                 ; 0005 0104         time = myGetTimeFromDS1307ver2();
000268 deef      	RCALL _myGetTimeFromDS1307ver2
000269 01de      	MOVW R26,R28
00026a 9614      	ADIW R26,4
00026b d2e0      	RCALL __COPYMML
00026c be1f      	OUT  SREG,R1
                 ; 0005 0105         hienthithoigian(time.Hour + time.Mode * time.AP * 12, time.Minute); // hien thi theo 24h
00026d 85ec      	LDD  R30,Y+12
00026e 85ab      	LDD  R26,Y+11
00026f 02ea      	MULS R30,R26
000270 01f0      	MOVW R30,R0
000271 e0ac      	LDI  R26,LOW(12)
000272 02ea      	MULS R30,R26
000273 01f0      	MOVW R30,R0
000274 81ae      	LDD  R26,Y+6
000275 0fea      	ADD  R30,R26
000276 93ea      	ST   -Y,R30
000277 81ae      	LDD  R26,Y+6
000278 d034      	RCALL _hienthithoigian
                 ; 0005 0106         delay_ms(2000);
000279 eda0      	LDI  R26,LOW(2000)
00027a e0b7      	LDI  R27,HIGH(2000)
00027b d410      	RCALL _delay_ms
                 ; 0005 0107 
                 ; 0005 0108 
                 ; 0005 0109         kytu = mygetchar();
00027c df8d      	RCALL _mygetchar
00027d 2e6e      	MOV  R6,R30
                 ; 0005 010A         // if(kytu !=0) putchar(kytu);
                 ; 0005 010B         // printf("%c", my_variable);
                 ; 0005 010C         //printf("Nhiet do hien tai la");
                 ; 0005 010D         //kytu = uart_getchar();
                 ; 0005 010E 
                 ; 0005 010F         if (kytu == 't') {
00027e e7e4      	LDI  R30,LOW(116)
00027f 15e6      	CP   R30,R6
000280 f449      	BRNE _0xA000D
                 ; 0005 0110             //printf ("%c",a);
                 ; 0005 0111             printf(" Nhiet do hien tai la %d oC\n\r", (unsigned char) temp);
                +
000281 e8e0     +LDI R30 , LOW ( 2 * _0xA0000 + ( 0 ) )
000282 e0f0     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 0 ) )
                 	__POINTW1FN _0xA0000,0
000283 93fa      	ST   -Y,R31
000284 93ea      	ST   -Y,R30
000285 d1e1      	RCALL SUBOPT_0x4
000286 d1ea      	RCALL SUBOPT_0x5
000287 e084      	LDI  R24,4
000288 d18e      	RCALL _printf
000289 9626      	ADIW R28,6
                 ; 0005 0112 
                 ; 0005 0113         }
                 ; 0005 0114         if (kytu == 'h') {
                 _0xA000D:
00028a e6e8      	LDI  R30,LOW(104)
00028b 15e6      	CP   R30,R6
00028c f469      	BRNE _0xA000E
                 ; 0005 0115             printf(" Gio hien tai la %d:%d:%d\n\r", (unsigned char) h, (unsigned char) m, (unsigned char) s);
                +
00028d e9ee     +LDI R30 , LOW ( 2 * _0xA0000 + ( 30 ) )
00028e e0f0     +LDI R31 , HIGH ( 2 * _0xA0000 + ( 30 ) )
                 	__POINTW1FN _0xA0000,30
00028f 93fa      	ST   -Y,R31
000290 93ea      	ST   -Y,R30
000291 2fe3      	MOV  R30,R19
000292 d1de      	RCALL SUBOPT_0x5
000293 2fe2      	MOV  R30,R18
000294 d1dc      	RCALL SUBOPT_0x5
000295 2fe5      	MOV  R30,R21
000296 d1da      	RCALL SUBOPT_0x5
000297 e08c      	LDI  R24,12
000298 d17e      	RCALL _printf
000299 962e      	ADIW R28,14
                 ; 0005 0116 
                 ; 0005 0117         }
                 ; 0005 0118 
                 ; 0005 0119 
                 ; 0005 011A     }
                 _0xA000E:
00029a 9624      	ADIW R28,4
00029b cfbb      	RJMP _0xA000A
                 ; 0005 011B }
                 _0xA000F:
00029c cfff      	RJMP _0xA000F
                 ; .FEND
                 ;
                 ;void hienthinhietdo(unsigned char temp) {
                 ; 0005 011D void hienthinhietdo(unsigned char temp) {
                 _hienthinhietdo:
                 ; .FSTART _hienthinhietdo
                 ; 0005 011E     unsigned char a, b;
                 ; 0005 011F     a = temp / 10;
00029d 93aa      	ST   -Y,R26
00029e 931a      	ST   -Y,R17
00029f 930a      	ST   -Y,R16
                 ;	temp -> Y+2
                 ;	a -> R17
                 ;	b -> R16
0002a0 81aa      	LDD  R26,Y+2
0002a1 d1d4      	RCALL SUBOPT_0x6
                 ; 0005 0120     b = temp % 10;
0002a2 81aa      	LDD  R26,Y+2
0002a3 d1d8      	RCALL SUBOPT_0x7
                 ; 0005 0121 
                 ; 0005 0122 
                 ; 0005 0123     quet(0xC6);
0002a4 eca6      	LDI  R26,LOW(198)
0002a5 d027      	RCALL _quet
                 ; 0005 0124     quet(0x9C);
0002a6 e9ac      	LDI  R26,LOW(156)
0002a7 d1da      	RCALL SUBOPT_0x8
                 ; 0005 0125     quet(ma[b]);
0002a8 81a0      	LD   R26,Z
0002a9 d1de      	RCALL SUBOPT_0x9
                 ; 0005 0126     quet(ma[a]);
                 ; 0005 0127     day(); // push
                 ; 0005 0128 }
0002aa 8119      	LDD  R17,Y+1
0002ab 8108      	LDD  R16,Y+0
0002ac c04c      	RJMP _0x20A0001
                 ; .FEND
                 ;
                 ;void hienthithoigian(unsigned char hour, unsigned char minute) {
                 ; 0005 012A void hienthithoigian(unsigned char hour, unsigned char minute) {
                 _hienthithoigian:
                 ; .FSTART _hienthithoigian
                 ; 0005 012B     unsigned char a, b, c, d;
                 ; 0005 012C     a = hour / 10;
0002ad 93aa      	ST   -Y,R26
0002ae d20b      	RCALL __SAVELOCR4
                 ;	hour -> Y+5
                 ;	minute -> Y+4
                 ;	a -> R17
                 ;	b -> R16
                 ;	c -> R19
                 ;	d -> R18
0002af 81ad      	LDD  R26,Y+5
0002b0 d1c5      	RCALL SUBOPT_0x6
                 ; 0005 012D     b = hour % 10;
0002b1 81ad      	LDD  R26,Y+5
0002b2 d1c9      	RCALL SUBOPT_0x7
                 ; 0005 012E     c = minute / 10;
0002b3 81ac      	LDD  R26,Y+4
0002b4 e0b0      	LDI  R27,0
0002b5 e0ea      	LDI  R30,LOW(10)
0002b6 e0f0      	LDI  R31,HIGH(10)
0002b7 d254      	RCALL __DIVW21
0002b8 2f3e      	MOV  R19,R30
                 ; 0005 012F     d = minute % 10;
0002b9 81ac      	LDD  R26,Y+4
0002ba 27bb      	CLR  R27
0002bb e0ea      	LDI  R30,LOW(10)
0002bc e0f0      	LDI  R31,HIGH(10)
0002bd d253      	RCALL __MODW21
0002be 2f2e      	MOV  R18,R30
                 ; 0005 0130     quet(ma[d]);
0002bf d1d0      	RCALL SUBOPT_0xA
0002c0 d00c      	RCALL _quet
                 ; 0005 0131     quet(ma[c]);
0002c1 2fe3      	MOV  R30,R19
0002c2 d1cd      	RCALL SUBOPT_0xA
0002c3 d1be      	RCALL SUBOPT_0x8
                 ; 0005 0132     quet(~(~ma[b] | 0x80));
0002c4 81e0      	LD   R30,Z
0002c5 95e0      	COM  R30
0002c6 68e0      	ORI  R30,0x80
0002c7 95e0      	COM  R30
0002c8 2fae      	MOV  R26,R30
0002c9 d1be      	RCALL SUBOPT_0x9
                 ; 0005 0133     quet(ma[a]);
                 ; 0005 0134     day();
                 ; 0005 0135 }
0002ca d1f6      	RCALL __LOADLOCR4
0002cb 9626      	ADIW R28,6
0002cc 9508      	RET
                 ; .FEND
                 ;
                 ;void hienthi(int x) {
                 ; 0005 0137 void hienthi(int x) {
                 ; 0005 0138     unsigned char a, b, c, d;
                 ; 0005 0139     int i = 0;
                 ; 0005 013A     a = x / 1000;
                 ;	x -> Y+6
                 ;	a -> R17
                 ;	b -> R16
                 ;	c -> R19
                 ;	d -> R18
                 ;	i -> R20,R21
                 ; 0005 013B     b = (x % 1000) / 100;
                 ; 0005 013C     c = (x % 100) / 10;
                 ; 0005 013D     d = (x % 10);
                 ; 0005 013E 
                 ; 0005 013F     quet(ma[a]);
                 ; 0005 0140     quet(ma[b]);
                 ; 0005 0141     quet(ma[c]);
                 ; 0005 0142     quet(ma[d]);
                 ; 0005 0143 
                 ; 0005 0144     day();
                 ; 0005 0145 }
                 ;
                 ;void quet(unsigned char x) {
                 ; 0005 0147 void quet(unsigned char x) {
                 _quet:
                 ; .FSTART _quet
                 ; 0005 0148     unsigned char i, temp;
                 ; 0005 0149     for (i = 0; i < 8; i++) {
0002cd 93aa      	ST   -Y,R26
0002ce 931a      	ST   -Y,R17
0002cf 930a      	ST   -Y,R16
                 ;	x -> Y+2
                 ;	i -> R17
                 ;	temp -> R16
0002d0 e010      	LDI  R17,LOW(0)
                 _0xA0011:
0002d1 3018      	CPI  R17,8
0002d2 f470      	BRSH _0xA0012
                 ; 0005 014A         temp = x;
0002d3 810a      	LDD  R16,Y+2
                 ; 0005 014B         temp = temp & 0x80;
0002d4 7800      	ANDI R16,LOW(128)
                 ; 0005 014C         if (temp == 0x80) {
0002d5 3800      	CPI  R16,128
0002d6 f411      	BRNE _0xA0013
                 ; 0005 014D             PORTA.1 = 1;
0002d7 9ad9      	SBI  0x1B,1
                 ; 0005 014E         } else {
0002d8 c001      	RJMP _0xA0016
                 _0xA0013:
                 ; 0005 014F             PORTA.1 = 0;
0002d9 98d9      	CBI  0x1B,1
                 ; 0005 0150         }
                 _0xA0016:
                 ; 0005 0151         x = x * 2;
0002da 81ea      	LDD  R30,Y+2
0002db 0fee      	LSL  R30
0002dc 83ea      	STD  Y+2,R30
                 ; 0005 0152         PORTA.0 = 0;
0002dd 98d8      	CBI  0x1B,0
                 ; 0005 0153         PORTA.0 = 1;
0002de 9ad8      	SBI  0x1B,0
                 ; 0005 0154     }
0002df 5f1f      	SUBI R17,-1
0002e0 cff0      	RJMP _0xA0011
                 _0xA0012:
                 ; 0005 0155 }
0002e1 8119      	LDD  R17,Y+1
0002e2 8108      	LDD  R16,Y+0
0002e3 c015      	RJMP _0x20A0001
                 ; .FEND
                 ;
                 ;void day() {
                 ; 0005 0157 void day() {
                 _day:
                 ; .FSTART _day
                 ; 0005 0158     PORTA.2 = 0;
0002e4 98da      	CBI  0x1B,2
                 ; 0005 0159     PORTA.2 = 1;
0002e5 9ada      	SBI  0x1B,2
                 ; 0005 015A }
0002e6 9508      	RET
                 ; .FEND
                 ;
                 ;void uart_char_tx(unsigned char chr) {
                 ; 0005 015C void uart_char_tx(unsigned char chr) {
                 ; 0005 015D     while (UDRE == 1) {
                 ;	chr -> Y+0
                 ; 0005 015E     }; //cho den khi bit UDRE=1
                 ; 0005 015F     UDR = chr;
                 ; 0005 0160 }
                 ;
                 ;unsigned char uart_getchar() {
                 ; 0005 0162 unsigned char uart_getchar() {
                 ; 0005 0163     unsigned char a = '';
                 ; 0005 0164     a = UDR;
                 ;	a -> R17
                 ; 0005 0165     return a;
                 ; 0005 0166 }
                 ;
                 ;void getState(unsigned char a) {
                 ; 0005 0168 void getState(unsigned char a) {
                 ; 0005 0169     switch (a) {
                 ;	a -> Y+0
                 ; 0005 016A         case 't':
                 ; 0005 016B             printf("Nhiet do hien tai la %f", temp);
                 ; 0005 016C             break;
                 ; 0005 016D         case 'h':
                 ; 0005 016E             printf("xin chao");
                 ; 0005 016F             break;
                 ; 0005 0170     }
                 ; 0005 0171 }
                 ;
                 ;//interrupt [USART_RXC] void rx_isr(){ //ngat nhan khi bit RXC =1
                 ;//  kytu = UDR;
                 ;//}
                 ;
                 ;
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0002e7 93aa      	ST   -Y,R26
                 putchar0:
0002e8 9b5d           sbis usr,udre
0002e9 cffe           rjmp putchar0
0002ea 81e8           ld   r30,y
0002eb b9ec           out  udr,r30
                 _0x20A0002:
0002ec 9621      	ADIW R28,1
0002ed 9508      	RET
                 ; .FEND
                 _put_usart_G101:
                 ; .FSTART _put_usart_G101
0002ee 93ba      	ST   -Y,R27
0002ef 93aa      	ST   -Y,R26
0002f0 81aa      	LDD  R26,Y+2
0002f1 dff5      	RCALL _putchar
0002f2 81a8      	LD   R26,Y
0002f3 81b9      	LDD  R27,Y+1
0002f4 91ed      	LD   R30,X+
0002f5 91fd      	LD   R31,X+
0002f6 9631      	ADIW R30,1
0002f7 93fe      	ST   -X,R31
0002f8 93ee      	ST   -X,R30
                 _0x20A0001:
0002f9 9623      	ADIW R28,3
0002fa 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0002fb 93ba      	ST   -Y,R27
0002fc 93aa      	ST   -Y,R26
0002fd 9726      	SBIW R28,6
0002fe d1b9      	RCALL __SAVELOCR6
0002ff e010      	LDI  R17,0
000300 85ac      	LDD  R26,Y+12
000301 85bd      	LDD  R27,Y+12+1
000302 e0e0      	LDI  R30,LOW(0)
000303 e0f0      	LDI  R31,HIGH(0)
000304 93ed      	ST   X+,R30
000305 93fc      	ST   X,R31
                 _0x2020016:
000306 89ea      	LDD  R30,Y+18
000307 89fb      	LDD  R31,Y+18+1
000308 9631      	ADIW R30,1
000309 8bea      	STD  Y+18,R30
00030a 8bfb      	STD  Y+18+1,R31
00030b 9731      	SBIW R30,1
00030c 91e4      	LPM  R30,Z
00030d 2f2e      	MOV  R18,R30
00030e 30e0      	CPI  R30,0
00030f f409      	BRNE PC+2
000310 c100      	RJMP _0x2020018
000311 2fe1      	MOV  R30,R17
000312 30e0      	CPI  R30,0
000313 f431      	BRNE _0x202001C
000314 3225      	CPI  R18,37
000315 f411      	BRNE _0x202001D
000316 e011      	LDI  R17,LOW(1)
000317 c001      	RJMP _0x202001E
                 _0x202001D:
000318 d17c      	RCALL SUBOPT_0xB
                 _0x202001E:
000319 c0f6      	RJMP _0x202001B
                 _0x202001C:
00031a 30e1      	CPI  R30,LOW(0x1)
00031b f4a1      	BRNE _0x202001F
00031c 3225      	CPI  R18,37
00031d f411      	BRNE _0x2020020
00031e d176      	RCALL SUBOPT_0xB
00031f c0ef      	RJMP _0x20200CC
                 _0x2020020:
000320 e012      	LDI  R17,LOW(2)
000321 e040      	LDI  R20,LOW(0)
000322 e000      	LDI  R16,LOW(0)
000323 322d      	CPI  R18,45
000324 f411      	BRNE _0x2020021
000325 e001      	LDI  R16,LOW(1)
000326 c0e9      	RJMP _0x202001B
                 _0x2020021:
000327 322b      	CPI  R18,43
000328 f411      	BRNE _0x2020022
000329 e24b      	LDI  R20,LOW(43)
00032a c0e5      	RJMP _0x202001B
                 _0x2020022:
00032b 3220      	CPI  R18,32
00032c f411      	BRNE _0x2020023
00032d e240      	LDI  R20,LOW(32)
00032e c0e1      	RJMP _0x202001B
                 _0x2020023:
00032f c002      	RJMP _0x2020024
                 _0x202001F:
000330 30e2      	CPI  R30,LOW(0x2)
000331 f439      	BRNE _0x2020025
                 _0x2020024:
000332 e050      	LDI  R21,LOW(0)
000333 e013      	LDI  R17,LOW(3)
000334 3320      	CPI  R18,48
000335 f411      	BRNE _0x2020026
000336 6800      	ORI  R16,LOW(128)
000337 c0d8      	RJMP _0x202001B
                 _0x2020026:
000338 c003      	RJMP _0x2020027
                 _0x2020025:
000339 30e3      	CPI  R30,LOW(0x3)
00033a f009      	BREQ PC+2
00033b c0d4      	RJMP _0x202001B
                 _0x2020027:
00033c 3320      	CPI  R18,48
00033d f010      	BRLO _0x202002A
00033e 332a      	CPI  R18,58
00033f f008      	BRLO _0x202002B
                 _0x202002A:
000340 c007      	RJMP _0x2020029
                 _0x202002B:
000341 e0aa      	LDI  R26,LOW(10)
000342 9f5a      	MUL  R21,R26
000343 2d50      	MOV  R21,R0
000344 2fe2      	MOV  R30,R18
000345 53e0      	SUBI R30,LOW(48)
000346 0f5e      	ADD  R21,R30
000347 c0c8      	RJMP _0x202001B
                 _0x2020029:
000348 2fe2      	MOV  R30,R18
000349 36e3      	CPI  R30,LOW(0x63)
00034a f439      	BRNE _0x202002F
00034b d150      	RCALL SUBOPT_0xC
00034c 89e8      	LDD  R30,Y+16
00034d 89f9      	LDD  R31,Y+16+1
00034e 81a4      	LDD  R26,Z+4
00034f 93aa      	ST   -Y,R26
000350 d151      	RCALL SUBOPT_0xD
000351 c0bd      	RJMP _0x2020030
                 _0x202002F:
000352 37e3      	CPI  R30,LOW(0x73)
000353 f429      	BRNE _0x2020032
000354 d147      	RCALL SUBOPT_0xC
000355 d152      	RCALL SUBOPT_0xE
000356 d0e2      	RCALL _strlen
000357 2f1e      	MOV  R17,R30
000358 c007      	RJMP _0x2020033
                 _0x2020032:
000359 37e0      	CPI  R30,LOW(0x70)
00035a f449      	BRNE _0x2020035
00035b d140      	RCALL SUBOPT_0xC
00035c d14b      	RCALL SUBOPT_0xE
00035d d0e7      	RCALL _strlenf
00035e 2f1e      	MOV  R17,R30
00035f 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000360 6002      	ORI  R16,LOW(2)
000361 770f      	ANDI R16,LOW(127)
000362 e030      	LDI  R19,LOW(0)
000363 c02f      	RJMP _0x2020036
                 _0x2020035:
000364 36e4      	CPI  R30,LOW(0x64)
000365 f011      	BREQ _0x2020039
000366 36e9      	CPI  R30,LOW(0x69)
000367 f411      	BRNE _0x202003A
                 _0x2020039:
000368 6004      	ORI  R16,LOW(4)
000369 c002      	RJMP _0x202003B
                 _0x202003A:
00036a 37e5      	CPI  R30,LOW(0x75)
00036b f431      	BRNE _0x202003C
                 _0x202003B:
00036c e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00036d e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00036e 83ee      	STD  Y+6,R30
00036f 83ff      	STD  Y+6+1,R31
000370 e015      	LDI  R17,LOW(5)
000371 c00c      	RJMP _0x202003D
                 _0x202003C:
000372 35e8      	CPI  R30,LOW(0x58)
000373 f411      	BRNE _0x202003F
000374 6008      	ORI  R16,LOW(8)
000375 c003      	RJMP _0x2020040
                 _0x202003F:
000376 37e8      	CPI  R30,LOW(0x78)
000377 f009      	BREQ PC+2
000378 c096      	RJMP _0x2020071
                 _0x2020040:
000379 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
00037a e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
00037b 83ee      	STD  Y+6,R30
00037c 83ff      	STD  Y+6+1,R31
00037d e014      	LDI  R17,LOW(4)
                 _0x202003D:
00037e ff02      	SBRS R16,2
00037f c011      	RJMP _0x2020042
000380 d11b      	RCALL SUBOPT_0xC
000381 d12f      	RCALL SUBOPT_0xF
000382 85ab      	LDD  R26,Y+11
000383 23aa      	TST  R26
000384 f432      	BRPL _0x2020043
000385 85ea      	LDD  R30,Y+10
000386 85fb      	LDD  R31,Y+10+1
000387 d149      	RCALL __ANEGW1
000388 87ea      	STD  Y+10,R30
000389 87fb      	STD  Y+10+1,R31
00038a e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00038b 3040      	CPI  R20,0
00038c f011      	BREQ _0x2020044
00038d 5f1f      	SUBI R17,-LOW(1)
00038e c001      	RJMP _0x2020045
                 _0x2020044:
00038f 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000390 c002      	RJMP _0x2020046
                 _0x2020042:
000391 d10a      	RCALL SUBOPT_0xC
000392 d11e      	RCALL SUBOPT_0xF
                 _0x2020046:
                 _0x2020036:
000393 fd00      	SBRC R16,0
000394 c010      	RJMP _0x2020047
                 _0x2020048:
000395 1715      	CP   R17,R21
000396 f470      	BRSH _0x202004A
000397 ff07      	SBRS R16,7
000398 c008      	RJMP _0x202004B
000399 ff02      	SBRS R16,2
00039a c004      	RJMP _0x202004C
00039b 7f0b      	ANDI R16,LOW(251)
00039c 2f24      	MOV  R18,R20
00039d 5011      	SUBI R17,LOW(1)
00039e c001      	RJMP _0x202004D
                 _0x202004C:
00039f e320      	LDI  R18,LOW(48)
                 _0x202004D:
0003a0 c001      	RJMP _0x202004E
                 _0x202004B:
0003a1 e220      	LDI  R18,LOW(32)
                 _0x202004E:
0003a2 d0f2      	RCALL SUBOPT_0xB
0003a3 5051      	SUBI R21,LOW(1)
0003a4 cff0      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0003a5 2f31      	MOV  R19,R17
0003a6 ff01      	SBRS R16,1
0003a7 c016      	RJMP _0x202004F
                 _0x2020050:
0003a8 3030      	CPI  R19,0
0003a9 f099      	BREQ _0x2020052
0003aa ff03      	SBRS R16,3
0003ab c006      	RJMP _0x2020053
0003ac 81ee      	LDD  R30,Y+6
0003ad 81ff      	LDD  R31,Y+6+1
0003ae 9125      	LPM  R18,Z+
0003af 83ee      	STD  Y+6,R30
0003b0 83ff      	STD  Y+6+1,R31
0003b1 c005      	RJMP _0x2020054
                 _0x2020053:
0003b2 81ae      	LDD  R26,Y+6
0003b3 81bf      	LDD  R27,Y+6+1
0003b4 912d      	LD   R18,X+
0003b5 83ae      	STD  Y+6,R26
0003b6 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0003b7 d0dd      	RCALL SUBOPT_0xB
0003b8 3050      	CPI  R21,0
0003b9 f009      	BREQ _0x2020055
0003ba 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0003bb 5031      	SUBI R19,LOW(1)
0003bc cfeb      	RJMP _0x2020050
                 _0x2020052:
0003bd c048      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0003be e320      	LDI  R18,LOW(48)
0003bf 81ee      	LDD  R30,Y+6
0003c0 81ff      	LDD  R31,Y+6+1
0003c1 d16f      	RCALL __GETW1PF
0003c2 87e8      	STD  Y+8,R30
0003c3 87f9      	STD  Y+8+1,R31
0003c4 81ee      	LDD  R30,Y+6
0003c5 81ff      	LDD  R31,Y+6+1
0003c6 9632      	ADIW R30,2
0003c7 83ee      	STD  Y+6,R30
0003c8 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0003c9 85e8      	LDD  R30,Y+8
0003ca 85f9      	LDD  R31,Y+8+1
0003cb 85aa      	LDD  R26,Y+10
0003cc 85bb      	LDD  R27,Y+10+1
0003cd 17ae      	CP   R26,R30
0003ce 07bf      	CPC  R27,R31
0003cf f050      	BRLO _0x202005C
0003d0 5f2f      	SUBI R18,-LOW(1)
0003d1 85a8      	LDD  R26,Y+8
0003d2 85b9      	LDD  R27,Y+8+1
0003d3 85ea      	LDD  R30,Y+10
0003d4 85fb      	LDD  R31,Y+10+1
0003d5 1bea      	SUB  R30,R26
0003d6 0bfb      	SBC  R31,R27
0003d7 87ea      	STD  Y+10,R30
0003d8 87fb      	STD  Y+10+1,R31
0003d9 cfef      	RJMP _0x202005A
                 _0x202005C:
0003da 332a      	CPI  R18,58
0003db f028      	BRLO _0x202005D
0003dc ff03      	SBRS R16,3
0003dd c002      	RJMP _0x202005E
0003de 5f29      	SUBI R18,-LOW(7)
0003df c001      	RJMP _0x202005F
                 _0x202005E:
0003e0 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0003e1 fd04      	SBRC R16,4
0003e2 c019      	RJMP _0x2020061
0003e3 3321      	CPI  R18,49
0003e4 f420      	BRSH _0x2020063
0003e5 85a8      	LDD  R26,Y+8
0003e6 85b9      	LDD  R27,Y+8+1
0003e7 9711      	SBIW R26,1
0003e8 f409      	BRNE _0x2020062
                 _0x2020063:
0003e9 c009      	RJMP _0x20200CD
                 _0x2020062:
0003ea 1753      	CP   R21,R19
0003eb f010      	BRLO _0x2020067
0003ec ff00      	SBRS R16,0
0003ed c001      	RJMP _0x2020068
                 _0x2020067:
0003ee c011      	RJMP _0x2020066
                 _0x2020068:
0003ef e220      	LDI  R18,LOW(32)
0003f0 ff07      	SBRS R16,7
0003f1 c00a      	RJMP _0x2020069
0003f2 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0003f3 6100      	ORI  R16,LOW(16)
0003f4 ff02      	SBRS R16,2
0003f5 c006      	RJMP _0x202006A
0003f6 7f0b      	ANDI R16,LOW(251)
0003f7 934a      	ST   -Y,R20
0003f8 d0a9      	RCALL SUBOPT_0xD
0003f9 3050      	CPI  R21,0
0003fa f009      	BREQ _0x202006B
0003fb 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0003fc d098      	RCALL SUBOPT_0xB
0003fd 3050      	CPI  R21,0
0003fe f009      	BREQ _0x202006C
0003ff 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000400 5031      	SUBI R19,LOW(1)
000401 85a8      	LDD  R26,Y+8
000402 85b9      	LDD  R27,Y+8+1
000403 9712      	SBIW R26,2
000404 f008      	BRLO _0x2020059
000405 cfb8      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000406 ff00      	SBRS R16,0
000407 c007      	RJMP _0x202006D
                 _0x202006E:
000408 3050      	CPI  R21,0
000409 f029      	BREQ _0x2020070
00040a 5051      	SUBI R21,LOW(1)
00040b e2e0      	LDI  R30,LOW(32)
00040c 93ea      	ST   -Y,R30
00040d d094      	RCALL SUBOPT_0xD
00040e cff9      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
00040f e010      	LDI  R17,LOW(0)
                 _0x202001B:
000410 cef5      	RJMP _0x2020016
                 _0x2020018:
000411 85ac      	LDD  R26,Y+12
000412 85bd      	LDD  R27,Y+12+1
000413 d119      	RCALL __GETW1P
000414 d0aa      	RCALL __LOADLOCR6
000415 9664      	ADIW R28,20
000416 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000417 92ff      	PUSH R15
000418 2ef8      	MOV  R15,R24
000419 9726      	SBIW R28,6
00041a 931a      	ST   -Y,R17
00041b 930a      	ST   -Y,R16
00041c 01de      	MOVW R26,R28
00041d 9614      	ADIW R26,4
00041e d0ae      	RCALL __ADDW2R15
00041f 018d      	MOVW R16,R26
000420 e0e0      	LDI  R30,LOW(0)
000421 83ec      	STD  Y+4,R30
000422 83ed      	STD  Y+4+1,R30
000423 83ee      	STD  Y+6,R30
000424 83ef      	STD  Y+6+1,R30
000425 01de      	MOVW R26,R28
000426 9618      	ADIW R26,8
000427 d0a5      	RCALL __ADDW2R15
000428 d104      	RCALL __GETW1P
000429 93fa      	ST   -Y,R31
00042a 93ea      	ST   -Y,R30
00042b 931a      	ST   -Y,R17
00042c 930a      	ST   -Y,R16
00042d eeee      	LDI  R30,LOW(_put_usart_G101)
00042e e0f2      	LDI  R31,HIGH(_put_usart_G101)
00042f 93fa      	ST   -Y,R31
000430 93ea      	ST   -Y,R30
000431 01de      	MOVW R26,R28
000432 9618      	ADIW R26,8
000433 dec7      	RCALL __print_G101
000434 8119      	LDD  R17,Y+1
000435 8108      	LDD  R16,Y+0
000436 9628      	ADIW R28,8
000437 90ff      	POP  R15
000438 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000439 93ba      	ST   -Y,R27
00043a 93aa      	ST   -Y,R26
00043b 91a9          ld   r26,y+
00043c 91b9          ld   r27,y+
00043d 27ee          clr  r30
00043e 27ff          clr  r31
                 strlen0:
00043f 916d          ld   r22,x+
000440 2366          tst  r22
000441 f011          breq strlen1
000442 9631          adiw r30,1
000443 cffb          rjmp strlen0
                 strlen1:
000444 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000445 93ba      	ST   -Y,R27
000446 93aa      	ST   -Y,R26
000447 27aa          clr  r26
000448 27bb          clr  r27
000449 91e9          ld   r30,y+
00044a 91f9          ld   r31,y+
                 strlenf0:
00044b 9005      	lpm  r0,z+
00044c 2000          tst  r0
00044d f011          breq strlenf1
00044e 9611          adiw r26,1
00044f cffb          rjmp strlenf0
                 strlenf1:
000450 01fd          movw r30,r26
000451 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _registry_ds1307:
000160           	.BYTE 0x7
                 _rx_buffer:
000167           	.BYTE 0x8
                 _ma:
00016f           	.BYTE 0xA
                 _temp:
000179           	.BYTE 0x4
                 __seed_G100:
00017d           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000452 98c0      	CBI  0x18,0
000453 9ab8      	SBI  0x17,0
                +
000454 e081     +LDI R24 , LOW ( 1 )
                +__DELAY_USB_LOOP :
000455 958a     +DEC R24
000456 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 1
000457 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000458 e0e0      	LDI  R30,LOW(0)
000459 83e8      	ST   Y,R30
00045a 83e9      	STD  Y+1,R30
00045b 83ea      	STD  Y+2,R30
00045c 83eb      	STD  Y+3,R30
00045d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
00045e ede0      	LDI  R30,LOW(208)
00045f 93ea      	ST   -Y,R30
000460 e0a2      	LDI  R26,LOW(2)
000461 cd73      	RJMP _I2C_ReadRegister
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000462 81e8      	LD   R30,Y
000463 b9e3      	OUT  0x3,R30
000464 e8e4      	LDI  R30,LOW(132)
000465 bfe6      	OUT  0x36,R30
000466 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
000467 91e0 0179 	LDS  R30,_temp
000469 91f0 017a 	LDS  R31,_temp+1
00046b 9160 017b 	LDS  R22,_temp+2
00046d 9170 017c 	LDS  R23,_temp+3
00046f d113      	RCALL __CFD1U
000470 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
000471 27ff      	CLR  R31
000472 2766      	CLR  R22
000473 2777      	CLR  R23
000474 d0c0      	RCALL __PUTPARD1
000475 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
000476 e0b0      	LDI  R27,0
000477 e0ea      	LDI  R30,LOW(10)
000478 e0f0      	LDI  R31,HIGH(10)
000479 d092      	RCALL __DIVW21
00047a 2f1e      	MOV  R17,R30
00047b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
00047c 27bb      	CLR  R27
00047d e0ea      	LDI  R30,LOW(10)
00047e e0f0      	LDI  R31,HIGH(10)
00047f d091      	RCALL __MODW21
000480 2f0e      	MOV  R16,R30
000481 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
000482 de4a      	RCALL _quet
000483 2fe0      	MOV  R30,R16
000484 e0f0      	LDI  R31,0
000485 59e1      	SUBI R30,LOW(-_ma)
000486 4ffe      	SBCI R31,HIGH(-_ma)
000487 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
000488 de44      	RCALL _quet
000489 2fe1      	MOV  R30,R17
00048a e0f0      	LDI  R31,0
00048b 59e1      	SUBI R30,LOW(-_ma)
00048c 4ffe      	SBCI R31,HIGH(-_ma)
00048d 81a0      	LD   R26,Z
00048e de3e      	RCALL _quet
00048f ce54      	RJMP _day
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000490 e0f0      	LDI  R31,0
000491 59e1      	SUBI R30,LOW(-_ma)
000492 4ffe      	SBCI R31,HIGH(-_ma)
000493 81a0      	LD   R26,Z
000494 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xB:
000495 932a      	ST   -Y,R18
000496 85ad      	LDD  R26,Y+13
000497 85be      	LDD  R27,Y+13+1
000498 85ef      	LDD  R30,Y+15
000499 89f8      	LDD  R31,Y+15+1
00049a 9509      	ICALL
00049b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0xC:
00049c 89e8      	LDD  R30,Y+16
00049d 89f9      	LDD  R31,Y+16+1
00049e 9734      	SBIW R30,4
00049f 8be8      	STD  Y+16,R30
0004a0 8bf9      	STD  Y+16+1,R31
0004a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xD:
0004a2 85ad      	LDD  R26,Y+13
0004a3 85be      	LDD  R27,Y+13+1
0004a4 85ef      	LDD  R30,Y+15
0004a5 89f8      	LDD  R31,Y+15+1
0004a6 9509      	ICALL
0004a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xE:
0004a8 89a8      	LDD  R26,Y+16
0004a9 89b9      	LDD  R27,Y+16+1
0004aa 9614      	ADIW R26,4
0004ab d081      	RCALL __GETW1P
0004ac 83ee      	STD  Y+6,R30
0004ad 83ff      	STD  Y+6+1,R31
0004ae 81ae      	LDD  R26,Y+6
0004af 81bf      	LDD  R27,Y+6+1
0004b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
0004b1 89a8      	LDD  R26,Y+16
0004b2 89b9      	LDD  R27,Y+16+1
0004b3 9614      	ADIW R26,4
0004b4 d078      	RCALL __GETW1P
0004b5 87ea      	STD  Y+10,R30
0004b6 87fb      	STD  Y+10+1,R31
0004b7 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0004b8 935a      	ST   -Y,R21
                 __SAVELOCR5:
0004b9 934a      	ST   -Y,R20
                 __SAVELOCR4:
0004ba 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004bb 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004bc 931a      	ST   -Y,R17
0004bd 930a      	ST   -Y,R16
0004be 9508      	RET
                 
                 __LOADLOCR6:
0004bf 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0004c0 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0004c1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004c2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004c3 8119      	LDD  R17,Y+1
0004c4 8108      	LD   R16,Y
0004c5 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0004c6 0fac      	ADD  R26,R28
0004c7 1fbd      	ADC  R27,R29
                 __INITLOC0:
0004c8 9005      	LPM  R0,Z+
0004c9 920d      	ST   X+,R0
0004ca 958a      	DEC  R24
0004cb f7e1      	BRNE __INITLOC0
0004cc 9508      	RET
                 
                 __ADDW2R15:
0004cd 2400      	CLR  R0
0004ce 0daf      	ADD  R26,R15
0004cf 1db0      	ADC  R27,R0
0004d0 9508      	RET
                 
                 __ANEGW1:
0004d1 95f1      	NEG  R31
0004d2 95e1      	NEG  R30
0004d3 40f0      	SBCI R31,0
0004d4 9508      	RET
                 
                 __ANEGD1:
0004d5 95f0      	COM  R31
0004d6 9560      	COM  R22
0004d7 9570      	COM  R23
0004d8 95e1      	NEG  R30
0004d9 4fff      	SBCI R31,-1
0004da 4f6f      	SBCI R22,-1
0004db 4f7f      	SBCI R23,-1
0004dc 9508      	RET
                 
                 __CWD1:
0004dd 2f6f      	MOV  R22,R31
0004de 0f66      	ADD  R22,R22
0004df 0b66      	SBC  R22,R22
0004e0 2f76      	MOV  R23,R22
0004e1 9508      	RET
                 
                 __CWD2:
0004e2 2f8b      	MOV  R24,R27
0004e3 0f88      	ADD  R24,R24
0004e4 0b88      	SBC  R24,R24
0004e5 2f98      	MOV  R25,R24
0004e6 9508      	RET
                 
                 __EQB12:
0004e7 17ea      	CP   R30,R26
0004e8 e0e1      	LDI  R30,1
0004e9 f009      	BREQ __EQB12T
0004ea 27ee      	CLR  R30
                 __EQB12T:
0004eb 9508      	RET
                 
                 __NEB12:
0004ec 17ea      	CP   R30,R26
0004ed e0e1      	LDI  R30,1
0004ee f409      	BRNE __NEB12T
0004ef 27ee      	CLR  R30
                 __NEB12T:
0004f0 9508      	RET
                 
                 __MULW12U:
0004f1 9ffa      	MUL  R31,R26
0004f2 2df0      	MOV  R31,R0
0004f3 9feb      	MUL  R30,R27
0004f4 0df0      	ADD  R31,R0
0004f5 9fea      	MUL  R30,R26
0004f6 2de0      	MOV  R30,R0
0004f7 0df1      	ADD  R31,R1
0004f8 9508      	RET
                 
                 __DIVW21U:
0004f9 2400      	CLR  R0
0004fa 2411      	CLR  R1
0004fb e190      	LDI  R25,16
                 __DIVW21U1:
0004fc 0faa      	LSL  R26
0004fd 1fbb      	ROL  R27
0004fe 1c00      	ROL  R0
0004ff 1c11      	ROL  R1
000500 1a0e      	SUB  R0,R30
000501 0a1f      	SBC  R1,R31
000502 f418      	BRCC __DIVW21U2
000503 0e0e      	ADD  R0,R30
000504 1e1f      	ADC  R1,R31
000505 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000506 60a1      	SBR  R26,1
                 __DIVW21U3:
000507 959a      	DEC  R25
000508 f799      	BRNE __DIVW21U1
000509 01fd      	MOVW R30,R26
00050a 01d0      	MOVW R26,R0
00050b 9508      	RET
                 
                 __DIVW21:
00050c d012      	RCALL __CHKSIGNW
00050d dfeb      	RCALL __DIVW21U
00050e f40e      	BRTC __DIVW211
00050f dfc1      	RCALL __ANEGW1
                 __DIVW211:
000510 9508      	RET
                 
                 __MODW21:
000511 94e8      	CLT
000512 ffb7      	SBRS R27,7
000513 c004      	RJMP __MODW211
000514 95b1      	NEG  R27
000515 95a1      	NEG  R26
000516 40b0      	SBCI R27,0
000517 9468      	SET
                 __MODW211:
000518 fdf7      	SBRC R31,7
000519 dfb7      	RCALL __ANEGW1
00051a dfde      	RCALL __DIVW21U
00051b 01fd      	MOVW R30,R26
00051c f40e      	BRTC __MODW212
00051d dfb3      	RCALL __ANEGW1
                 __MODW212:
00051e 9508      	RET
                 
                 __CHKSIGNW:
00051f 94e8      	CLT
000520 fff7      	SBRS R31,7
000521 c002      	RJMP __CHKSW1
000522 dfae      	RCALL __ANEGW1
000523 9468      	SET
                 __CHKSW1:
000524 ffb7      	SBRS R27,7
000525 c006      	RJMP __CHKSW2
000526 95b1      	NEG  R27
000527 95a1      	NEG  R26
000528 40b0      	SBCI R27,0
000529 f800      	BLD  R0,0
00052a 9403      	INC  R0
00052b fa00      	BST  R0,0
                 __CHKSW2:
00052c 9508      	RET
                 
                 __GETW1P:
00052d 91ed      	LD   R30,X+
00052e 91fc      	LD   R31,X
00052f 9711      	SBIW R26,1
000530 9508      	RET
                 
                 __GETW1PF:
000531 9005      	LPM  R0,Z+
000532 91f4      	LPM  R31,Z
000533 2de0      	MOV  R30,R0
000534 9508      	RET
                 
                 __PUTPARD1:
000535 937a      	ST   -Y,R23
000536 936a      	ST   -Y,R22
000537 93fa      	ST   -Y,R31
000538 93ea      	ST   -Y,R30
000539 9508      	RET
                 
                 __CDF2U:
00053a 9468      	SET
00053b c001      	RJMP __CDF2U0
                 __CDF2:
00053c 94e8      	CLT
                 __CDF2U0:
00053d d001      	RCALL __SWAPD12
00053e d07e      	RCALL __CDF1U0
                 
                 __SWAPD12:
00053f 2e18      	MOV  R1,R24
000540 2f86      	MOV  R24,R22
000541 2d61      	MOV  R22,R1
000542 2e19      	MOV  R1,R25
000543 2f97      	MOV  R25,R23
000544 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000545 2e1b      	MOV  R1,R27
000546 2fbf      	MOV  R27,R31
000547 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000548 2e1a      	MOV  R1,R26
000549 2fae      	MOV  R26,R30
00054a 2de1      	MOV  R30,R1
00054b 9508      	RET
                 
                 __COPYMML:
00054c 2799      	CLR  R25
                 __COPYMM:
00054d 93ef      	PUSH R30
00054e 93ff      	PUSH R31
                 __COPYMM0:
00054f 9161      	LD   R22,Z+
000550 936d      	ST   X+,R22
000551 9701      	SBIW R24,1
000552 f7e1      	BRNE __COPYMM0
000553 91ff      	POP  R31
000554 91ef      	POP  R30
000555 9508      	RET
                 
                 __ROUND_REPACK:
000556 2355      	TST  R21
000557 f442      	BRPL __REPACK
000558 3850      	CPI  R21,0x80
000559 f411      	BRNE __ROUND_REPACK0
00055a ffe0      	SBRS R30,0
00055b c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00055c 9631      	ADIW R30,1
00055d 1f69      	ADC  R22,R25
00055e 1f79      	ADC  R23,R25
00055f f06b      	BRVS __REPACK1
                 
                 __REPACK:
000560 e850      	LDI  R21,0x80
000561 2757      	EOR  R21,R23
000562 f411      	BRNE __REPACK0
000563 935f      	PUSH R21
000564 c0c8      	RJMP __ZERORES
                 __REPACK0:
000565 3f5f      	CPI  R21,0xFF
000566 f031      	BREQ __REPACK1
000567 0f66      	LSL  R22
000568 0c00      	LSL  R0
000569 9557      	ROR  R21
00056a 9567      	ROR  R22
00056b 2f75      	MOV  R23,R21
00056c 9508      	RET
                 __REPACK1:
00056d 935f      	PUSH R21
00056e 2000      	TST  R0
00056f f00a      	BRMI __REPACK2
000570 c0c7      	RJMP __MAXRES
                 __REPACK2:
000571 c0c0      	RJMP __MINRES
                 
                 __UNPACK:
000572 e850      	LDI  R21,0x80
000573 2e19      	MOV  R1,R25
000574 2215      	AND  R1,R21
000575 0f88      	LSL  R24
000576 1f99      	ROL  R25
000577 2795      	EOR  R25,R21
000578 0f55      	LSL  R21
000579 9587      	ROR  R24
                 
                 __UNPACK1:
00057a e850      	LDI  R21,0x80
00057b 2e07      	MOV  R0,R23
00057c 2205      	AND  R0,R21
00057d 0f66      	LSL  R22
00057e 1f77      	ROL  R23
00057f 2775      	EOR  R23,R21
000580 0f55      	LSL  R21
000581 9567      	ROR  R22
000582 9508      	RET
                 
                 __CFD1U:
000583 9468      	SET
000584 c001      	RJMP __CFD1U0
                 __CFD1:
000585 94e8      	CLT
                 __CFD1U0:
000586 935f      	PUSH R21
000587 dff2      	RCALL __UNPACK1
000588 3870      	CPI  R23,0x80
000589 f018      	BRLO __CFD10
00058a 3f7f      	CPI  R23,0xFF
00058b f408      	BRCC __CFD10
00058c c0a0      	RJMP __ZERORES
                 __CFD10:
00058d e156      	LDI  R21,22
00058e 1b57      	SUB  R21,R23
00058f f4aa      	BRPL __CFD11
000590 9551      	NEG  R21
000591 3058      	CPI  R21,8
000592 f40e      	BRTC __CFD19
000593 3059      	CPI  R21,9
                 __CFD19:
000594 f030      	BRLO __CFD17
000595 efef      	SER  R30
000596 efff      	SER  R31
000597 ef6f      	SER  R22
000598 e77f      	LDI  R23,0x7F
000599 f977      	BLD  R23,7
00059a c01a      	RJMP __CFD15
                 __CFD17:
00059b 2777      	CLR  R23
00059c 2355      	TST  R21
00059d f0b9      	BREQ __CFD15
                 __CFD18:
00059e 0fee      	LSL  R30
00059f 1fff      	ROL  R31
0005a0 1f66      	ROL  R22
0005a1 1f77      	ROL  R23
0005a2 955a      	DEC  R21
0005a3 f7d1      	BRNE __CFD18
0005a4 c010      	RJMP __CFD15
                 __CFD11:
0005a5 2777      	CLR  R23
                 __CFD12:
0005a6 3058      	CPI  R21,8
0005a7 f028      	BRLO __CFD13
0005a8 2fef      	MOV  R30,R31
0005a9 2ff6      	MOV  R31,R22
0005aa 2f67      	MOV  R22,R23
0005ab 5058      	SUBI R21,8
0005ac cff9      	RJMP __CFD12
                 __CFD13:
0005ad 2355      	TST  R21
0005ae f031      	BREQ __CFD15
                 __CFD14:
0005af 9576      	LSR  R23
0005b0 9567      	ROR  R22
0005b1 95f7      	ROR  R31
0005b2 95e7      	ROR  R30
0005b3 955a      	DEC  R21
0005b4 f7d1      	BRNE __CFD14
                 __CFD15:
0005b5 2000      	TST  R0
0005b6 f40a      	BRPL __CFD16
0005b7 df1d      	RCALL __ANEGD1
                 __CFD16:
0005b8 915f      	POP  R21
0005b9 9508      	RET
                 
                 __CDF1U:
0005ba 9468      	SET
0005bb c001      	RJMP __CDF1U0
                 __CDF1:
0005bc 94e8      	CLT
                 __CDF1U0:
0005bd 9730      	SBIW R30,0
0005be 4060      	SBCI R22,0
0005bf 4070      	SBCI R23,0
0005c0 f0b1      	BREQ __CDF10
0005c1 2400      	CLR  R0
0005c2 f026      	BRTS __CDF11
0005c3 2377      	TST  R23
0005c4 f412      	BRPL __CDF11
0005c5 9400      	COM  R0
0005c6 df0e      	RCALL __ANEGD1
                 __CDF11:
0005c7 2e17      	MOV  R1,R23
0005c8 e17e      	LDI  R23,30
0005c9 2011      	TST  R1
                 __CDF12:
0005ca f032      	BRMI __CDF13
0005cb 957a      	DEC  R23
0005cc 0fee      	LSL  R30
0005cd 1fff      	ROL  R31
0005ce 1f66      	ROL  R22
0005cf 1c11      	ROL  R1
0005d0 cff9      	RJMP __CDF12
                 __CDF13:
0005d1 2fef      	MOV  R30,R31
0005d2 2ff6      	MOV  R31,R22
0005d3 2d61      	MOV  R22,R1
0005d4 935f      	PUSH R21
0005d5 df8a      	RCALL __REPACK
0005d6 915f      	POP  R21
                 __CDF10:
0005d7 9508      	RET
                 
                 __SWAPACC:
0005d8 934f      	PUSH R20
0005d9 01af      	MOVW R20,R30
0005da 01fd      	MOVW R30,R26
0005db 01da      	MOVW R26,R20
0005dc 01ab      	MOVW R20,R22
0005dd 01bc      	MOVW R22,R24
0005de 01ca      	MOVW R24,R20
0005df 2d40      	MOV  R20,R0
0005e0 2c01      	MOV  R0,R1
0005e1 2e14      	MOV  R1,R20
0005e2 914f      	POP  R20
0005e3 9508      	RET
                 
                 __UADD12:
0005e4 0fea      	ADD  R30,R26
0005e5 1ffb      	ADC  R31,R27
0005e6 1f68      	ADC  R22,R24
0005e7 9508      	RET
                 
                 __NEGMAN1:
0005e8 95e0      	COM  R30
0005e9 95f0      	COM  R31
0005ea 9560      	COM  R22
0005eb 5fef      	SUBI R30,-1
0005ec 4fff      	SBCI R31,-1
0005ed 4f6f      	SBCI R22,-1
0005ee 9508      	RET
                 
                 __ADDF12:
0005ef 935f      	PUSH R21
0005f0 df81      	RCALL __UNPACK
0005f1 3890      	CPI  R25,0x80
0005f2 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0005f3 3870      	CPI  R23,0x80
0005f4 f121      	BREQ __ADDF128
                 __ADDF121:
0005f5 2f57      	MOV  R21,R23
0005f6 1b59      	SUB  R21,R25
0005f7 f12b      	BRVS __ADDF1211
0005f8 f412      	BRPL __ADDF122
0005f9 dfde      	RCALL __SWAPACC
0005fa cffa      	RJMP __ADDF121
                 __ADDF122:
0005fb 3158      	CPI  R21,24
0005fc f018      	BRLO __ADDF123
0005fd 27aa      	CLR  R26
0005fe 27bb      	CLR  R27
0005ff 2788      	CLR  R24
                 __ADDF123:
000600 3058      	CPI  R21,8
000601 f028      	BRLO __ADDF124
000602 2fab      	MOV  R26,R27
000603 2fb8      	MOV  R27,R24
000604 2788      	CLR  R24
000605 5058      	SUBI R21,8
000606 cff9      	RJMP __ADDF123
                 __ADDF124:
000607 2355      	TST  R21
000608 f029      	BREQ __ADDF126
                 __ADDF125:
000609 9586      	LSR  R24
00060a 95b7      	ROR  R27
00060b 95a7      	ROR  R26
00060c 955a      	DEC  R21
00060d f7d9      	BRNE __ADDF125
                 __ADDF126:
00060e 2d50      	MOV  R21,R0
00060f 2551      	EOR  R21,R1
000610 f072      	BRMI __ADDF127
000611 dfd2      	RCALL __UADD12
000612 f438      	BRCC __ADDF129
000613 9567      	ROR  R22
000614 95f7      	ROR  R31
000615 95e7      	ROR  R30
000616 9573      	INC  R23
000617 f413      	BRVC __ADDF129
000618 c01f      	RJMP __MAXRES
                 __ADDF128:
000619 dfbe      	RCALL __SWAPACC
                 __ADDF129:
00061a df45      	RCALL __REPACK
00061b 915f      	POP  R21
00061c 9508      	RET
                 __ADDF1211:
00061d f7d8      	BRCC __ADDF128
00061e cffb      	RJMP __ADDF129
                 __ADDF127:
00061f 1bea      	SUB  R30,R26
000620 0bfb      	SBC  R31,R27
000621 0b68      	SBC  R22,R24
000622 f051      	BREQ __ZERORES
000623 f410      	BRCC __ADDF1210
000624 9400      	COM  R0
000625 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
000626 2366      	TST  R22
000627 f392      	BRMI __ADDF129
000628 0fee      	LSL  R30
000629 1fff      	ROL  R31
00062a 1f66      	ROL  R22
00062b 957a      	DEC  R23
00062c f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
00062d 27ee      	CLR  R30
00062e 27ff      	CLR  R31
00062f 01bf      	MOVW R22,R30
000630 915f      	POP  R21
000631 9508      	RET
                 
                 __MINRES:
000632 efef      	SER  R30
000633 efff      	SER  R31
000634 e76f      	LDI  R22,0x7F
000635 ef7f      	SER  R23
000636 915f      	POP  R21
000637 9508      	RET
                 
                 __MAXRES:
000638 efef      	SER  R30
000639 efff      	SER  R31
00063a e76f      	LDI  R22,0x7F
00063b e77f      	LDI  R23,0x7F
00063c 915f      	POP  R21
00063d 9508      	RET
                 
                 __MULF12:
00063e 935f      	PUSH R21
00063f df32      	RCALL __UNPACK
000640 3870      	CPI  R23,0x80
000641 f359      	BREQ __ZERORES
000642 3890      	CPI  R25,0x80
000643 f349      	BREQ __ZERORES
000644 2401      	EOR  R0,R1
000645 9408      	SEC
000646 1f79      	ADC  R23,R25
000647 f423      	BRVC __MULF124
000648 f324      	BRLT __ZERORES
                 __MULF125:
000649 2000      	TST  R0
00064a f33a      	BRMI __MINRES
00064b cfec      	RJMP __MAXRES
                 __MULF124:
00064c 920f      	PUSH R0
00064d 931f      	PUSH R17
00064e 932f      	PUSH R18
00064f 933f      	PUSH R19
000650 934f      	PUSH R20
000651 2711      	CLR  R17
000652 2722      	CLR  R18
000653 2799      	CLR  R25
000654 9f68      	MUL  R22,R24
000655 01a0      	MOVW R20,R0
000656 9f8f      	MUL  R24,R31
000657 2d30      	MOV  R19,R0
000658 0d41      	ADD  R20,R1
000659 1f59      	ADC  R21,R25
00065a 9f6b      	MUL  R22,R27
00065b 0d30      	ADD  R19,R0
00065c 1d41      	ADC  R20,R1
00065d 1f59      	ADC  R21,R25
00065e 9f8e      	MUL  R24,R30
00065f d027      	RCALL __MULF126
000660 9fbf      	MUL  R27,R31
000661 d025      	RCALL __MULF126
000662 9f6a      	MUL  R22,R26
000663 d023      	RCALL __MULF126
000664 9fbe      	MUL  R27,R30
000665 d01d      	RCALL __MULF127
000666 9faf      	MUL  R26,R31
000667 d01b      	RCALL __MULF127
000668 9fae      	MUL  R26,R30
000669 0d11      	ADD  R17,R1
00066a 1f29      	ADC  R18,R25
00066b 1f39      	ADC  R19,R25
00066c 1f49      	ADC  R20,R25
00066d 1f59      	ADC  R21,R25
00066e 2fe3      	MOV  R30,R19
00066f 2ff4      	MOV  R31,R20
000670 2f65      	MOV  R22,R21
000671 2f52      	MOV  R21,R18
000672 914f      	POP  R20
000673 913f      	POP  R19
000674 912f      	POP  R18
000675 911f      	POP  R17
000676 900f      	POP  R0
000677 2366      	TST  R22
000678 f02a      	BRMI __MULF122
000679 0f55      	LSL  R21
00067a 1fee      	ROL  R30
00067b 1fff      	ROL  R31
00067c 1f66      	ROL  R22
00067d c002      	RJMP __MULF123
                 __MULF122:
00067e 9573      	INC  R23
00067f f24b      	BRVS __MULF125
                 __MULF123:
000680 ded5      	RCALL __ROUND_REPACK
000681 915f      	POP  R21
000682 9508      	RET
                 
                 __MULF127:
000683 0d10      	ADD  R17,R0
000684 1d21      	ADC  R18,R1
000685 1f39      	ADC  R19,R25
000686 c002      	RJMP __MULF128
                 __MULF126:
000687 0d20      	ADD  R18,R0
000688 1d31      	ADC  R19,R1
                 __MULF128:
000689 1f49      	ADC  R20,R25
00068a 1f59      	ADC  R21,R25
00068b 9508      	RET
                 
                 _delay_ms:
00068c 9610      	adiw r26,0
00068d f039      	breq __delay_ms1
                 __delay_ms0:
00068e 95a8      	wdr
                +
00068f ee88     +LDI R24 , LOW ( 0x3E8 )
000690 e093     +LDI R25 , HIGH ( 0x3E8 )
                +__DELAY_USW_LOOP :
000691 9701     +SBIW R24 , 1
000692 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3E8
000693 9711      	sbiw r26,1
000694 f7c9      	brne __delay_ms0
                 __delay_ms1:
000695 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  47 r1 :  31 r2 :   1 r3 :   0 r4 :   4 r5 :   4 r6 :   3 r7 :   5 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  54 r17:  69 r18:  39 r19:  19 r20:  25 r21:  73 r22:  54 r23:  41 
r24:  53 r25:  31 r26: 144 r27:  56 r28:  26 r29:   2 r30: 376 r31: 112 
x  :  15 y  : 227 z  :  21 
Registers used: 27 out of 35 (77.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  20 add   :  16 
adiw  :  26 and   :   2 andi  :  26 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  33 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   1 brmi  :   6 brne  :  46 brpl  :   6 brsh  :   3 brtc  :   3 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   1 call  :   0 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  34 cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :  10 
cp    :  10 cpc   :   1 cpi   :  49 cpse  :   0 dec   :  14 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  12 inc   :   6 jmp   :  30 ld    :  30 ldd   :  88 ldi   : 167 
lds   :   4 lpm   :  15 lsl   :  12 lsr   :   4 mov   :  87 movw  :  28 
mul   :  13 muls  :   3 mulsu :   0 neg   :   8 nop   :   0 or    :   2 
ori   :   7 out   :  56 pop   :  18 push  :  17 rcall : 151 ret   :  63 
reti  :   1 rjmp  :  86 rol   :  16 ror   :  14 sbc   :   6 sbci  :  15 
sbi   :   5 sbic  :   1 sbis  :   1 sbiw  :  20 sbr   :   1 sbrc  :   4 
sbrs  :  14 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   9 
ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  83 std   :  49 sts   :   4 sub   :   5 subi  :  25 swap  :   3 
tst   :  15 wdr   :   1 
Instructions used: 77 out of 116 (66.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000d2c   3198    174   3372   16384  20.6%
[.dseg] 0x000060 0x000181      0     33     33    1024   3.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings
