;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#include <myds18b20ver2.h>
;
;/*
; * ds18b20 init
; */
;uint8_t ds18b20_reset(void) {
; 0001 000A uint8_t ds18b20_reset(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 000B 	uint8_t i;
; 0001 000C 
; 0001 000D 	//low for 480us
; 0001 000E 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
;PCODE: $0000000F VOL: 0
;	i -> R17
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0001 000F 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0001 0010 	delay_us(480);
;PCODE: $00000014 VOL: 0
; 0001 0011 
; 0001 0012 	//release line and wait for 60uS
; 0001 0013 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 0014 	delay_us(60);
;PCODE: $00000017 VOL: 0
; 0001 0015 
; 0001 0016 	//get value and wait 420us
; 0001 0017 	i = (DS18B20_PIN & (1<<DS18B20_DQ));
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 0018 	delay_us(420);
;PCODE: $0000001B VOL: 0
; 0001 0019 
; 0001 001A 	//return the read value, 0=ok, 1=error
; 0001 001B 	return i;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 001C }
;PCODE: $0000001F VOL: 0
;
;/*
; * write one bit
; */
;void ds18b20_writebit(uint8_t _bit){
; 0001 0021 void ds18b20_writebit(uint8_t _bit){
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0001 0022 	//low for 1uS
; 0001 0023 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
;PCODE: $00000022 VOL: 0
;	_bit -> Y+0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 0024 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 0025 	delay_us(1);
;PCODE: $00000027 VOL: 0
; 0001 0026 
; 0001 0027 	//if we want to write 1, release the line (if not will keep low)
; 0001 0028 	if(_bit)
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0001 0029 		DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 002A 
; 0001 002B 	//wait 60uS and release the line
; 0001 002C 	delay_us(60);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0001 002D 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 002E }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;/*
; * read one bit
; */
;uint8_t ds18b20_readbit(void){
; 0001 0033 uint8_t ds18b20_readbit(void){
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 0034 	uint8_t _bit=0;
; 0001 0035 
; 0001 0036 	//low for 1uS
; 0001 0037 	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
;PCODE: $00000036 VOL: 0
;	_bit -> R17
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 0038 	DS18B20_DDR |= (1<<DS18B20_DQ); //output
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 0039 	delay_us(1);
;PCODE: $0000003D VOL: 0
; 0001 003A 
; 0001 003B 	//release line and wait for 14uS
; 0001 003C 	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 003D 	delay_us(14);
;PCODE: $00000040 VOL: 0
; 0001 003E 
; 0001 003F 	//read the value
; 0001 0040 	if(DS18B20_PIN & (1<<DS18B20_DQ))
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 0041 		_bit=1;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0001 0042 
; 0001 0043 	//wait 45uS and return read value
; 0001 0044 	delay_us(45);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 0045 	return _bit;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 0046 }
;PCODE: $0000004B VOL: 0
;
;/*
; * write one byte
; */
;void ds18b20_writebyte(uint8_t _byte){
; 0001 004B void ds18b20_writebyte(uint8_t _byte){
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 004C 	uint8_t i=8;
; 0001 004D 	while(i--){
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;	_byte -> Y+1
;	i -> R17
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 004E 		ds18b20_writebit(_byte&1);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0001 004F 		_byte >>= 1;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0001 0050 	}
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0001 0051 }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;
;/*
; * read one byte
; */
;uint8_t ds18b20_readbyte(void){
; 0001 0056 uint8_t ds18b20_readbyte(void){
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0001 0057 	uint8_t i=8, n=0;
; 0001 0058 	while(i--){
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;	i -> R17
;	n -> R16
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0001 0059 		n >>= 1;
;PCODE: $00000074 VOL: 0
; 0001 005A 		n |= (ds18b20_readbit()<<7);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0001 005B 	}
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0001 005C 	return n;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0001 005D }
;PCODE: $0000007E VOL: 0
;
;/*
; * get temperature in celsius
; */
;double ds18b20_gettemp(void) {
; 0001 0062 double ds18b20_gettemp(void) {
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 0063 	uint8_t temperature[2];
; 0001 0064 	int8_t digit;
; 0001 0065 	uint16_t decimal;
; 0001 0066 	double retd = 0;
; 0001 0067 
; 0001 0068 	ds18b20_reset(); //reset
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;	temperature -> Y+8
;	digit -> R17
;	decimal -> R18,R19
;	retd -> Y+4
;PCODE: $0000008B VOL: 0
; 0001 0069 	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0001 006A 	ds18b20_writebyte(DS18B20_CMD_CONVERTTEMP); //start temperature conversion
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0001 006B 
; 0001 006C 	while(!ds18b20_readbit()); //wait until conversion is complete
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0001 006D 
; 0001 006E 	ds18b20_reset(); //reset
;PCODE: $00000096 VOL: 0
; 0001 006F 	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 0070 	ds18b20_writebyte(DS18B20_CMD_RSCRATCHPAD); //read scratchpad
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0001 0071 
; 0001 0072 	//read 2 byte from scratchpad
; 0001 0073 	temperature[0] = ds18b20_readbyte();
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0001 0074 	temperature[1] = ds18b20_readbyte();
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0001 0075 
; 0001 0076 	ds18b20_reset(); //reset
;PCODE: $0000009F VOL: 0
; 0001 0077 
; 0001 0078 	//store temperature integer digits
; 0001 0079 	digit = temperature[0]>>4;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0001 007A 	digit |= (temperature[1]&0x7)<<4;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0001 007B 
; 0001 007C 	//store temperature decimal digits
; 0001 007D 	decimal = temperature[0]&0xf;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0001 007E 	decimal *= DS18B20_DECIMALSTEPS;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0001 007F 
; 0001 0080 	//compose the double temperature value and return it
; 0001 0081 	retd = digit + decimal * 0.0001;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0001 0082 
; 0001 0083 	return retd;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0001 0084 }
;PCODE: $000000BF VOL: 0
