;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.6 Evaluation
;Automatic Program Generator
;© Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version : v5.0
;Date    : 31/3/2016
;Author  : Viet Anh IT, for evaluation andnon-commercial use only
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 4.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// I2C Bus functions
;#include <i2c.h>
;#include <ds1307.h>
;// 1 Wire Bus interface functions
;#include <1wire.h>
;
;// DS1820 Temperature Sensor functions
;#include <ds18b20.h>
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <delay.h>
;#include <string.h>
;
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 003A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003B char status,data;
; 0000 003C status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 003D data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 003E if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 003F    {
; 0000 0040    rx_buffer[rx_wr_index]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0041    if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0042    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0043       {
; 0000 0044       rx_counter=0;
;PCODE: $00000026 VOL: 0
; 0000 0045       rx_buffer_overflow=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0046       };
;PCODE: $0000002A VOL: 0
; 0000 0047    };
;PCODE: $0000002B VOL: 0
; 0000 0048 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;// Declare your global variables here
;unsigned char ma[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};

	.DSEG
;void quet(unsigned char x);
;void day();
;void hienthi(int x);
;
;void hienthinhietdo(unsigned char temp);
;void hienthithoigian(unsigned char hour, unsigned char minute);
;
;void uart_char_tx(unsigned char chr);
;unsigned char uart_getchar() ;
;void getState(unsigned char);
;
;
;float temp;
;unsigned char kytu='';
;unsigned char b=2;
;
;
;
;
;char mygetchar(void)
; 0000 0060 {

	.CSEG
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0061 char data;
; 0000 0062 if (rx_counter==0) return 0;
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0063 data=rx_buffer[rx_rd_index];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0064 if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0065 //#asm("cli")
; 0000 0066 --rx_counter;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0067 //#asm("sei")
; 0000 0068 return data;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0069 }
;PCODE: $00000047 VOL: 0
;
;// Declare your global variables here
;unsigned char my_variable;
;
;void main(void)
; 0000 006F {
;PCODE: $00000048 VOL: 0
; 0000 0070 // Declare your local variables here
; 0000 0071 unsigned char *t=0;
; 0000 0072 unsigned char h,m,s,i;
; 0000 0073 int x;
; 0000 0074 // Input/Output Ports initialization
; 0000 0075 // Port A initialization
; 0000 0076 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0077 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0078 PORTA=0x00;
;PCODE: $00000049 VOL: 0
;	*t -> R16,R17
;	h -> R19
;	m -> R18
;	s -> R21
;	i -> R20
;	x -> Y+0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0079 DDRA=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 007A 
; 0000 007B // Port B initialization
; 0000 007C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 007D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 007E PORTB=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 007F DDRB=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0080 
; 0000 0081 // Port C initialization
; 0000 0082 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0083 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0084 PORTC=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0085 DDRC=0xFF;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0086 
; 0000 0087 // Port D initialization
; 0000 0088 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0089 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 008A PORTD=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 008B DDRD=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 008C 
; 0000 008D // Timer/Counter 0 initialization
; 0000 008E // Clock source: System Clock
; 0000 008F // Clock value: Timer 0 Stopped
; 0000 0090 // Mode: Normal top=0xFF
; 0000 0091 // OC0 output: Disconnected
; 0000 0092 TCCR0=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0093 TCNT0=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0094 OCR0=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0095 
; 0000 0096 // Timer/Counter 1 initialization
; 0000 0097 // Clock source: System Clock
; 0000 0098 // Clock value: Timer1 Stopped
; 0000 0099 // Mode: Normal top=0xFFFF
; 0000 009A // OC1A output: Discon.
; 0000 009B // OC1B output: Discon.
; 0000 009C // Noise Canceler: Off
; 0000 009D // Input Capture on Falling Edge
; 0000 009E // Timer1 Overflow Interrupt: Off
; 0000 009F // Input Capture Interrupt: Off
; 0000 00A0 // Compare A Match Interrupt: Off
; 0000 00A1 // Compare B Match Interrupt: Off
; 0000 00A2 TCCR1A=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00A3 TCCR1B=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00A4 TCNT1H=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 00A5 TCNT1L=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00A6 ICR1H=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00A7 ICR1L=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00A8 OCR1AH=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00A9 OCR1AL=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00AA OCR1BH=0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00AB OCR1BL=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00AC 
; 0000 00AD // Timer/Counter 2 initialization
; 0000 00AE // Clock source: System Clock
; 0000 00AF // Clock value: Timer2 Stopped
; 0000 00B0 // Mode: Normal top=0xFF
; 0000 00B1 // OC2 output: Disconnected
; 0000 00B2 ASSR=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00B3 TCCR2=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00B4 TCNT2=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00B5 OCR2=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00B6 
; 0000 00B7 // External Interrupt(s) initialization
; 0000 00B8 // INT0: Off
; 0000 00B9 // INT1: Off
; 0000 00BA // INT2: Off
; 0000 00BB MCUCR=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00BC MCUCSR=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00BD 
; 0000 00BE // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00BF TIMSK=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00C0 
; 0000 00C1 // USART initialization
; 0000 00C2 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00C3 // USART Receiver: On
; 0000 00C4 // USART Transmitter: On
; 0000 00C5 // USART Mode: Asynchronous
; 0000 00C6 // USART Baud Rate: 9600
; 0000 00C7 UCSRA=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00C8 UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00C9 UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00CA UBRRH=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00CB UBRRL=0x19;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00CC 
; 0000 00CD // Analog Comparator initialization
; 0000 00CE // Analog Comparator: Off
; 0000 00CF // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00D0 ACSR=0x80;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00D1 SFIOR=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00D2 
; 0000 00D3 // ADC initialization
; 0000 00D4 // ADC disabled
; 0000 00D5 ADCSRA=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00D6 
; 0000 00D7 // SPI initialization
; 0000 00D8 // SPI disabled
; 0000 00D9 SPCR=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00DA 
; 0000 00DB // TWI initialization
; 0000 00DC // TWI disabled
; 0000 00DD TWCR=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00DE 
; 0000 00DF // I2C Bus initialization
; 0000 00E0 // I2C Port: PORTA
; 0000 00E1 // I2C SDA bit: 1
; 0000 00E2 // I2C SCL bit: 0
; 0000 00E3 // Bit Rate: 100 kHz
; 0000 00E4 // Note: I2C settings are specified in the
; 0000 00E5 // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 00E6 i2c_init();
;PCODE: $00000098 VOL: 0
; 0000 00E7 
; 0000 00E8 // 1 Wire Bus initialization
; 0000 00E9 // 1 Wire Data port: PORTB
; 0000 00EA // 1 Wire Data bit: 0
; 0000 00EB // Note: 1 Wire port settings are specified in the
; 0000 00EC // Project|Configure|C Compiler|Libraries|1 Wire menu.
; 0000 00ED w1_init();
;PCODE: $00000099 VOL: 0
; 0000 00EE ds18b20_init(t,0,0,DS18B20_9BIT_RES);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00EF rtc_init(0,0,0);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00F0 
; 0000 00F1 
; 0000 00F2 // Global enable interrupts
; 0000 00F3 #asm("sei")
;PCODE: $000000A7 VOL: 0
	sei
;PCODE: $000000A8 VOL: 0
; 0000 00F4 
; 0000 00F5 while (1)
;PCODE: $000000A9 VOL: 0
; 0000 00F6       {
; 0000 00F7       // Place your code here
; 0000 00F8        temp=ds18b20_temperature(t);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00F9          rtc_get_time(&h,&m,&s);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00FA          hienthithoigian(h,m);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00FB          delay_ms(2000);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00FC         hienthinhietdo(temp);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00FD         //hienthi(m);
; 0000 00FE          delay_ms(1000);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00FF          //hienthi(1234);
; 0000 0100        kytu=mygetchar();
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0101        // if(kytu !=0) putchar(kytu);
; 0000 0102        // printf("%c", my_variable);
; 0000 0103          //printf("Nhiet do hien tai la");
; 0000 0104          //kytu = uart_getchar();
; 0000 0105 
; 0000 0106          if(kytu=='t'){
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0107             //printf ("%c",a);
; 0000 0108             printf(" Nhiet do hien tai la %d oC\n\r",(unsigned char)temp );
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0109 
; 0000 010A        }
; 0000 010B         if (kytu == 'h'){
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 010C             printf(" Gio hien tai la %d:%d:%d\n\r",(unsigned char)h,(unsigned char)m,(unsigned char)s );
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 010D 
; 0000 010E             }
; 0000 010F 
; 0000 0110 
; 0000 0111       }
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0112 }
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;
;void hienthinhietdo(unsigned char temp)
; 0000 0115 {
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0116     unsigned char a,b;
; 0000 0117     a=temp/10;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;	temp -> Y+2
;	a -> R17
;	b -> R16
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0118     b=temp%10;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0119 
; 0000 011A 
; 0000 011B     quet(0xC6);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 011C     quet(0x9C);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 011D     quet(ma[b]);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 011E     quet(ma[a]);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 011F     day(); // push
;PCODE: $0000010C VOL: 0
; 0000 0120 }
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;void hienthithoigian(unsigned char hour, unsigned char minute)
; 0000 0122 {
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0123     unsigned char a,b,c,d;
; 0000 0124     a=hour/10;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;	hour -> Y+5
;	minute -> Y+4
;	a -> R17
;	b -> R16
;	c -> R19
;	d -> R18
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0125     b=hour%10;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0126     c=minute/10;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0127     d=minute%10;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0128     quet(ma[d]);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0129     quet(ma[c]);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 012A     quet(~(~ma[b]|0x80));
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 012B     quet(ma[a]);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 012C     day();
;PCODE: $00000144 VOL: 0
; 0000 012D }
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;void hienthi(int x){
; 0000 012E void hienthi(int x){
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 012F     unsigned char a,b,c,d;
; 0000 0130     int i=0;
; 0000 0131     a=x/1000;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;	x -> Y+6
;	a -> R17
;	b -> R16
;	c -> R19
;	d -> R18
;	i -> R20,R21
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0132     b=(x%1000)/100;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0133     c=(x%100)/10;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0134     d=(x%10);
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0135 
; 0000 0136     quet(ma[a]);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0137     quet(ma[b]);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0138     quet(ma[c]);
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0139     quet(ma[d]);
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 013A 
; 0000 013B     day();
;PCODE: $00000179 VOL: 0
; 0000 013C }
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;void quet (unsigned char x){
; 0000 013D void quet (unsigned char x){
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 013E     unsigned char i, temp;
; 0000 013F     for(i=0; i<8; i++){
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;	x -> Y+2
;	i -> R17
;	temp -> R16
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0140         temp=x;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 0141         temp=temp&0x80;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0142         if(temp==0x80){
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0143             PORTC.1=1;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 0144         }else{
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0145             PORTC.1=0;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0146         }
;PCODE: $00000199 VOL: 0
; 0000 0147         x=x*2;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0148         PORTC.0=0;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0149         PORTC.0=1;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 014A     }
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 014B }
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;
;void day(){
; 0000 014D void day(){
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 014E     PORTC.2=0;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 014F     PORTC.2=1;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0150 }
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;
;void uart_char_tx(unsigned char chr){
; 0000 0152 void uart_char_tx(unsigned char chr){
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0153       while (UDRE==1) {}; //cho den khi bit UDRE=1
;PCODE: $000001B7 VOL: 0
;	chr -> Y+0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0154       UDR=chr;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0155 }
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;unsigned char uart_getchar(){
; 0000 0156 unsigned char uart_getchar(){
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0157    unsigned char a='';
; 0000 0158    a = UDR;
;PCODE: $000001C3 VOL: 0
;	a -> R17
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0159    return a;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 015A }
;PCODE: $000001CB VOL: 0
;
;void getState(unsigned char a){
; 0000 015C void getState(unsigned char a){
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 015D     switch (a){
;PCODE: $000001CE VOL: 0
;	a -> Y+0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 015E         case 't':
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 015F         printf("Nhiet do hien tai la %f",temp );
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0160         break;
;PCODE: $000001DC VOL: 0
; 0000 0161         case 'h':
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0162         printf("xin chao");
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0163         break;
;PCODE: $000001E7 VOL: 0
; 0000 0164     }
;PCODE: $000001E8 VOL: 0
; 0000 0165 }
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;
;//interrupt [USART_RXC] void rx_isr(){ //ngat nhan khi bit RXC =1
;//  kytu = UDR;
;//}
