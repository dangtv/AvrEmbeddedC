;#include <myds1307rtc.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;//Khoi dong TWI
;unsigned char registry_ds1307[7]; // mang de luu tam cac gia tri doc duoc tu thanh ghi cua ds1307
;
;void TWI_Init(void) {
; 0002 0006 void TWI_Init(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0007     TWSR = 0x00; //Prescaler=1
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0002 0008     TWBR = _100K;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0002 0009     TWCR = (1 << TWINT) | (1 << TWEN);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0002 000A }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;///chon dia chi thanh ghi can thao tac, dummy write
;//Addr: dia thi thanh ghi can ghi
;
;unsigned char TWI_DS1307_wadr(unsigned char Addr) {
; 0002 000F unsigned char TWI_DS1307_wadr(unsigned char Addr) {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0002 0010 
; 0002 0011     TWCR = TWI_START; //goi START condition
;PCODE: $00000019 VOL: 0
;	Addr -> Y+0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0002 0012     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0002 0013     if ((TWSR & 0xF8) != 0x08) return TWSR; //neu goi Start co loi thi thoat
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0002 0014 
; 0002 0015     TWDR = (DS1307_SLA << 1) + TWI_W; //dia chi DS va bit W
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0002 0016     TWCR = TWI_Clear_TWINT; //xoa TWINT, bat dau goi SLA
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0002 0017     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0002 0018     if ((TWSR & 0xF8) != 0x18) return TWSR; //device address send error, escape anyway
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0002 0019 
; 0002 001A     TWDR = Addr; //goi dia chi thanh ghi can ghi vao
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0002 001B     TWCR = TWI_Clear_TWINT; //start send address by cleaning TWINT
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0002 001C     while ((TWCR & 0x80) == 0x00); //check and wait for TWINT bit=1
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0002 001D     if ((TWSR & 0xF8) != 0x28) return TWSR; //neu du lieu goi ko thanh cong thi thoat
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0002 001E 
; 0002 001F     TWCR = TWI_STOP; //STOP condition
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0002 0020     return 0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0002 0021 }
;PCODE: $00000056 VOL: 0
;
;//ghi 1 mang dat vao DS
;//Addr: dia thi thanh ghi can ghi
;//Data[]: mang du lieu
;//len: so luong byte can ghi
;
;unsigned char TWI_DS1307_wblock(unsigned char Addr, unsigned char Data[], unsigned char len) {
; 0002 0028 unsigned char TWI_DS1307_wblock(unsigned char Addr, unsigned char Data[], unsigned char len) {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0002 0029     unsigned char i = 0;
; 0002 002A     TWCR = TWI_START; //goi START condition
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;	Addr -> Y+4
;	Data -> Y+2
;	len -> Y+1
;	i -> R17
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0002 002B     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0002 002C     if ((TWSR & 0xF8) != 0x08) return TWSR; //neu goi Start co loi thi thoat
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0002 002D 
; 0002 002E     TWDR = (DS1307_SLA << 1) + TWI_W; //dia chi DS va bit W
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0002 002F     TWCR = TWI_Clear_TWINT; //xoa TWINT de bat dau goi
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0002 0030     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0002 0031     if ((TWSR & 0xF8) != 0x18) return TWSR; //neu co loi truyen SLA, thoat
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0002 0032 
; 0002 0033     TWDR = Addr; //goi dia chi thanh ghi can ghi vao
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0002 0034     TWCR = TWI_Clear_TWINT; //xoa TWINT de bat dau goi
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0002 0035     while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0002 0036     if ((TWSR & 0xF8) != 0x28) return TWSR;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0002 0037 
; 0002 0038     for (i = 0; i < len; i++) {
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0002 0039         TWDR = Data[i]; //chuan bi xuat du lieu
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0002 003A         TWCR = TWI_Clear_TWINT; //xoa TWINT, bat dau send
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0002 003B         while ((TWCR & 0x80) == 0x00); //cho TWINT bit=1
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0002 003C         if ((TWSR & 0xF8) != 0x28) return TWSR; //neu status ko phai la 0x28 thi return
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0002 003D     }
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0002 003E 
; 0002 003F     TWCR = TWI_STOP; //STOP condition
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0002 0040     return 0;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0002 0041 }
;PCODE: $000000C6 VOL: 0
;
;//doc 1 mang tu DS
;
;unsigned char TWI_DS1307_rblock(unsigned char Data[], unsigned char len) {
; 0002 0045 unsigned char TWI_DS1307_rblock(unsigned char Data[], unsigned char len) {
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0002 0046     unsigned char i;
; 0002 0047 
; 0002 0048     TWCR = TWI_START; // Start--------------------------------------------------------------------
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;	Data -> Y+2
;	len -> Y+1
;	i -> R17
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0002 0049     while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x08)); //cho TWINT bit=1 va goi START thanh cong
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0002 004A 
; 0002 004B     TWDR = (DS1307_SLA << 1) + TWI_R; //goi dia chi SLA +READ
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0002 004C     TWCR = TWI_Clear_TWINT; //bat dau, xoa TWINT
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0002 004D     while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x40)); //cho TWINT bit=1	va goi SLA thanh cong
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0002 004E 
; 0002 004F     //nhan len-1 bytes dau tien---------------------
; 0002 0050     for (i = 0; i < len - 1; i++) {
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0002 0051         TWCR = TWI_Read_ACK; //xoa TWINT,se goi ACK sau khi nhan moi byte
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0002 0052         while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x50)); //cho TWINT bit=1 hoac nhan duoc ACK
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0002 0053         Data[i] = TWDR; //doc du lieu vao mang Data
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0002 0054     }
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0002 0055     //nhan byte cuoi
; 0002 0056     TWCR = TWI_Clear_TWINT; //xoa TWINT de nhan byte cuoi, sau do set NOT ACK
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0002 0057     while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x58)); //cho TWIN=1 hoac trang thai not ack
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0002 0058     Data[len - 1] = TWDR;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0002 0059 
; 0002 005A     TWCR = TWI_STOP; //STOP condition
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0002 005B     return 0;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0002 005C }
;PCODE: $00000129 VOL: 0
;
;//----------------------------------------------------------------------------
;// xay dung lai cac ham ma khong dung thu vien
;
;// doi BCD sang thap phan va nguoc lai------------
;
;unsigned char BCD2Dec(unsigned char BCD) {
; 0002 0063 unsigned char BCD2Dec(unsigned char BCD) {
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0002 0064     unsigned char L, H;
; 0002 0065     L = BCD & 0x0F;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;	BCD -> Y+2
;	L -> R17
;	H -> R16
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0002 0066     H = (BCD >> 4)*10;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0002 0067     return (H + L);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0002 0068 }
;PCODE: $0000013F VOL: 0
;
;unsigned char Dec2BCD(unsigned char Dec) {
; 0002 006A unsigned char Dec2BCD(unsigned char Dec) {
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0002 006B     unsigned char L, H;
; 0002 006C     L = Dec % 10;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;	Dec -> Y+2
;	L -> R17
;	H -> R16
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0002 006D     H = (Dec / 10) << 4;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0002 006E     return (H + L);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0002 006F }
;PCODE: $00000158 VOL: 0
;
;Time myGetTimeFromDS1307() {
; 0002 0071 Time myGetTimeFromDS1307() {
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0002 0072     Time time;
; 0002 0073     time.Hour = 10;
;PCODE: $0000015B VOL: 0
;	time -> Y+0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0002 0074     time.Minute = 15;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0002 0075     //    return time;
; 0002 0076     TWI_DS1307_wadr(0x00); //set dia chi ve 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0002 0077     delay_ms(1); //cho DS1307 xu li
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0002 0078     TWI_DS1307_rblock(registry_ds1307, 7); //doc ca khoi thoi gian (7 bytes)
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0002 0079 
; 0002 007A     time.Second = BCD2Dec(registry_ds1307[0] & 0x7F);
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0002 007B     time.Minute = BCD2Dec(registry_ds1307[1]);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0002 007C     // mode lay tu bit 6 ( =0 la 24h; =1 la 12h)
; 0002 007D     // mode = 0 la 24h, =1 la 12h
; 0002 007E     time.Mode = ((registry_ds1307[2] & 0x40) != 0);
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0002 007F     // AM hay PM lay tu bit 5
; 0002 0080     time.AP = ((registry_ds1307[2] & 0x20) != 0);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0002 0081     if (time.Mode != 0) time.Hour = BCD2Dec(registry_ds1307[2] & 0x1F); //mode 12h
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0002 0082     else time.Hour = BCD2Dec(registry_ds1307[2] & 0x3F); //mode 24h
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0002 0083     time.Date = BCD2Dec(registry_ds1307[4]);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0002 0084     time.Month = BCD2Dec(registry_ds1307[5]);
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0002 0085     time.Year = BCD2Dec(registry_ds1307[6]);
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0002 0086     return time;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0002 0087 }
;PCODE: $000001A5 VOL: 0
;
;void mySetTimeForDS1307(Time * t) {
; 0002 0089 void mySetTimeForDS1307(Time * t) {
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0002 008A     registry_ds1307[0] = Dec2BCD(t->Second);
;PCODE: $000001A8 VOL: 0
;	*t -> Y+0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0002 008B 
; 0002 008C     registry_ds1307[1] = Dec2BCD(t->Minute);
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0002 008D     if (t->Mode != 0) // che do hien thi 12h
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0002 008E         // bit 7 = 0; bit 6 =1;(che do 12h), 0: che do 24h
; 0002 008F         //; bit 5 =0 -> AM, 1->PM
; 0002 0090         //5bit con lai la ma BCD cua gio
; 0002 0091         registry_ds1307[2] = Dec2BCD(t->Hour) | (t->Mode << 6) | (t->AP << 5); //mode 12h
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0002 0092 
; 0002 0093     else
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0002 0094         // bit 7 = 0; bit 6 =0;(che do 24h) ;
; 0002 0095         registry_ds1307[2] = Dec2BCD(t->Hour); //mode 24h
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0002 0096 
; 0002 0097     registry_ds1307[4] = Dec2BCD(t->Date);
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0002 0098     registry_ds1307[5] = Dec2BCD(t->Month);
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0002 0099     registry_ds1307[6] = Dec2BCD(t->Year);
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0002 009A 
; 0002 009B 
; 0002 009C     TWI_DS1307_wblock(0x00, registry_ds1307, 7); //doc ca khoi thoi gian (7 bytes)
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0002 009D     delay_ms(1); //cho DS1307 xu li
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0002 009E }
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
