;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.6 Evaluation
;Automatic Program Generator
;ï¿½ Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 4.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
; *****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;//#include <myds1307rtc.h>
;#include <myds1307rtcver2.h>
;
;
;//#include <myds18b20ver1.h>
;#include <myds18b20ver2.h>
;
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <delay.h>
;#include <string.h>
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index, rx_rd_index, rx_counter;
;#else
;unsigned int rx_wr_index, rx_rd_index, rx_counter;
;#endif
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;// USART Receiver interrupt service routine
;
;interrupt [USART_RXC] void usart_rx_isr(void) {
; 0005 0034 interrupt [12] void usart_rx_isr(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0005 0035     char status, data;
; 0005 0036     status = UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0005 0037     data = UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0005 0038     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0005 0039         rx_buffer[rx_wr_index] = data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0005 003A         if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index = 0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0005 003B         if (++rx_counter == RX_BUFFER_SIZE) {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0005 003C             rx_counter = 0;
;PCODE: $00000026 VOL: 0
; 0005 003D             rx_buffer_overflow = 1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0005 003E         };
;PCODE: $0000002A VOL: 0
; 0005 003F     };
;PCODE: $0000002B VOL: 0
; 0005 0040 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;// Declare your global variables here
;unsigned char ma[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};

	.DSEG
;void quet(unsigned char x);
;void day();
;void hienthi(int x);
;
;void hienthinhietdo(unsigned char temp);
;void hienthithoigian(unsigned char hour, unsigned char minute);
;
;void uart_char_tx(unsigned char chr);
;unsigned char uart_getchar();
;void getState(unsigned char);
;
;
;float temp;
;unsigned char kytu = '';
;unsigned char b = 2;
;
;byte ttemp0; // first byte
;byte ttemp1;
;
;char mygetchar(void) {
; 0005 0057 char mygetchar(void) {

	.CSEG
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0005 0058     char data;
; 0005 0059     if (rx_counter == 0) return 0;
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0005 005A     data = rx_buffer[rx_rd_index];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0005 005B     if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0005 005C     //#asm("cli")
; 0005 005D     --rx_counter;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0005 005E     //#asm("sei")
; 0005 005F     return data;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0005 0060 }
;PCODE: $00000047 VOL: 0
;
;// Declare your global variables here
;unsigned char my_variable;
;
;void main(void) {
; 0005 0065 void main(void) {
;PCODE: $00000048 VOL: 0
; 0005 0066     // Declare your local variables here
; 0005 0067     unsigned char *t = 0;
; 0005 0068     unsigned char h, m, s, i;
; 0005 0069     int x;
; 0005 006A     Time time = {30, 15, 10, 5, 12, 5, 16, 1, 1}; // thoi gian hien tai
; 0005 006B     // Input/Output Ports initialization
; 0005 006C     // Port A initialization
; 0005 006D     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0005 006E     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0005 006F     PORTA = 0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;	*t -> R16,R17
;	h -> R19
;	m -> R18
;	s -> R21
;	i -> R20
;	x -> Y+9
;	time -> Y+0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0005 0070     //    DDRA = 0x00;
; 0005 0071     DDRA = 0xFF;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0005 0072 
; 0005 0073     // Port B initialization
; 0005 0074     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0005 0075     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0005 0076     PORTB = 0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0005 0077     DDRB = 0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0005 0078 
; 0005 0079     // Port C initialization
; 0005 007A     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0005 007B     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0005 007C     PORTC = 0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0005 007D     //    DDRC = 0xFF;
; 0005 007E     DDRC = 0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0005 007F 
; 0005 0080     // Port D initialization
; 0005 0081     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0005 0082     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0005 0083     PORTD = 0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0005 0084     DDRD = 0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0005 0085 
; 0005 0086     // Timer/Counter 0 initialization
; 0005 0087     // Clock source: System Clock
; 0005 0088     // Clock value: Timer 0 Stopped
; 0005 0089     // Mode: Normal top=0xFF
; 0005 008A     // OC0 output: Disconnected
; 0005 008B     TCCR0 = 0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0005 008C     TCNT0 = 0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0005 008D     OCR0 = 0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0005 008E 
; 0005 008F     // Timer/Counter 1 initialization
; 0005 0090     // Clock source: System Clock
; 0005 0091     // Clock value: Timer1 Stopped
; 0005 0092     // Mode: Normal top=0xFFFF
; 0005 0093     // OC1A output: Discon.
; 0005 0094     // OC1B output: Discon.
; 0005 0095     // Noise Canceler: Off
; 0005 0096     // Input Capture on Falling Edge
; 0005 0097     // Timer1 Overflow Interrupt: Off
; 0005 0098     // Input Capture Interrupt: Off
; 0005 0099     // Compare A Match Interrupt: Off
; 0005 009A     // Compare B Match Interrupt: Off
; 0005 009B     TCCR1A = 0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0005 009C     TCCR1B = 0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0005 009D     TCNT1H = 0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0005 009E     TCNT1L = 0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0005 009F     ICR1H = 0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0005 00A0     ICR1L = 0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0005 00A1     OCR1AH = 0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0005 00A2     OCR1AL = 0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0005 00A3     OCR1BH = 0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0005 00A4     OCR1BL = 0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0005 00A5 
; 0005 00A6     // Timer/Counter 2 initialization
; 0005 00A7     // Clock source: System Clock
; 0005 00A8     // Clock value: Timer2 Stopped
; 0005 00A9     // Mode: Normal top=0xFF
; 0005 00AA     // OC2 output: Disconnected
; 0005 00AB     ASSR = 0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0005 00AC     TCCR2 = 0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0005 00AD     TCNT2 = 0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0005 00AE     OCR2 = 0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0005 00AF 
; 0005 00B0     // External Interrupt(s) initialization
; 0005 00B1     // INT0: Off
; 0005 00B2     // INT1: Off
; 0005 00B3     // INT2: Off
; 0005 00B4     MCUCR = 0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0005 00B5     MCUCSR = 0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0005 00B6 
; 0005 00B7     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0005 00B8     TIMSK = 0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0005 00B9 
; 0005 00BA     // USART initialization
; 0005 00BB     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0005 00BC     // USART Receiver: On
; 0005 00BD     // USART Transmitter: On
; 0005 00BE     // USART Mode: Asynchronous
; 0005 00BF     // USART Baud Rate: 9600
; 0005 00C0     UCSRA = 0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0005 00C1     UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0005 00C2     UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0005 00C3     UBRRH = 0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0005 00C4     UBRRL = 0x19;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0005 00C5 
; 0005 00C6     // Analog Comparator initialization
; 0005 00C7     // Analog Comparator: Off
; 0005 00C8     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0005 00C9     ACSR = 0x80;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0005 00CA     SFIOR = 0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0005 00CB 
; 0005 00CC     // ADC initialization
; 0005 00CD     // ADC disabled
; 0005 00CE     ADCSRA = 0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0005 00CF 
; 0005 00D0     // SPI initialization
; 0005 00D1     // SPI disabled
; 0005 00D2     SPCR = 0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0005 00D3 
; 0005 00D4     // TWI initialization
; 0005 00D5     // TWI disabled
; 0005 00D6     TWCR = 0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0005 00D7 
; 0005 00D8     // I2C Bus initialization
; 0005 00D9     // I2C Port: PORTA
; 0005 00DA     // I2C SDA bit: 1
; 0005 00DB     // I2C SCL bit: 0
; 0005 00DC     // Bit Rate: 100 kHz
; 0005 00DD     // Note: I2C settings are specified in the
; 0005 00DE     // Project|Configure|C Compiler|Libraries|I2C menu.
; 0005 00DF     //    i2c_init();
; 0005 00E0 
; 0005 00E1     // 1 Wire Bus initialization
; 0005 00E2     // 1 Wire Data port: PORTB
; 0005 00E3     // 1 Wire Data bit: 0
; 0005 00E4     // Note: 1 Wire port settings are specified in the
; 0005 00E5     // Project|Configure|C Compiler|Libraries|1 Wire menu.
; 0005 00E6     //    w1_init();
; 0005 00E7     //    ds18b20_init(t, 0, 0, DS18B20_9BIT_RES);
; 0005 00E8     //    rtc_init(0, 0, 0);
; 0005 00E9 
; 0005 00EA     //    TWI_Init(); //khoi dong TWI dung cho myds1307rtc.h
; 0005 00EB     I2C_Init(); //khoi dong TWI dung cho myds1307rtcver2.h
;PCODE: $0000009C VOL: 0
; 0005 00EC 
; 0005 00ED     // Global enable interrupts
; 0005 00EE #asm("sei")
;PCODE: $0000009D VOL: 0
	sei
;PCODE: $0000009E VOL: 0
; 0005 00EF 
; 0005 00F0     while (1) {
;PCODE: $0000009F VOL: 0
; 0005 00F1 
; 0005 00F2         // nhiet do
; 0005 00F3         int whole = 0, decimal = 0;
; 0005 00F4 
; 0005 00F5         // hien thi nhiet do su dung myds18b20ver1.h
; 0005 00F6         //        therm_ReadTempC(NULL, &whole, &decimal);
; 0005 00F7         //        hienthinhietdo(whole);
; 0005 00F8 
; 0005 00F9         // hien thi nhiet do su dung myds18b20ver2.h
; 0005 00FA         temp = ds18b20_gettemp();
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;	x -> Y+13
;	time -> Y+4
;	whole -> Y+2
;	decimal -> Y+0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0005 00FB         hienthinhietdo(temp);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0005 00FC 
; 0005 00FD         delay_ms(1000);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0005 00FE 
; 0005 00FF         //        temp = ds18b20_temperature(t);
; 0005 0100 
; 0005 0101         // lay thoi gian
; 0005 0102         //        mySetTimeForDS1307ver2(&time);
; 0005 0103         //        time = myGetTimeFromDS1307();
; 0005 0104         time = myGetTimeFromDS1307ver2();
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0005 0105         hienthithoigian(time.Hour + time.Mode * time.AP * 12, time.Minute); // hien thi theo 24h
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0005 0106         delay_ms(2000);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0005 0107 
; 0005 0108 
; 0005 0109         kytu = mygetchar();
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0005 010A         // if(kytu !=0) putchar(kytu);
; 0005 010B         // printf("%c", my_variable);
; 0005 010C         //printf("Nhiet do hien tai la");
; 0005 010D         //kytu = uart_getchar();
; 0005 010E 
; 0005 010F         if (kytu == 't') {
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0005 0110             //printf ("%c",a);
; 0005 0111             printf(" Nhiet do hien tai la %d oC\n\r", (unsigned char) temp);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0005 0112 
; 0005 0113         }
; 0005 0114         if (kytu == 'h') {
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0005 0115             printf(" Gio hien tai la %d:%d:%d\n\r", (unsigned char) h, (unsigned char) m, (unsigned char) s);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0005 0116 
; 0005 0117         }
; 0005 0118 
; 0005 0119 
; 0005 011A     }
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0005 011B }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;
;void hienthinhietdo(unsigned char temp) {
; 0005 011D void hienthinhietdo(unsigned char temp) {
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0005 011E     unsigned char a, b;
; 0005 011F     a = temp / 10;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;	temp -> Y+2
;	a -> R17
;	b -> R16
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0005 0120     b = temp % 10;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0005 0121 
; 0005 0122 
; 0005 0123     quet(0xC6);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0005 0124     quet(0x9C);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0005 0125     quet(ma[b]);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0005 0126     quet(ma[a]);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0005 0127     day(); // push
;PCODE: $0000010A VOL: 0
; 0005 0128 }
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;
;void hienthithoigian(unsigned char hour, unsigned char minute) {
; 0005 012A void hienthithoigian(unsigned char hour, unsigned char minute) {
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0005 012B     unsigned char a, b, c, d;
; 0005 012C     a = hour / 10;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;	hour -> Y+5
;	minute -> Y+4
;	a -> R17
;	b -> R16
;	c -> R19
;	d -> R18
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0005 012D     b = hour % 10;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0005 012E     c = minute / 10;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0005 012F     d = minute % 10;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0005 0130     quet(ma[d]);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0005 0131     quet(ma[c]);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0005 0132     quet(~(~ma[b] | 0x80));
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0005 0133     quet(ma[a]);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0005 0134     day();
;PCODE: $00000142 VOL: 0
; 0005 0135 }
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;
;void hienthi(int x) {
; 0005 0137 void hienthi(int x) {
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0005 0138     unsigned char a, b, c, d;
; 0005 0139     int i = 0;
; 0005 013A     a = x / 1000;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;	x -> Y+6
;	a -> R17
;	b -> R16
;	c -> R19
;	d -> R18
;	i -> R20,R21
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0005 013B     b = (x % 1000) / 100;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0005 013C     c = (x % 100) / 10;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0005 013D     d = (x % 10);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0005 013E 
; 0005 013F     quet(ma[a]);
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0005 0140     quet(ma[b]);
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0005 0141     quet(ma[c]);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0005 0142     quet(ma[d]);
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0005 0143 
; 0005 0144     day();
;PCODE: $00000177 VOL: 0
; 0005 0145 }
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;
;void quet(unsigned char x) {
; 0005 0147 void quet(unsigned char x) {
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0005 0148     unsigned char i, temp;
; 0005 0149     for (i = 0; i < 8; i++) {
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;	x -> Y+2
;	i -> R17
;	temp -> R16
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0005 014A         temp = x;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0005 014B         temp = temp & 0x80;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0005 014C         if (temp == 0x80) {
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0005 014D             PORTA.1 = 1;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0005 014E         } else {
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0005 014F             PORTA.1 = 0;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0005 0150         }
;PCODE: $00000197 VOL: 0
; 0005 0151         x = x * 2;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0005 0152         PORTA.0 = 0;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0005 0153         PORTA.0 = 1;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0005 0154     }
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0005 0155 }
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;
;void day() {
; 0005 0157 void day() {
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0005 0158     PORTA.2 = 0;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0005 0159     PORTA.2 = 1;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0005 015A }
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;
;void uart_char_tx(unsigned char chr) {
; 0005 015C void uart_char_tx(unsigned char chr) {
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0005 015D     while (UDRE == 1) {
;PCODE: $000001B5 VOL: 0
;	chr -> Y+0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0005 015E     }; //cho den khi bit UDRE=1
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0005 015F     UDR = chr;
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0005 0160 }
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;
;unsigned char uart_getchar() {
; 0005 0162 unsigned char uart_getchar() {
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0005 0163     unsigned char a = '';
; 0005 0164     a = UDR;
;PCODE: $000001C1 VOL: 0
;	a -> R17
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0005 0165     return a;
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0005 0166 }
;PCODE: $000001C9 VOL: 0
;
;void getState(unsigned char a) {
; 0005 0168 void getState(unsigned char a) {
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0005 0169     switch (a) {
;PCODE: $000001CC VOL: 0
;	a -> Y+0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0005 016A         case 't':
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0005 016B             printf("Nhiet do hien tai la %f", temp);
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0005 016C             break;
;PCODE: $000001DA VOL: 0
; 0005 016D         case 'h':
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0005 016E             printf("xin chao");
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0005 016F             break;
;PCODE: $000001E5 VOL: 0
; 0005 0170     }
;PCODE: $000001E6 VOL: 0
; 0005 0171 }
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;
;//interrupt [USART_RXC] void rx_isr(){ //ngat nhan khi bit RXC =1
;//  kytu = UDR;
;//}
;
;
