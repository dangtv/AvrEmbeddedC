;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.6 Evaluation
;Automatic Program Generator
;ï¿½ Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 4.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
; *****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;//#include <myds1307rtc.h>
;#include <myds1307rtcver2.h>
;
;
;//#include <myds18b20ver1.h>
;#include <myds18b20ver2.h>
;
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <delay.h>
;#include <string.h>
;#include <io.h>
;#include <interrupt.h>
;	flags -> R17

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
	cli
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;#define IS_MASTER 1
;#define MY_ADDRESS '2'
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index, rx_rd_index, rx_counter;
;#else
;unsigned int rx_wr_index, rx_rd_index, rx_counter;
;#endif
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;// USART Receiver interrupt service routine
;
;
;// Declare your global variables here
;unsigned char ma[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};

	.DSEG
;void quet(unsigned char x);
;void day();
;void hienthi(int x);
;
;void hienthinhietdo(unsigned char temp);
;void hienthithoigian(unsigned char hour, unsigned char minute);
;
;void uart_char_tx(unsigned char chr);
;void uart_address_tx(unsigned char chr);
;unsigned char uart_getchar();
;void getState(unsigned char);
;void process_received_data();
;
;float temp;
;unsigned char kytu = '';
;unsigned char b = 2;
;unsigned char received_byte = '';
;unsigned char received_package[10];
;int isComplete = 1;
;int package_size = 0;
;int slave_enable = 0;
;
;byte ttemp0; // first byte
;byte ttemp1;
;
;void execute_query();
;void send_confirm_to_master();
;void disable_slave();
;void ensable_slave();
;// thuc thi cau lenh doc tu goi tin (package))
;
;void return_data_to_master(unsigned char d1, unsigned char d2, unsigned char d3, unsigned char d4, unsigned char d5) {
; 0005 005A void return_data_to_master(unsigned char d1, unsigned char d2, unsigned char d3, unsigned char d4, unsigned char d5) {

	.CSEG
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0005 005B     uart_char_tx('@');
;PCODE: $00000019 VOL: 0
;	d1 -> Y+4
;	d2 -> Y+3
;	d3 -> Y+2
;	d4 -> Y+1
;	d5 -> Y+0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0005 005C     delay_ms(100);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0005 005D     uart_char_tx(d1); //printf("%d",d1);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0005 005E     delay_ms(100);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0005 005F     uart_char_tx(d2);//printf("%d",d2);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0005 0060     delay_ms(100);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0005 0061     uart_char_tx(d3);//printf("%d",d3);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0005 0062     delay_ms(100);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0005 0063     uart_char_tx(d4);//printf("%d",d4);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0005 0064     delay_ms(100);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0005 0065     uart_char_tx(d5);//printf("%d",d5);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0005 0066     delay_ms(100);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0005 0067     uart_char_tx('#');
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0005 0068     delay_ms(100);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0005 0069     disable_slave();
;PCODE: $0000003D VOL: 0
; 0005 006A }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;void return_data_to_computer(unsigned char d1, unsigned char d2, unsigned char d3, unsigned char d4, unsigned char d5){
; 0005 006C void return_data_to_computer(unsigned char d1, unsigned char d2, unsigned char d3, unsigned char d4, unsigned char d5){
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0005 006D     hienthi(111);delay_ms(3000);
;PCODE: $00000043 VOL: 0
;	d1 -> Y+4
;	d2 -> Y+3
;	d3 -> Y+2
;	d4 -> Y+1
;	d5 -> Y+0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0005 006E     uart_char_tx('&');
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0005 006F     delay_ms(100);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0005 0070     uart_char_tx(d1);hienthi(d1);delay_ms(2000);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0005 0071     delay_ms(100);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0005 0072     uart_char_tx(d2);hienthi(d2);delay_ms(2000);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0005 0073     delay_ms(100);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0005 0074     uart_char_tx(d3);hienthi(d3);delay_ms(2000);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0005 0075     delay_ms(100);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0005 0076     uart_char_tx(d4);hienthi(d4);delay_ms(2000);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0005 0077     delay_ms(100);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0005 0078     uart_char_tx(d5);hienthi(d5);delay_ms(2000);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0005 0079     delay_ms(100);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0005 007A     uart_char_tx('#');
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0005 007B     delay_ms(100);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0005 007C 
; 0005 007D }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;
;void execute_query() {
; 0005 007F void execute_query() {
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0005 0080     Time t;
; 0005 0081 
; 0005 0082     if (IS_MASTER) {
;PCODE: $0000008A VOL: 0
;	t -> Y+0
; 0005 0083         hienthi(package_size); delay_ms(4000);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0005 0084         // thuc hien cau truy van nhan duoc tren master
; 0005 0085         if (package_size == 4) { // co the nhan biet bang byte dau tien khac 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0005 0086             // gui dia chi cho slave, sau do cho xac nhan tu slave
; 0005 0087             uart_address_tx(received_package[1]);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0005 0088             //            if (received_package[2] == 't') {
; 0005 0089             //                //printf ("%c",a);
; 0005 008A             //                temp = ds18b20_gettemp();
; 0005 008B             //                uart_char_tx('T');
; 0005 008C             //                printf(" Nhiet do hien tai la %d oC\n\r", (unsigned char) temp);
; 0005 008D             //
; 0005 008E             //            }
; 0005 008F             //            if (received_package[2] == 'h') {
; 0005 0090             //                t = myGetTimeFromDS1307ver2();
; 0005 0091             //                printf(" Gio hien tai la %d:%d:%d\n\r", (unsigned char) (t.Hour + t.Mode * t.AP * 12), (un ...
; 0005 0092             //
; 0005 0093             //            }
; 0005 0094 
; 0005 0095         }
; 0005 0096         if(package_size == 7) { // co the nhan biet goi tin data bang byte dau tien luon =0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0005 0097             // day la goi tin data
; 0005 0098             // nhan biet nhiet do hay thoi gian dua vao byte so 3 = 0 hay khac 0
; 0005 0099             hienthi(55);delay_ms(4000);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0005 009A             if(received_package[2] ==0){
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0005 009B                 // day la goi nhiet do
; 0005 009C                 temp = received_package[4]+received_package[5]/10;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0005 009D                 return_data_to_computer(0, 0, 0,received_package[4],received_package[5]);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0005 009E             }
; 0005 009F             if(received_package[2] == 1){
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0005 00A0                 // day la goi thoi gian
; 0005 00A1                 t.Hour = received_package[3];
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0005 00A2                 t.Minute = received_package[4];
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0005 00A3                 t.Second = received_package[5];
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0005 00A4                 return_data_to_computer(0,1,received_package[3],received_package[4],received_package[5]);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0005 00A5             }
; 0005 00A6         }
;PCODE: $000000D6 VOL: 0
; 0005 00A7     } else {
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0005 00A8         // thuc hien cau truy van nhan duoc tren slave
; 0005 00A9         if (package_size == 4) {
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0005 00AA             if (received_package[2] == 't') {
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0005 00AB                 //printf ("%c",a);
; 0005 00AC                 temp = ds18b20_gettemp();
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0005 00AD                 //printf("%d", (int)temp);
; 0005 00AE                 //printf ("%d",temp);
; 0005 00AF                 return_data_to_master(0, 0, 0,(unsigned char) ((int) temp), (unsigned char)((int) (10 * (temp - (int) te ...
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0005 00B0 
; 0005 00B1             }
; 0005 00B2             if (received_package[2] == 'h') {
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0005 00B3                 t = myGetTimeFromDS1307ver2();
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0005 00B4                 //printf(" Gio hien tai la %d:%d:%d\n\r", (unsigned char) (t.Hour + t.Mode * t.AP * 12), (unsigned char) ...
; 0005 00B5                 return_data_to_master(0, 1, (t.Hour + t.Mode * t.AP * 12), t.Minute, t.Second);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0005 00B6             }
; 0005 00B7 
; 0005 00B8         }
;PCODE: $0000010F VOL: 0
; 0005 00B9     }
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0005 00BA     package_size = 0;
;PCODE: $00000112 VOL: 0
; 0005 00BB }
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;
;void send_query_to_slave() {
; 0005 00BD void send_query_to_slave() {
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0005 00BE //    hienthi(11);delay_ms(4000);
; 0005 00BF     uart_char_tx(received_package[0]);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0005 00C0     delay_ms(100); // cho cho master nhan va xu ly
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0005 00C1     uart_char_tx(received_package[1]);
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0005 00C2     delay_ms(100);
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0005 00C3     uart_char_tx(received_package[2]);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0005 00C4     delay_ms(100);
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0005 00C5     uart_char_tx(received_package[3]);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0005 00C6     delay_ms(100);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0005 00C7 }
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;
;// doc tung byte va luu vao goi tin theo dinh dang
;
;void process_received_data() {
; 0005 00CB void process_received_data() {
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0005 00CC     if (IS_MASTER) {
; 0005 00CD         // xu ly du lieu nhan duoc tren master
; 0005 00CE         if (isComplete) {
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0005 00CF             if (received_byte == '@') {
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0005 00D0                 //hienthi(33);delay_ms(4000);
; 0005 00D1                 //printf("bat dau goi tin; ");
; 0005 00D2                 isComplete = 0;
;PCODE: $00000138 VOL: 0
; 0005 00D3                 received_package[package_size] = received_byte;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0005 00D4                 package_size++;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0005 00D5             }
; 0005 00D6             if (received_byte == '$') {
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0005 00D7                 // slave da xac nhan, xu ly tiep, gui cau truy van toi slave
; 0005 00D8                 hienthi(11);delay_ms(4000);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0005 00D9                 send_query_to_slave();
;PCODE: $00000148 VOL: 0
; 0005 00DA             }
; 0005 00DB         } else {
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0005 00DC             received_package[package_size] = received_byte;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0005 00DD             package_size++;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0005 00DE             //hienthi(package_size);delay_ms(4000);
; 0005 00DF             if ((received_byte == '#') || (package_size > 9)) {
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0005 00E0                 //printf("ket thuc goi tin; ");
; 0005 00E1                 //hienthi(44);delay_ms(4000);
; 0005 00E2                 isComplete = 1;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0005 00E3                 execute_query();
;PCODE: $0000015C VOL: 0
; 0005 00E4             }
; 0005 00E5         }
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0005 00E6     } else {
;PCODE: $0000015F VOL: 0
; 0005 00E7         // xu ly du lieu nhan duoc tren slave
; 0005 00E8         if (isComplete) {
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0005 00E9             if (received_byte == '@') {
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0005 00EA                 //printf("bat dau goi tin; ");
; 0005 00EB                 isComplete = 0;
;PCODE: $00000165 VOL: 0
; 0005 00EC                 received_package[package_size] = received_byte;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0005 00ED                 package_size++;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0005 00EE             }
; 0005 00EF         } else {
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0005 00F0             received_package[package_size] = received_byte;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0005 00F1             package_size++;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0005 00F2             if ((received_byte == '#') || (package_size > 9)) {
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0005 00F3                 //printf("ket thuc goi tin; ");
; 0005 00F4                 isComplete = 1;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0005 00F5                 execute_query();
;PCODE: $0000017F VOL: 0
; 0005 00F6             }
; 0005 00F7         }
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0005 00F8     }
;PCODE: $00000182 VOL: 0
; 0005 00F9 }
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;
;void send_confirm_to_master() {
; 0005 00FB void send_confirm_to_master() {
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0005 00FC     uart_char_tx('$');
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0005 00FD }
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;
;void enable_slave() {
; 0005 00FF void enable_slave() {
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0005 0100     slave_enable = 1;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0005 0101     UCSRA &= ~(1 << MPCM);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0005 0102 }
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;
;void disable_slave() {
; 0005 0104 void disable_slave() {
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0005 0105     slave_enable = 0;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0005 0106     UCSRA |= (1 << MPCM);
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0005 0107 }
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;
;// xu ly ngat nhan du lieu
;
;interrupt [USART_RXC] void usart_rx_isr(void) {
; 0005 010B interrupt [12] void usart_rx_isr(void) {
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0005 010C     if (IS_MASTER) {
; 0005 010D         // xu ly ngat nhan du lieu tren master
; 0005 010E         received_byte = UDR;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0005 010F         process_received_data();
;PCODE: $0000019F VOL: 0
; 0005 0110     }
; 0005 0111     else {
;PCODE: $000001A0 VOL: 0
; 0005 0112         //xu ly ngat nhan du lieu tren slave
; 0005 0113         //printf("slave nhan dia chi");
; 0005 0114 //        hienthi(received_byte);
; 0005 0115 //        delay_ms(6000);
; 0005 0116         received_byte = UDR;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0005 0117         if (slave_enable) {
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0005 0118             //printf("xy ly nghat");
; 0005 0119             process_received_data();
;PCODE: $000001A6 VOL: 0
; 0005 011A         } else {
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0005 011B             //printf("slave nhan dia chi");
; 0005 011C             if (MY_ADDRESS == received_byte) {
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0005 011D                 enable_slave();
;PCODE: $000001AC VOL: 0
; 0005 011E                 send_confirm_to_master();
;PCODE: $000001AD VOL: 0
; 0005 011F             }
; 0005 0120         }
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0005 0121     }
;PCODE: $000001B0 VOL: 0
; 0005 0122 }
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;
;char mygetchar(void) {
; 0005 0124 char mygetchar(void) {
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0005 0125     char data;
; 0005 0126     if (rx_counter == 0) return 0;
;PCODE: $000001B6 VOL: 0
;	data -> R17
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0005 0127     data = rx_buffer[rx_rd_index];
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0005 0128     if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0005 0129     //#asm("cli")
; 0005 012A     --rx_counter;
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0005 012B     //#asm("sei")
; 0005 012C     return data;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0005 012D }
;PCODE: $000001CB VOL: 0
;
;// Declare your global variables here
;unsigned char my_variable;
;
;void main(void) {
; 0005 0132 void main(void) {
;PCODE: $000001CC VOL: 0
; 0005 0133     // Declare your local variables here
; 0005 0134     unsigned char *t = 0;
; 0005 0135     unsigned char h, m, s, i;
; 0005 0136     int x;
; 0005 0137     Time time = {30, 15, 10, 5, 12, 5, 16, 1, 1}; // thoi gian hien tai
; 0005 0138     // Input/Output Ports initialization
; 0005 0139     // Port A initialization
; 0005 013A     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0005 013B     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0005 013C     PORTA = 0x00;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;	*t -> R16,R17
;	h -> R19
;	m -> R18
;	s -> R21
;	i -> R20
;	x -> Y+9
;	time -> Y+0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0005 013D     //    DDRA = 0x00;
; 0005 013E     DDRA = 0xFF;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0005 013F 
; 0005 0140     // Port B initialization
; 0005 0141     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0005 0142     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0005 0143     PORTB = 0x00;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0005 0144     DDRB = 0x00;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0005 0145 
; 0005 0146     // Port C initialization
; 0005 0147     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0005 0148     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0005 0149     PORTC = 0x00;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0005 014A     //    DDRC = 0xFF;
; 0005 014B     DDRC = 0x00;
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0005 014C 
; 0005 014D     // Port D initialization
; 0005 014E     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0005 014F     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0005 0150     PORTD = 0x00;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0005 0151     DDRD = 0x00;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0005 0152 
; 0005 0153     // Timer/Counter 0 initialization
; 0005 0154     // Clock source: System Clock
; 0005 0155     // Clock value: Timer 0 Stopped
; 0005 0156     // Mode: Normal top=0xFF
; 0005 0157     // OC0 output: Disconnected
; 0005 0158     TCCR0 = 0x00;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0005 0159     TCNT0 = 0x00;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0005 015A     OCR0 = 0x00;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0005 015B 
; 0005 015C     // Timer/Counter 1 initialization
; 0005 015D     // Clock source: System Clock
; 0005 015E     // Clock value: Timer1 Stopped
; 0005 015F     // Mode: Normal top=0xFFFF
; 0005 0160     // OC1A output: Discon.
; 0005 0161     // OC1B output: Discon.
; 0005 0162     // Noise Canceler: Off
; 0005 0163     // Input Capture on Falling Edge
; 0005 0164     // Timer1 Overflow Interrupt: Off
; 0005 0165     // Input Capture Interrupt: Off
; 0005 0166     // Compare A Match Interrupt: Off
; 0005 0167     // Compare B Match Interrupt: Off
; 0005 0168     TCCR1A = 0x00;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0005 0169     TCCR1B = 0x00;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0005 016A     TCNT1H = 0x00;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0005 016B     TCNT1L = 0x00;
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0005 016C     ICR1H = 0x00;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0005 016D     ICR1L = 0x00;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0005 016E     OCR1AH = 0x00;
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0005 016F     OCR1AL = 0x00;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0005 0170     OCR1BH = 0x00;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0005 0171     OCR1BL = 0x00;
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0005 0172 
; 0005 0173     // Timer/Counter 2 initialization
; 0005 0174     // Clock source: System Clock
; 0005 0175     // Clock value: Timer2 Stopped
; 0005 0176     // Mode: Normal top=0xFF
; 0005 0177     // OC2 output: Disconnected
; 0005 0178     ASSR = 0x00;
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0005 0179     TCCR2 = 0x00;
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0005 017A     TCNT2 = 0x00;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0005 017B     OCR2 = 0x00;
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0005 017C 
; 0005 017D     // External Interrupt(s) initialization
; 0005 017E     // INT0: Off
; 0005 017F     // INT1: Off
; 0005 0180     // INT2: Off
; 0005 0181     MCUCR = 0x00;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0005 0182     MCUCSR = 0x00;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0005 0183 
; 0005 0184     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0005 0185     TIMSK = 0x00;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0005 0186 
; 0005 0187     // USART initialization
; 0005 0188     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0005 0189     // USART Receiver: On
; 0005 018A     // USART Transmitter: On
; 0005 018B     // USART Mode: Asynchronous
; 0005 018C     // USART Baud Rate: 9600
; 0005 018D     UCSRA = 0x00;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0005 018E     UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0005 018F     UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE) | (1 << UCSZ2);
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0005 0190     UBRRH = 0x00;
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0005 0191     UBRRL = 0x19;
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0005 0192     if(!IS_MASTER) disable_slave();
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0005 0193 
; 0005 0194 
; 0005 0195     // Analog Comparator initialization
; 0005 0196     // Analog Comparator: Off
; 0005 0197     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0005 0198     ACSR = 0x80;
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0005 0199     SFIOR = 0x00;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0005 019A 
; 0005 019B     // ADC initialization
; 0005 019C     // ADC disabled
; 0005 019D     ADCSRA = 0x00;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0005 019E 
; 0005 019F     // SPI initialization
; 0005 01A0     // SPI disabled
; 0005 01A1     SPCR = 0x00;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0005 01A2 
; 0005 01A3     // TWI initialization
; 0005 01A4     // TWI disabled
; 0005 01A5     TWCR = 0x00;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0005 01A6 
; 0005 01A7     // I2C Bus initialization
; 0005 01A8     // I2C Port: PORTA
; 0005 01A9     // I2C SDA bit: 1
; 0005 01AA     // I2C SCL bit: 0
; 0005 01AB     // Bit Rate: 100 kHz
; 0005 01AC     // Note: I2C settings are specified in the
; 0005 01AD     // Project|Configure|C Compiler|Libraries|I2C menu.
; 0005 01AE     //    i2c_init();
; 0005 01AF 
; 0005 01B0     // 1 Wire Bus initialization
; 0005 01B1     // 1 Wire Data port: PORTB
; 0005 01B2     // 1 Wire Data bit: 0
; 0005 01B3     // Note: 1 Wire port settings are specified in the
; 0005 01B4     // Project|Configure|C Compiler|Libraries|1 Wire menu.
; 0005 01B5     //    w1_init();
; 0005 01B6     //    ds18b20_init(t, 0, 0, DS18B20_9BIT_RES);
; 0005 01B7     //    rtc_init(0, 0, 0);
; 0005 01B8 
; 0005 01B9     //    TWI_Init(); //khoi dong TWI dung cho myds1307rtc.h
; 0005 01BA     I2C_Init(); //khoi dong TWI dung cho myds1307rtcver2.h
;PCODE: $00000223 VOL: 0
; 0005 01BB 
; 0005 01BC     // Global enable interrupts
; 0005 01BD #asm("sei")
;PCODE: $00000224 VOL: 0
	sei
;PCODE: $00000225 VOL: 0
; 0005 01BE 
; 0005 01BF     while (1) {
;PCODE: $00000226 VOL: 0
; 0005 01C0 
; 0005 01C1         // nhiet do
; 0005 01C2         int whole = 0, decimal = 0;
; 0005 01C3 
; 0005 01C4         // hien thi nhiet do su dung myds18b20ver1.h
; 0005 01C5         //        therm_ReadTempC(NULL, &whole, &decimal);
; 0005 01C6         //        hienthinhietdo(whole);
; 0005 01C7 
; 0005 01C8         // hien thi nhiet do su dung myds18b20ver2.h
; 0005 01C9         temp = ds18b20_gettemp();
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;	x -> Y+13
;	time -> Y+4
;	whole -> Y+2
;	decimal -> Y+0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0005 01CA         hienthinhietdo(temp);
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0005 01CB 
; 0005 01CC         delay_ms(1000);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0005 01CD 
; 0005 01CE         //        temp = ds18b20_temperature(t);
; 0005 01CF 
; 0005 01D0         // lay thoi gian
; 0005 01D1         //        mySetTimeForDS1307ver2(&time);
; 0005 01D2         //        time = myGetTimeFromDS1307();
; 0005 01D3 //        time = myGetTimeFromDS1307ver2();
; 0005 01D4 //        hienthithoigian(time.Hour + time.Mode * time.AP * 12, time.Minute); // hien thi theo 24h
; 0005 01D5         hienthi(10);
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0005 01D6         delay_ms(2000);
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0005 01D7 
; 0005 01D8 //        uart_char_tx('@');
; 0005 01D9 //        delay_ms(100);
; 0005 01DA //        uart_char_tx('2');
; 0005 01DB //        delay_ms(100);
; 0005 01DC //        uart_char_tx('t');
; 0005 01DD //        delay_ms(100);
; 0005 01DE //        uart_char_tx('#');
; 0005 01DF //        delay_ms(100);
; 0005 01E0 
; 0005 01E1         // kytu = mygetchar();
; 0005 01E2         // if(kytu !=0) putchar(kytu);
; 0005 01E3         // printf("%c", my_variable);
; 0005 01E4         //printf("Nhiet do hien tai la");
; 0005 01E5         //kytu = uart_getchar();
; 0005 01E6         received_package[0] = '@';
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0005 01E7         received_package[1]='2';
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0005 01E8         received_package[2]='t';
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0005 01E9         received_package[3]='#';
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0005 01EA         uart_address_tx(received_package[1]);
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0005 01EB 
; 0005 01EC 
; 0005 01ED 
; 0005 01EE     }
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0005 01EF }
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;
;void hienthinhietdo(unsigned char temp) {
; 0005 01F1 void hienthinhietdo(unsigned char temp) {
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0005 01F2     unsigned char a, b;
; 0005 01F3     a = temp / 10;
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;	temp -> Y+2
;	a -> R17
;	b -> R16
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0005 01F4     b = temp % 10;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0005 01F5 
; 0005 01F6 
; 0005 01F7     quet(0xC6);
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0005 01F8     quet(0x9C);
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0005 01F9     quet(ma[b]);
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0005 01FA     quet(ma[a]);
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0005 01FB     day(); // push
;PCODE: $0000026F VOL: 0
; 0005 01FC }
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;
;void hienthithoigian(unsigned char hour, unsigned char minute) {
; 0005 01FE void hienthithoigian(unsigned char hour, unsigned char minute) {
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0005 01FF     unsigned char a, b, c, d;
; 0005 0200     a = hour / 10;
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;	hour -> Y+5
;	minute -> Y+4
;	a -> R17
;	b -> R16
;	c -> R19
;	d -> R18
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0005 0201     b = hour % 10;
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0005 0202     c = minute / 10;
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0005 0203     d = minute % 10;
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0005 0204     quet(ma[d]);
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0005 0205     quet(ma[c]);
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0005 0206     quet(~(~ma[b] | 0x80));
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0005 0207     quet(ma[a]);
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0005 0208     day();
;PCODE: $000002A7 VOL: 0
; 0005 0209 }
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;
;void hienthi(int x) {
; 0005 020B void hienthi(int x) {
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0005 020C     unsigned char a, b, c, d;
; 0005 020D     int i = 0;
; 0005 020E     a = x / 1000;
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;	x -> Y+6
;	a -> R17
;	b -> R16
;	c -> R19
;	d -> R18
;	i -> R20,R21
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0005 020F     b = (x % 1000) / 100;
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0005 0210     c = (x % 100) / 10;
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0005 0211     d = (x % 10);
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0005 0212 
; 0005 0213     quet(ma[d]);
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0005 0214     quet(ma[c]);
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0005 0215     quet(ma[b]);
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0005 0216     quet(ma[a]);
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0005 0217 
; 0005 0218 
; 0005 0219 
; 0005 021A 
; 0005 021B     day();
;PCODE: $000002DC VOL: 0
; 0005 021C }
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;
;void quet(unsigned char x) {
; 0005 021E void quet(unsigned char x) {
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0005 021F     unsigned char i, temp;
; 0005 0220     for (i = 0; i < 8; i++) {
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;	x -> Y+2
;	i -> R17
;	temp -> R16
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0005 0221         temp = x;
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0005 0222         temp = temp & 0x80;
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0005 0223         if (temp == 0x80) {
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0005 0224             PORTA.1 = 1;
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0005 0225         } else {
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0005 0226             PORTA.1 = 0;
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0005 0227         }
;PCODE: $000002FC VOL: 0
; 0005 0228         x = x * 2;
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0005 0229         PORTA.0 = 0;
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
; 0005 022A         PORTA.0 = 1;
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0005 022B     }
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0005 022C }
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;
;void day() {
; 0005 022E void day() {
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0005 022F     PORTA.2 = 0;
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0005 0230     PORTA.2 = 1;
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0005 0231 }
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;
;//chuong trinh con phat du lieu
;
;void uart_char_tx(unsigned char chr) {
; 0005 0235 void uart_char_tx(unsigned char chr) {
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0005 0236     while (!(UCSRA & (1 << UDRE))); //cho den khi bit UDRE=1 moi thoat khoi while
;PCODE: $0000031A VOL: 0
;	chr -> Y+0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
; 0005 0237     UCSRB &= ~(1 << TXB8); //reset the 9th bit
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0005 0238     UDR = chr;
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0005 0239 }
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;
;//chuong trinh con phat dia chi
;
;void uart_address_tx(unsigned char chr) {
; 0005 023D void uart_address_tx(unsigned char chr) {
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0005 023E     while (!(UCSRA & (1 << UDRE))); //cho den khi bit UDRE=1 moi thoat khoi while
;PCODE: $0000032A VOL: 0
;	chr -> Y+0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0005 023F     UCSRB |= (1 << TXB8);
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0005 0240     UDR = chr;
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0005 0241 }
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;
;
;unsigned char uart_getchar() {
; 0005 0244 unsigned char uart_getchar() {
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0005 0245     unsigned char a = '';
; 0005 0246     a = UDR;
;PCODE: $0000033A VOL: 0
;	a -> R17
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0005 0247     return a;
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0005 0248 }
;PCODE: $00000342 VOL: 0
;
;void getState(unsigned char a) {
; 0005 024A void getState(unsigned char a) {
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0005 024B     switch (a) {
;PCODE: $00000345 VOL: 0
;	a -> Y+0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0005 024C         case 't':
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0005 024D             printf("Nhiet do hien tai la %f", temp);
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0005 024E             break;
;PCODE: $00000353 VOL: 0
; 0005 024F         case 'h':
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0005 0250             printf("xin chao");
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0005 0251             break;
;PCODE: $0000035E VOL: 0
; 0005 0252     }
;PCODE: $0000035F VOL: 0
; 0005 0253 }
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;
;//interrupt [USART_RXC] void rx_isr(){ //ngat nhan khi bit RXC =1
;//  kytu = UDR;
;//}
;
;
