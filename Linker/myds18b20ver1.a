;#include <myds18b20ver1.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// the following arrays specify the addresses of *my* ds18b20 devices
;// substitute the address of your devices before using.
;
;//byte rom0[] = {0x28, 0xE1, 0x21, 0xA3, 0x02, 0x00, 0x00, 0x5B};
;//byte rom1[] = {0x28, 0x1B, 0x21, 0x30, 0x05, 0x00, 0x00, 0xF5};
;
;byte therm_Reset() {
; 0000 0009 byte therm_Reset() {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000A     byte i;
; 0000 000B     THERM_OUTPUT(); // set pin as output
;PCODE: $0000000F VOL: 0
;	i -> R17
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 000C     THERM_LOW(); // pull pin low for 480uS
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 000D     delay_us(480);
;PCODE: $00000014 VOL: 0
; 0000 000E     THERM_INPUT(); // set pin as input
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 000F     delay_us(60); // wait for 60uS
;PCODE: $00000017 VOL: 0
; 0000 0010     i = THERM_READ(); // get pin value
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0011     delay_us(420); // wait for rest of 480uS period
;PCODE: $0000001B VOL: 0
; 0000 0012     return i;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0013 }
;PCODE: $0000001F VOL: 0
;
;void therm_WriteBit(byte _bit) {
; 0000 0015 void therm_WriteBit(byte _bit) {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0016     THERM_OUTPUT(); // set pin as output
;PCODE: $00000022 VOL: 0
;	_bit -> Y+0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0017     THERM_LOW(); // pull pin low for 1uS
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0018     delay_us(1);
;PCODE: $00000027 VOL: 0
; 0000 0019     if (_bit) THERM_INPUT(); // to write 1, float pin
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 001A     delay_us(60);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 001B     THERM_INPUT(); // wait 60uS & release pin
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 001C }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;byte therm_ReadBit() {
; 0000 001E byte therm_ReadBit() {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 001F     byte _bit = 0;
; 0000 0020     THERM_OUTPUT(); // set pin as output
;PCODE: $00000036 VOL: 0
;	_bit -> R17
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0021     THERM_LOW(); // pull pin low for 1uS
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0022     delay_us(1);
;PCODE: $0000003D VOL: 0
; 0000 0023     THERM_INPUT(); // release pin & wait 14 uS
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0024     delay_us(14);
;PCODE: $00000040 VOL: 0
; 0000 0025     if (THERM_READ()) _bit = 1; // read pin value
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0026     delay_us(45); // wait rest of 60uS period
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0027     return _bit;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0028 }
;PCODE: $0000004B VOL: 0
;
;void therm_WriteByte(byte data) {
; 0000 002A void therm_WriteByte(byte data) {
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 002B     byte i = 8;
; 0000 002C     while (i--) // for 8 bits:
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;	data -> Y+1
;	i -> R17
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 002D     {
; 0000 002E         therm_WriteBit(data & 1); // send least significant bit
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 002F         data >>= 1; // shift all bits right
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0030     }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0031 }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;
;byte therm_ReadByte() {
; 0000 0033 byte therm_ReadByte() {
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0034     byte i = 8, data = 0;
; 0000 0035     while (i--) // for 8 bits:
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;	i -> R17
;	data -> R16
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0036     {
; 0000 0037         data >>= 1; // shift all bits right
;PCODE: $00000074 VOL: 0
; 0000 0038         data |= (therm_ReadBit() << 7); // get next bit (LSB first)
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0039     }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 003A     return data;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 003B }
;PCODE: $0000007E VOL: 0
;
;//void therm_MatchRom(byte rom[]) {
;//    byte i;
;//    therm_WriteByte(THERM_MATCHROM);
;//    for (i = 0; i < 8; i++)
;//        therm_WriteByte(rom[i]);
;//}
;
;void therm_ReadTempRaw(byte id[], byte *t0, byte *t1)
; 0000 0045 // Returns the two temperature bytes from the scratchpad
; 0000 0046 {
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0047 //    therm_Reset(); // skip ROM & start temp conversion
; 0000 0048 
; 0000 0049     //    if (id) therm_MatchRom(id);
; 0000 004A     //    else therm_WriteByte(THERM_SKIPROM);
; 0000 004B     //    therm_WriteByte(THERM_CONVERTTEMP);
; 0000 004C     //    while (!therm_ReadBit()); // wait until conversion completed
; 0000 004D     //    therm_Reset(); // read first two bytes from scratchpad
; 0000 004E     //    if (id) therm_MatchRom(id);
; 0000 004F     //    else therm_WriteByte(THERM_SKIPROM);
; 0000 0050 
; 0000 0051     therm_Reset(); // skip ROM & start temp conversion
;PCODE: $00000081 VOL: 0
;	id -> Y+4
;	*t0 -> Y+2
;	*t1 -> Y+0
;PCODE: $00000082 VOL: 0
; 0000 0052     therm_WriteByte(THERM_SKIPROM);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0053     therm_WriteByte(THERM_CONVERTTEMP);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0054     while (!therm_ReadBit()); // wait until conversion completed
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0055 
; 0000 0056     therm_Reset(); // read first two bytes from scratchpad
;PCODE: $0000008D VOL: 0
; 0000 0057     therm_WriteByte(THERM_SKIPROM);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0058 
; 0000 0059     therm_WriteByte(THERM_READSCRATCH);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 005A     *t0 = therm_ReadByte(); // first byte
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 005B     *t1 = therm_ReadByte(); // second byte
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 005C }
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;
;void therm_ReadTempC(byte id[], int *whole, int *decimal)
; 0000 005F // returns temperature in Celsius as WW.DDDD, where W=whole & D=decimal
; 0000 0060 {
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0061     byte t0, t1;
; 0000 0062     therm_ReadTempRaw(id, &t0, &t1); // get temperature values
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;	id -> Y+6
;	*whole -> Y+4
;	*decimal -> Y+2
;	t0 -> R17
;	t1 -> R16
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0063     *whole = (t1 & 0x07) << 4; // grab lower 3 bits of t1
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0064     *whole |= t0 >> 4; // and upper 4 bits of t0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0065     *decimal = t0 & 0x0F; // decimals in lower 4 bits of t0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0066     *decimal *= 625; // conversion factor for 12-bit resolution
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0067 }
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;
;void therm_ReadTempF(byte id[], int *whole, int *decimal)
; 0000 006A // returns temperature in Fahrenheit as WW.D, where W=whole & D=decimal
; 0000 006B {
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 006C     byte t0, t1;
; 0000 006D     int t16, t2, f10;
; 0000 006E     therm_ReadTempRaw(id, &t0, &t1); // get temperature values
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;	id -> Y+12
;	*whole -> Y+10
;	*decimal -> Y+8
;	t0 -> R17
;	t1 -> R16
;	t16 -> R18,R19
;	t2 -> R20,R21
;	f10 -> Y+6
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 006F     t16 = (t1 << 8) + t0; // result is temp*16, in celcius
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0070     t2 = t16 / 8; // get t*2, with fractional part lost
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0071     f10 = t16 + t2 + 320; // F=1.8C+32, so 10F = 18C+320 = 16C + 2C + 320
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0072     *whole = f10 / 10; // get whole part
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0073     *decimal = f10 % 10; // get fractional part
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0074 }
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;
;//inline __attribute__((gnu_inline)) void quickDelay(int delay)
;//// this routine will pause 0.25uS per delay unit
;//// for testing only; use _us_Delay() routine for >1uS delays
;//{
;//    while (delay--) // uses sbiw to subtract 1 from 16bit word
;//        asm volatile("nop"); // nop, sbiw, brne = 4 cycles = 0.25 uS
;//}
;
;// ---------------------------------------------------------------------------
;// ROM READER PROGRAM
;
;byte RomReaderProgram()
; 0000 0082 // Read the ID of the attached Dallas 18B20 device
; 0000 0083 // Note: only ONE device should be on the bus.
; 0000 0084 {
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0085     byte i;
; 0000 0086     byte data;
; 0000 0087     //    LCD_String("ID (ROM) Reader:");
; 0000 0088 //    while (1) {
; 0000 0089         //        LCD_Line(1);
; 0000 008A         // write 64-bit ROM code on first LCD line
; 0000 008B         therm_Reset();
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;	i -> R17
;	data -> R16
;PCODE: $000000FE VOL: 0
; 0000 008C         therm_WriteByte(THERM_READROM);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 008D //        for (i = 0; i < 8; i++) {
; 0000 008E             data = therm_ReadByte();
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 008F             //            LCD_HexByte(data);
; 0000 0090 //        }
; 0000 0091         //        msDelay(1000); // do a read every second
; 0000 0092 //    }
; 0000 0093         return data;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0094 }
;PCODE: $00000106 VOL: 0
